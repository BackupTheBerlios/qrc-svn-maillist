From jblebrun at mail.berlios.de  Sat Nov  4 08:57:14 2006
From: jblebrun at mail.berlios.de (jblebrun at BerliOS)
Date: Sat, 04 Nov 2006 07:57:14 -0000
Subject: [Qrc-svn] r290 - in qrc/branches/fork-for-gaim-2: . gaym/src
Message-ID: <200611040756.kA47uSrN029224@sheep.berlios.de>

Author: jblebrun
Date: 2006-11-04 08:56:27 +0100 (Sat, 04 Nov 2006)
New Revision: 290

Modified:
   qrc/branches/fork-for-gaim-2/Makefile.am
   qrc/branches/fork-for-gaim-2/configure.ac
   qrc/branches/fork-for-gaim-2/gaym/src/Makefile.am
   qrc/branches/fork-for-gaim-2/gaym/src/botfilter.c
   qrc/branches/fork-for-gaim-2/gaym/src/botfilter.h
   qrc/branches/fork-for-gaim-2/gaym/src/cmds.c
   qrc/branches/fork-for-gaim-2/gaym/src/dcc_send.c
   qrc/branches/fork-for-gaim-2/gaym/src/gaym.c
   qrc/branches/fork-for-gaim-2/gaym/src/gaym.h
   qrc/branches/fork-for-gaim-2/gaym/src/gayminfo.c
   qrc/branches/fork-for-gaim-2/gaym/src/gayminfo.h
   qrc/branches/fork-for-gaim-2/gaym/src/gaympriv.c
   qrc/branches/fork-for-gaim-2/gaym/src/gaympriv.h
   qrc/branches/fork-for-gaim-2/gaym/src/helpers.c
   qrc/branches/fork-for-gaim-2/gaym/src/msgs.c
   qrc/branches/fork-for-gaim-2/gaym/src/parse.c
   qrc/branches/fork-for-gaim-2/gaym/src/weblogin.c
Log:
Changes to compile with the latest Gaim 2.0.0 (beta4)


Modified: qrc/branches/fork-for-gaim-2/Makefile.am
===================================================================
--- qrc/branches/fork-for-gaim-2/Makefile.am	2006-02-18 22:34:25 UTC (rev 289)
+++ qrc/branches/fork-for-gaim-2/Makefile.am	2006-11-04 07:56:27 UTC (rev 290)
@@ -16,7 +16,6 @@
 
 SUBDIRS = \
 	nsis \
-	$(MAYBE_BOT_CHALLENGER) \
 	$(MAYBE_CHATICON) \
 	$(MAYBE_GAYM) \
 	$(MAYBE_GAYM_EXTRAS) 

Modified: qrc/branches/fork-for-gaim-2/configure.ac
===================================================================
--- qrc/branches/fork-for-gaim-2/configure.ac	2006-02-18 22:34:25 UTC (rev 289)
+++ qrc/branches/fork-for-gaim-2/configure.ac	2006-11-04 07:56:27 UTC (rev 290)
@@ -1,11 +1,13 @@
 #                                               -*- Autoconf -*-
 # Process this file with autoconf to produce a configure script.
 
-AC_PREREQ(2.59)
 AC_INIT([qrc],[2.0],[gaymplugin at yahoogroups.com])
-AC_CANONICAL_TARGET([])
-AM_INIT_AUTOMAKE([1.9.5 no-dist-gzip dist-bzip2])
+AC_CANONICAL_SYSTEM
+AM_CONFIG_HEADER(config.h)
+AM_INIT_AUTOMAKE(AC_PACKAGE_NAME, AC_PACKAGE_VERSION)
 
+AC_PREREQ([2.50])
+
 REQUIRED_PKG_CONFIG="0.15.0"
 AC_SUBST(REQUIRED_PKG_CONFIG)
 
@@ -16,9 +18,7 @@
 AC_SUBST(REQUIRED_GTK)
 
 AC_CONFIG_SRCDIR([gaym/src/gaym.h])
-AC_CONFIG_HEADER([config.h])
 
-AC_DEFINE(GAIM_PLUGINS, 1, [Define if plugins are enabled.])
 
 # Checks for programs.
 AC_PROG_CC
@@ -39,7 +39,7 @@
 	
 AC_ARG_ENABLE([bot-challenger],
 	[AS_HELP_STRING(--enable-bot-challenger,build the bot-challenger plugin @<:@default=yes@:>@)],,
-	[enable_bot_challenger="yes"])
+	[enable_bot_challenger="no"])
 
 AC_ARG_ENABLE([gaym],
 	[AS_HELP_STRING(--enable-gaym,build the gaym plugin @<:@default=yes@:>@)],,
@@ -49,7 +49,7 @@
 	[AS_HELP_STRING(--enable-gaym-extras,build the gaym-extras plugin @<:@default=yes@:>@)],,
 	[enable_gaym_extras="yes"])
 
-AM_CONDITIONAL([COND_BOT_CHALLENGER], [test "$enable_bot_challenger" = "yes"])
+AM_CONDITIONAL([COND_BOT_CHALLENGER], [test "$enable_bot_challenger" = "no"])
 AM_CONDITIONAL([COND_DISPLAY_OPTIONS], [test "$enable_display_options" = "yes"])
 AM_CONDITIONAL([COND_GAYM], [test "$enable_gaym" = "yes"])
 AM_CONDITIONAL([COND_GAYM_EXTRAS], [test "$enable_gaym_extras" = "yes"])

Modified: qrc/branches/fork-for-gaim-2/gaym/src/Makefile.am
===================================================================
--- qrc/branches/fork-for-gaim-2/gaym/src/Makefile.am	2006-02-18 22:34:25 UTC (rev 289)
+++ qrc/branches/fork-for-gaim-2/gaym/src/Makefile.am	2006-11-04 07:56:27 UTC (rev 290)
@@ -5,7 +5,6 @@
 	botfilter.c \
 	botfilter.h \
 	cmds.c \
-	dcc_send.c \
 	gaym.c \
 	gaym.h \
 	gayminfo.c \
@@ -34,4 +33,6 @@
 
 AM_CPPFLAGS = \
 	$(DEBUG_CFLAGS) \
-	$(GAIM_CFLAGS)
+	$(GAIM_CFLAGS) \
+	$(GLIB_CFLAGS) \
+	-DGAIM_PLUGINS

Modified: qrc/branches/fork-for-gaim-2/gaym/src/botfilter.c
===================================================================
--- qrc/branches/fork-for-gaim-2/gaym/src/botfilter.c	2006-02-18 22:34:25 UTC (rev 289)
+++ qrc/branches/fork-for-gaim-2/gaym/src/botfilter.c	2006-11-04 07:56:27 UTC (rev 290)
@@ -181,8 +181,8 @@
     return permitted;
 }
 
-void process_spamlist_from_web_cb(void *data, const char *result,
-                                  size_t len)
+void process_spamlist_from_web_cb(GaimUtilFetchUrlData *url_data, void *data, const gchar *result,
+                                  gsize len, const gchar* error_message)
 {
     if (!result) {
         gaim_prefs_set_string("/plugins/prpl/gaym/botfilter_url_result",
@@ -252,7 +252,7 @@
     if (!last_check || time(NULL) - last_check > MIN_CHECK_INTERVAL) {
         gaim_prefs_set_int("/plugins/prpl/gaym/botfilter_url_last_check",
                            time(NULL));
-        gaim_url_fetch(url, FALSE, user_agent, FALSE,
+        gaim_util_fetch_url(url, FALSE, user_agent, FALSE,
                        process_spamlist_from_web_cb, NULL);
     }
 
@@ -260,7 +260,7 @@
 }
 
 void botfilter_url_changed_cb(const char *name, GaimPrefType type,
-                              gpointer value, gpointer data)
+                              gconstpointer value, gpointer data)
 {
     gaim_prefs_set_int("/plugins/prpl/gaym/botfilter_url_last_check", 0);
 }

Modified: qrc/branches/fork-for-gaim-2/gaym/src/botfilter.h
===================================================================
--- qrc/branches/fork-for-gaim-2/gaym/src/botfilter.h	2006-02-18 22:34:25 UTC (rev 289)
+++ qrc/branches/fork-for-gaim-2/gaym/src/botfilter.h	2006-11-04 07:56:27 UTC (rev 290)
@@ -50,7 +50,7 @@
 void get_spamlist_from_web(void);
 
 void botfilter_url_changed_cb(const char *name, GaimPrefType type,
-                              gpointer value, gpointer data);
+                              gconstpointer value, gpointer data);
 
 #endif                          /* _GAIM_GAYM_BOTFILTER_H_ */
 

Modified: qrc/branches/fork-for-gaim-2/gaym/src/cmds.c
===================================================================
--- qrc/branches/fork-for-gaim-2/gaym/src/cmds.c	2006-02-18 22:34:25 UTC (rev 289)
+++ qrc/branches/fork-for-gaim-2/gaym/src/cmds.c	2006-11-04 07:56:27 UTC (rev 290)
@@ -20,7 +20,6 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  */
 
-#include "internal.h"
 
 #include "conversation.h"
 #include "debug.h"
@@ -433,8 +432,7 @@
         buf =
             gaym_format(gaym, "v:", "QUIT",
                         (args
-                         && args[0]) ? args[0] : "Download Gaim: "
-                        GAIM_WEBSITE);
+                         && args[0]) ? args[0] : "Leaving");
         gaym_send(gaym, buf);
         g_free(buf);
 

Modified: qrc/branches/fork-for-gaim-2/gaym/src/dcc_send.c
===================================================================
--- qrc/branches/fork-for-gaim-2/gaym/src/dcc_send.c	2006-02-18 22:34:25 UTC (rev 289)
+++ qrc/branches/fork-for-gaim-2/gaym/src/dcc_send.c	2006-11-04 07:56:27 UTC (rev 290)
@@ -21,7 +21,6 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  */
 
-#include "internal.h"
 
 #include "gaym.h"
 #include "debug.h"

Modified: qrc/branches/fork-for-gaim-2/gaym/src/gaym.c
===================================================================
--- qrc/branches/fork-for-gaim-2/gaym/src/gaym.c	2006-02-18 22:34:25 UTC (rev 289)
+++ qrc/branches/fork-for-gaim-2/gaym/src/gaym.c	2006-11-04 07:56:27 UTC (rev 290)
@@ -23,7 +23,6 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  */
 
-#include "internal.h"
 #include "accountopt.h"
 #include "blist.h"
 #include "conversation.h"
@@ -51,8 +50,7 @@
 static GList *gaym_actions(GaimPlugin * plugin, gpointer context);
 /* static GList *gaym_chat_info(GaimConnection *gc); */
 static void gaym_login(GaimAccount * account);
-static void gaym_login_cb(gpointer data, gint source,
-                          GaimInputCondition cond);
+static void gaym_login_cb(gpointer data, gint source, const gchar* error_message);
 static void gaym_close(GaimConnection * gc);
 static int gaym_im_send(GaimConnection * gc, const char *who,
                         const char *what, GaimMessageFlags flags);
@@ -460,7 +458,6 @@
     struct gaym_conn *gaym;
     char *buf;
     const char *username = gaim_account_get_username(account);
-    int err;
 
     gc = gaim_account_get_connection(account);
     gaym = gc->proto_data;
@@ -469,14 +466,14 @@
     gaim_connection_update_progress(gc, buf, 5, 6);
     g_free(buf);
     gaim_debug_misc("gaym", "Trying login to %s\n", gaym->server);
-    err = gaim_proxy_connect(account, gaym->server,
-                             gaim_account_get_int(account, "port",
-                                                  IRC_DEFAULT_PORT),
-                             gaym_login_cb, gc);
-    if (err || !account->gc) {
+    GaimProxyConnectData* pdata = gaim_proxy_connect(account, 
+			     gaym->server,
+                             gaim_account_get_int(account, "port", IRC_DEFAULT_PORT),
+                             *gaym_login_cb, 
+			     gc);
+    if (!pdata || !account->gc) {
         gaim_connection_error(gc, _("Couldn't create socket"));
-        gaim_debug_misc("gaym", "err: %d, account->gc: %x\n", err,
-                        account->gc);
+        gaim_debug_misc("gaym", "account->gc: %x\n", account->gc);
         return;
     }
 
@@ -579,10 +576,10 @@
 }
 
 
-static void gaym_get_configtxt_cb(gpointer proto_data,
-                                  const gchar * config_text, size_t len)
+static void gaym_get_configtxt_cb(GaimUtilFetchUrlData* data, gpointer proto_data,
+                                  const gchar * config_text, size_t len, const gchar* error_message)
 {
-    struct gaym_conn *gaym = (struct gaym_conn *) proto_data;
+    struct gaym_conn *gaym = (struct gaym_conn*)proto_data;
     // GaimConnection *gc = gaim_account_get_connection(gaym->account);
 
     g_return_if_fail(config_text != NULL);
@@ -596,8 +593,7 @@
 
     return;
 }
-static void gaym_login_cb(gpointer data, gint source,
-                          GaimInputCondition cond)
+static void gaym_login_cb(gpointer data, gint source, const gchar *error_message)
 {
     GaimConnection *gc = data;
     struct gaym_conn *gaym = gc->proto_data;
@@ -689,7 +685,7 @@
         char *user_agent = "Mozilla/4.0";
 
         get_spamlist_from_web();
-        gaim_url_fetch(url, FALSE, user_agent, FALSE,
+        gaim_util_fetch_url(url, FALSE, user_agent, FALSE,
                        gaym_get_configtxt_cb, gaym);
 
         g_free(url);
@@ -1433,7 +1429,11 @@
     gaym_roomlist_cancel,       /* roomlist_cancel */
     gaym_roomlist_expand_category,      /* roomlist_expand_category */
     NULL,                       /* can_receive_file */
-    gaym_dccsend_send_file      /* send_file */
+    NULL,      /* send_file */
+    NULL,	/*new_xfr */
+    NULL,	/* offline_mode */
+    NULL,	/* whiteboard_prpl_ops */
+    NULL,	/* send_raw */
 };
 
 void deref_one_user(gpointer * user, gpointer * data)
@@ -1622,7 +1622,7 @@
     NULL,                                                 /**< destroy        */
     NULL,                                                  /**< ui_info        */
     &prpl_info,                                           /**< extra_info     */
-    &prefs_info,
+    NULL,//&prefs_info,
     gaym_actions
 };
 
@@ -1687,6 +1687,7 @@
 static void _init_plugin(GaimPlugin * plugin)
 {
 
+    printf("INIT PLUGIN DAMMIT!\n");
     GaimAccountOption *option;
 
     option = gaim_account_option_string_new(_("Bio Line"), "bioline", "");

Modified: qrc/branches/fork-for-gaim-2/gaym/src/gaym.h
===================================================================
--- qrc/branches/fork-for-gaim-2/gaym/src/gaym.h	2006-02-18 22:34:25 UTC (rev 289)
+++ qrc/branches/fork-for-gaim-2/gaym/src/gaym.h	2006-11-04 07:56:27 UTC (rev 290)
@@ -23,10 +23,23 @@
 #ifndef _GAIM_GAYM_H
 #define _GAIM_GAYM_H
 
-#include "internal.h"
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
 
+//#include "internal.h"
+
 #include <glib.h>
+#include <string.h>
+#include <ctype.h>
+#include <errno.h>
+#include <stdlib.h>
+#include <unistd.h>
+#include <sys/types.h>
+#include <fcntl.h>
 
+#include <glib-2.0/glib/gi18n.h>
+
 #include "roomlist.h"
 
 #define IRC_DEFAULT_SERVER "www.gay.com"
@@ -256,10 +269,6 @@
     // 
     // (during names pass)
 } GaymNamelist;
-void gaym_dccsend_send_file(GaimConnection * gc, const char *who,
-                            const char *file);
-void gaym_dccsend_recv(struct gaym_conn *gaym, const char *from,
-                       const char *msg);
 void gaym_get_chat_key_from_weblogin(GaimAccount * account,
                                      void (*callback) (GaimAccount *));
 

Modified: qrc/branches/fork-for-gaim-2/gaym/src/gayminfo.c
===================================================================
--- qrc/branches/fork-for-gaim-2/gaym/src/gayminfo.c	2006-02-18 22:34:25 UTC (rev 289)
+++ qrc/branches/fork-for-gaim-2/gaym/src/gayminfo.c	2006-11-04 07:56:27 UTC (rev 290)
@@ -128,8 +128,8 @@
 
     }
 }
-void gaym_fetch_thumbnail_cb(void *user_data, const char *pic_data,
-                             size_t len)
+void gaym_fetch_thumbnail_cb(GaimUtilFetchUrlData *url_data, void *user_data, const gchar *pic_data,
+                             gsize len, const gchar* error_message)
 {
     if (!user_data)
         return;
@@ -154,9 +154,9 @@
 	else {
 	    gaim_buddy_icon_new(d->gc->account, d->who, (void*)pic_data, len);
 	}
-	GaimBuddyIcon *icon=gaim_buddy_icons_find(d->gc->account,d->who);
-	guint len;
-	const guchar* data=gaim_buddy_icon_get_data(icon, &len);
+	//GaimBuddyIcon *icon=gaim_buddy_icons_find(d->gc->account,d->who);
+	//guint len;
+	//const guchar* data=gaim_buddy_icon_get_data(icon, &len);
     }
     if (GAIM_CONNECTION_IS_VALID(d->gc) && len) {
         gaim_signal_emit(gaim_accounts_get_handle(), "info-updated",
@@ -240,7 +240,7 @@
                 gaim_debug_misc("gayminfo", "Found filename: %s\n",
                                 data->filename);
                 url = g_strdup_printf("%s%s", hashurl, thumbnail);
-                gaim_url_fetch(url, FALSE, "Mozilla/4.0", FALSE,
+                gaim_util_fetch_url(url, FALSE, "Mozilla/4.0", FALSE,
                                gaym_fetch_thumbnail_cb, data);
                 g_free(url);
 

Modified: qrc/branches/fork-for-gaim-2/gaym/src/gayminfo.h
===================================================================
--- qrc/branches/fork-for-gaim-2/gaym/src/gayminfo.h	2006-02-18 22:34:25 UTC (rev 289)
+++ qrc/branches/fork-for-gaim-2/gaym/src/gayminfo.h	2006-11-04 07:56:27 UTC (rev 290)
@@ -27,6 +27,7 @@
 #include <glib.h>
 
 #include "gaym.h"
+#include "util.h"
 
 /**
  * Begin temporary, pending further refactoring
@@ -42,8 +43,8 @@
     // gint pic_data_len;
 };
 
-void gaym_fetch_thumbnail_cb(void *user_data, const char *pic_data,
-                             size_t len);
+void gaym_fetch_thumbnail_cb(GaimUtilFetchUrlData *url_data, void *user_data, const gchar *pic_data,
+                             gsize len, const gchar* error_message);
 /**
  * End temporary, pending further refactoring
  */

Modified: qrc/branches/fork-for-gaim-2/gaym/src/gaympriv.c
===================================================================
--- qrc/branches/fork-for-gaim-2/gaym/src/gaympriv.c	2006-02-18 22:34:25 UTC (rev 289)
+++ qrc/branches/fork-for-gaim-2/gaym/src/gaympriv.c	2006-11-04 07:56:27 UTC (rev 290)
@@ -178,8 +178,8 @@
     }
 }
 
-void gaym_server_change_deny_status_cb(void *data, const char *result,
-                                       size_t len)
+void gaym_server_change_deny_status_cb(GaimUtilFetchUrlData *url_data, void *data, const gchar *result,
+                                       gsize len, const gchar* error_message)
 {
     gaim_debug_info("gaym", "gaym_server_change_deny_status_cb:\n%s\n",
                     result);
@@ -208,7 +208,7 @@
 
     char *user_agent = "Mozilla/4.0";
 
-    gaim_url_fetch(url, FALSE, user_agent, FALSE,
+    gaim_util_fetch_url(url, FALSE, user_agent, FALSE,
                    gaym_server_change_deny_status_cb, NULL);
 
     g_free(url);

Modified: qrc/branches/fork-for-gaim-2/gaym/src/gaympriv.h
===================================================================
--- qrc/branches/fork-for-gaim-2/gaym/src/gaympriv.h	2006-02-18 22:34:25 UTC (rev 289)
+++ qrc/branches/fork-for-gaim-2/gaym/src/gaympriv.h	2006-11-04 07:56:27 UTC (rev 290)
@@ -60,8 +60,8 @@
  * @param result The information fetched by the http GET.
  * @param len    The length of the result.
  */
-void gaym_server_change_deny_status_cb(void *data, const char *result,
-                                       size_t len);
+void gaym_server_change_deny_status_cb(GaimUtilFetchUrlData *url_data, void *data, const gchar *result,
+                                       gsize len, const gchar* error_message);
 
 /**
  * Add a name to (or remove a name from) the Gay.com server's deny list.

Modified: qrc/branches/fork-for-gaim-2/gaym/src/helpers.c
===================================================================
--- qrc/branches/fork-for-gaim-2/gaym/src/helpers.c	2006-02-18 22:34:25 UTC (rev 289)
+++ qrc/branches/fork-for-gaim-2/gaym/src/helpers.c	2006-11-04 07:56:27 UTC (rev 290)
@@ -19,7 +19,6 @@
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  */
-#include "internal.h"
 #include "debug.h"
 #include "helpers.h"
 

Modified: qrc/branches/fork-for-gaim-2/gaym/src/msgs.c
===================================================================
--- qrc/branches/fork-for-gaim-2/gaym/src/msgs.c	2006-02-18 22:34:25 UTC (rev 289)
+++ qrc/branches/fork-for-gaim-2/gaym/src/msgs.c	2006-11-04 07:56:27 UTC (rev 290)
@@ -22,7 +22,6 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  */
 
-#include "internal.h"
 #include "conversation.h"
 #include "blist.h"
 #include "notify.h"
@@ -85,8 +84,8 @@
     serv_got_im(gc, args[1], args[2], GAIM_MESSAGE_AUTO_RESP, time(NULL));
 }
 
-static void gaym_fetch_photo_cb(void *user_data, const char *info_data,
-                                size_t len)
+static void gaym_fetch_photo_cb(GaimUtilFetchUrlData *url_data, void *user_data, const gchar *info_data,
+                                gsize len, const gchar* err)
 {
     if (!info_data || !user_data) {
         return;
@@ -149,8 +148,8 @@
     gaim_imgstore_unref(id);
 }
 
-static void gaym_fetch_info_cb(void *user_data, const char *info_data,
-                               size_t len)
+static void gaym_fetch_info_cb(GaimUtilFetchUrlData *url_data, void *user_data, const gchar *info_data,
+                               gsize len, const gchar* error_message)
 {
     struct gaym_fetch_thumbnail_data *d = user_data;
     char *picpath;
@@ -203,7 +202,7 @@
 
     picurl = g_strdup_printf("http://www.gay.com%s", picpath);
     if (picurl) {
-        gaim_url_fetch(picurl, FALSE, "Mozilla/4.0 (compatible; MSIE 5.0)",
+        gaim_util_fetch_url(picurl, FALSE, "Mozilla/4.0 (compatible; MSIE 5.0)",
                        FALSE, gaym_fetch_photo_cb, user_data);
         return;
     }
@@ -293,7 +292,7 @@
         char *infourl = g_strdup_printf("%s?pw=%s&name=%s", hashurl,
                                         gaym->chat_key, args[1]);
         if (infourl) {
-            gaim_url_fetch(infourl, FALSE,
+            gaim_util_fetch_url(infourl, FALSE,
                            "Mozilla/4.0 (compatible; MSIE 5.0)", FALSE,
                            gaym_fetch_info_cb, data);
             g_free(infourl);
@@ -1129,7 +1128,7 @@
                       const char *from, char **args)
 {
     GaimConversation *convo;
-    char *tmp, *msg;
+    char *tmp=0, *msg=0;
     int notice = 0;
 
     GaimConnection *gc = gaim_account_get_connection(gaym->account);

Modified: qrc/branches/fork-for-gaim-2/gaym/src/parse.c
===================================================================
--- qrc/branches/fork-for-gaim-2/gaym/src/parse.c	2006-02-18 22:34:25 UTC (rev 289)
+++ qrc/branches/fork-for-gaim-2/gaym/src/parse.c	2006-11-04 07:56:27 UTC (rev 290)
@@ -20,8 +20,6 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  */
 
-#include "internal.h"
-
 #include "accountopt.h"
 #include "conversation.h"
 #include "notify.h"
@@ -369,7 +367,7 @@
         gaym_send(gaym, buf);
         g_free(buf);
     } else if (!strncmp(cur, "DCC SEND ", 9)) {
-        gaym_dccsend_recv(gaym, from, msg + 10);
+        //gaym_dccsend_recv(gaym, from, msg + 10);
         return NULL;
     }
 

Modified: qrc/branches/fork-for-gaim-2/gaym/src/weblogin.c
===================================================================
--- qrc/branches/fork-for-gaim-2/gaym/src/weblogin.c	2006-02-18 22:34:25 UTC (rev 289)
+++ qrc/branches/fork-for-gaim-2/gaym/src/weblogin.c	2006-11-04 07:56:27 UTC (rev 290)
@@ -20,7 +20,6 @@
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  */
-#include "internal.h"
 
 #include "conversation.h"
 #include "debug.h"
@@ -32,37 +31,7 @@
 
 #include "helpers.h"
 
-typedef struct {
-    void (*callback) (void *, const char *, size_t);
-    void *user_data;
 
-    struct {
-        char *user;
-        char *passwd;
-        char *address;
-        int port;
-        char *page;
-
-    } website;
-
-    char *url;
-    gboolean full;
-    char *user_agent;
-    gboolean http11;
-
-    int inpa;
-
-    gboolean sentreq;
-    gboolean newline;
-    gboolean startsaving;
-    gboolean has_explicit_data_len;
-    char *webdata;
-    unsigned long len;
-    unsigned long data_len;
-    GaimUrlSession *session;
-
-} GaimFetchUrlData;
-
 static void gaym_session_destroy(GaimUrlSession * session)
 {
     if (session->cookies)
@@ -88,110 +57,8 @@
     return string;
 }
 
-static void destroy_fetch_url_data(GaimFetchUrlData * gfud)
-{
-    if (gfud->webdata != NULL)
-        g_free(gfud->webdata);
-    if (gfud->url != NULL)
-        g_free(gfud->url);
-    if (gfud->user_agent != NULL)
-        g_free(gfud->user_agent);
-    if (gfud->website.address != NULL)
-        g_free(gfud->website.address);
-    if (gfud->website.page != NULL)
-        g_free(gfud->website.page);
-    if (gfud->website.user != NULL)
-        g_free(gfud->website.user);
-    if (gfud->website.passwd != NULL)
-        g_free(gfud->website.passwd);
 
-    g_free(gfud);
-}
 
-static gboolean
-parse_redirect(const char *data, size_t data_len, gint sock,
-               GaimFetchUrlData * gfud)
-{
-    gchar *s;
-
-    if ((s = g_strstr_len(data, data_len, "Location: ")) != NULL) {
-        gchar *new_url, *temp_url, *end;
-        gboolean full;
-        int len;
-
-        s += strlen("Location: ");
-        end = strchr(s, '\r');
-
-        /* Just in case :) */
-        if (end == NULL)
-            end = strchr(s, '\n');
-
-        len = end - s;
-
-        new_url = g_malloc(len + 1);
-        strncpy(new_url, s, len);
-        new_url[len] = '\0';
-
-        full = gfud->full;
-
-        if (*new_url == '/' || g_strstr_len(new_url, len, "://") == NULL) {
-            temp_url = new_url;
-
-            new_url = g_strdup_printf("%s:%d%s", gfud->website.address,
-                                      gfud->website.port, temp_url);
-
-            g_free(temp_url);
-
-            full = FALSE;
-        }
-
-        /* Close the existing stuff. */
-        gaim_input_remove(gfud->inpa);
-        close(sock);
-
-        gaim_debug_info("gaim_url_fetch", "Redirecting to %s\n", new_url);
-
-        /* Try again, with this new location. */
-        gaim_url_fetch(new_url, full, gfud->user_agent, gfud->http11,
-                       gfud->callback, gfud->user_data);
-
-        /* Free up. */
-        g_free(new_url);
-        destroy_fetch_url_data(gfud);
-
-        return TRUE;
-    }
-
-    return FALSE;
-}
-
-static size_t parse_content_len(const char *data, size_t data_len)
-{
-    size_t content_len = 0;
-    const char *p = NULL;
-
-    /* This is still technically wrong, since headers are case-insensitive
-       [RFC 2616, section 4.2], though this ought to catch the normal case.
-       Note: data is _not_ nul-terminated. */
-    if (data_len > 16) {
-        p = strncmp(data, "Content-Length: ", 16) == 0 ? data : NULL;
-        if (!p) {
-            p = g_strstr_len(data, data_len, "\nContent-Length: ");
-            if (p)
-                p += 1;
-        }
-    }
-
-    /* If we can find a Content-Length header at all, try to sscanf it.
-       Response headers should end with at least \r\n, so sscanf is safe,
-       if we make sure that there is indeed a \n in our header. */
-    if (p && g_strstr_len(p, data_len - (p - data), "\n")) {
-        sscanf(p, "Content-Length: %zu", &content_len);
-    }
-
-    return content_len;
-}
-
 // This looks for Set-cookie: fields in headers, and adds those cookies
 // To the session struct.
 static void add_cookie(gpointer key, gpointer value, gpointer data)
@@ -206,6 +73,7 @@
     g_free(cookies);
 
 }
+
 static void parse_cookies(const char *webdata, GaimUrlSession * session,
                           size_t len)
 {
@@ -231,213 +99,26 @@
 
 }
 
-
-/* This is a modified version of gaim's url_fetched_cb function. It has
-   been modified to pass cookies during requests. The cookies are set in
-   user_data, cast as a GaimUrlSession item. Any cookies in the response
-   are added to this structure, as well. */
-static void
-session_fetched_cb(gpointer url_data, gint sock, GaimInputCondition cond)
+gchar* gaym_build_session_request(gchar* url, GaimUrlSession* session)
 {
+	    if(!url || !session)
+		return 0;
 
-    GaimFetchUrlData *gfud = url_data;
-    char data;
-    gboolean got_eof = FALSE;
-    if (sock == -1) {
-        gfud->callback(gfud->user_data, NULL, 0);
-
-        destroy_fetch_url_data(gfud);
-
-        return;
-    }
-
-    if (!gfud->sentreq) {
-        char buf[2048];
-
-        if (gfud->session->cookies == NULL)
-            gfud->session->cookies = g_strdup("");
-
-        if (gfud->user_agent) {
-            /* Host header is not forbidden in HTTP/1.0 requests, and
-               HTTP/1.1 clients must know how to handle the "chunked"
-               transfer encoding. Gaim doesn't know how to handle
-               "chunked", so should always send the Host header
-               regardless, to get around some observed problems */
-            g_snprintf(buf, sizeof(buf),
-                       "GET %s%s HTTP/%s\r\n" "User-Agent: %s\r\n"
-                       "Host: %s\r\n" "Cookie: %s\r\n",
-                       (gfud->full ? "" : "/"),
-                       (gfud->full ? gfud->url : gfud->website.page),
-                       (gfud->http11 ? "1.1" : "1.0"), gfud->user_agent,
-                       gfud->website.address, gfud->session->cookies);
-        } else {
-            g_snprintf(buf, sizeof(buf),
-                       "GET %s%s HTTP/%s\r\n" "Host: %s\r\n"
-                       "Accept-Encoding: identity\r\n" "Cookie: %s\r\n",
-                       (gfud->full ? "" : "/"),
-                       (gfud->full ? gfud->url : gfud->website.page),
-                       (gfud->http11 ? "1.1" : "1.0"),
-                       gfud->website.address, gfud->session->cookies);
-        }
-        if (gfud->session->hasFormData)
-            strcat(buf,
-                   "Content-Type: application/x-www-form-urlencoded\r\n\r\n");
-        else
-            strcat(buf, "\r\n");
-        gaim_debug_misc("gaim_url_fetch", "Request: %s\n", buf);
-
-        write(sock, buf, strlen(buf));
-        fcntl(sock, F_SETFL, O_NONBLOCK);
-        gfud->sentreq = TRUE;
-        gfud->inpa = gaim_input_add(sock, GAIM_INPUT_READ,
-                                    session_fetched_cb, url_data);
-        gfud->data_len = 4096;
-        gfud->webdata = g_malloc(gfud->data_len);
-
-        return;
-    }
-
-    if (read(sock, &data, 1) > 0 || errno == EWOULDBLOCK) {
-        if (errno == EWOULDBLOCK) {
-            errno = 0;
-
-            return;
-        }
-
-        gfud->len++;
-
-        if (gfud->len == gfud->data_len + 1) {
-            gfud->data_len += (gfud->data_len) / 2;
-
-            gfud->webdata = g_realloc(gfud->webdata, gfud->data_len);
-        }
-
-        gfud->webdata[gfud->len - 1] = data;
-
-        if (!gfud->startsaving) {
-            if (data == '\r')
-                return;
-
-            if (data == '\n') {
-                if (gfud->newline) {
-                    size_t content_len;
-                    gfud->startsaving = TRUE;
-
-                    // JBL 10-16-2004: Put cookies into session
-
-                    parse_cookies(gfud->webdata, gfud->session, gfud->len);
-
-                    /* See if we can find a redirect. */
-                    if (parse_redirect
-                        (gfud->webdata, gfud->len, sock, gfud))
-                        return;
-
-                    /* No redirect. See if we can find a content length. */
-                    content_len =
-                        parse_content_len(gfud->webdata, gfud->len);
-
-                    if (content_len == 0) {
-                        /* We'll stick with an initial 8192 */
-                        content_len = 8192;
-                    } else {
-                        gfud->has_explicit_data_len = TRUE;
-                    }
-
-                    /* Out with the old... */
-                    gfud->len = 0;
-                    g_free(gfud->webdata);
-                    gfud->webdata = NULL;
-
-                    /* In with the new. */
-                    gfud->data_len = content_len;
-                    gfud->webdata = g_try_malloc(gfud->data_len);
-                    if (gfud->webdata == NULL) {
-                        gaim_debug_error("gaim_url_fetch",
-                                         "Failed to allocate %u bytes: %s\n",
-                                         gfud->data_len, strerror(errno));
-                        gaim_input_remove(gfud->inpa);
-                        close(sock);
-                        gfud->callback(gfud->user_data, NULL, 0);
-                        destroy_fetch_url_data(gfud);
-                    }
-                } else
-                    gfud->newline = TRUE;
-
-                return;
-            }
-
-            gfud->newline = FALSE;
-        } else if (gfud->has_explicit_data_len
-                   && gfud->len == gfud->data_len) {
-            got_eof = TRUE;
-        }
-    } else if (errno != ETIMEDOUT) {
-        got_eof = TRUE;
-    } else {
-        gaim_input_remove(gfud->inpa);
-        close(sock);
-
-        gfud->callback(gfud->user_data, NULL, 0);
-
-        destroy_fetch_url_data(gfud);
-    }
-
-    if (got_eof) {
-        gfud->webdata = g_realloc(gfud->webdata, gfud->len + 1);
-        gfud->webdata[gfud->len] = 0;
-
-        gaim_input_remove(gfud->inpa);
-        close(sock);
-        gfud->callback(gfud->user_data, gfud->webdata, gfud->len);
-
-        destroy_fetch_url_data(gfud);
-    }
+	    gchar* buf = g_strdup_printf("GET %s HTTP/1.1\r\n" "Accept-Encoding: identity\r\n"
+                       "Host: www.gay.com\r\n" "Cookie: %s\r\n",
+                       url, session->cookies);
+	gchar* res; 
+	if (session->hasFormData)
+            res=g_strdup_printf("%sContent-Type: application/x-www-form-urlencoded\r\n\r\n",buf);
+	else
+	    res=g_strdup_printf("%s\r\n",buf);
+	g_free(buf);
+	return res;
 }
-
-
-
-void
-gaim_session_fetch(const char *url, gboolean full,
-                   const char *user_agent, gboolean http11,
-                   void (*cb) (gpointer, const char *, size_t),
-                   void *user_data, GaimUrlSession * session)
-{
-    int sock;
-    GaimFetchUrlData *gfud;
-
-    g_return_if_fail(url != NULL);
-    g_return_if_fail(cb != NULL);
-
-    gaim_debug_info("gaim_session_fetch",
-                    "requested to fetch (%s), full=%d, user_agent=(%s), http11=%d\n",
-                    url, full, user_agent ? user_agent : "(null)", http11);
-
-    gfud = g_new0(GaimFetchUrlData, 1);
-
-    gfud->callback = cb;
-    gfud->user_data = user_data;
-    gfud->url = g_strdup(url);
-    gfud->user_agent = (user_agent != NULL ? g_strdup(user_agent) : NULL);
-    gfud->http11 = http11;
-    gfud->full = full;
-    gfud->session = session;
-    gaim_url_parse(url, &gfud->website.address, &gfud->website.port,
-                   &gfud->website.page, &gfud->website.user,
-                   &gfud->website.passwd);
-
-    if ((sock = gaim_proxy_connect(NULL, gfud->website.address,
-                                   gfud->website.port, session_fetched_cb,
-                                   gfud)) < 0) {
-        destroy_fetch_url_data(gfud);
-
-        cb(user_data, g_strdup(_("g003: Error opening connection.\n")), 0);
-    }
-}
-
 static void
-gaym_weblogin_step5(gpointer data, const char *text, size_t len)
+gaym_weblogin_step5(GaimUtilFetchUrlData *url_data, gpointer data, const gchar *text, gsize len, const gchar* err)
 {
-
+    gaim_debug_misc("weblogin","STEP FIVE BEGINS\n"); 
     GaimUrlSession *session = (GaimUrlSession *) data;
     struct gaym_conn *gaym = session->gaym;
     // Get hash from text
@@ -527,10 +208,11 @@
 }
 
 static void
-gaym_weblogin_step4(gpointer data, const char *text, size_t len)
+gaym_weblogin_step4(GaimUtilFetchUrlData *url_data, gpointer data, const gchar *text, gsize len, const gchar* err)
 {
 
     GaimUrlSession *session = (GaimUrlSession *) data;
+    parse_cookies(text, session, len);
     gaim_debug_misc("gaym", "Step 4: session: %x\n", session);
     if (session && GAIM_CONNECTION_IS_VALID(session->account->gc)) {
         // The fourth step is to parse a rand=# value out of the message
@@ -539,17 +221,21 @@
         // We then connect to messenger/applet.html
         char url[512];
         int nonce;
-        char *buf = g_strdup_printf(_("Signon: %s"),
-                                    (session->account->username));
-        gaim_connection_update_progress(session->account->gc, buf, 3, 6);
+        //char *buf = g_strdup_printf(_("Signon: %s"),
+        //                            (session->account->username));
+        //gaim_connection_update_progress(session->account->gc, buf, 3, 6);
         sscanf(text, "?rand=%d", &nonce);
         snprintf(url, 512,
                  "http://www.gay.com/messenger/applet.html?rand=%d",
                  nonce);
-
+	
         session->hasFormData = TRUE;
-        gaim_session_fetch(url, FALSE, NULL, FALSE, gaym_weblogin_step5,
-                           session, session);
+	gaim_debug_misc("weblogin","About to build url\n");
+	gchar* request=gaym_build_session_request(url, session);
+	gaim_debug_misc("weblogin","Requesting: %s\n",request);
+        gaim_util_fetch_url_request(url, FALSE, NULL, FALSE, 
+				    request, TRUE, gaym_weblogin_step5,
+				    session);
     } else {
         gaim_debug_misc("gaym", "Connection was cancelled before step4\n");
         gaim_debug_misc("gaym", "session: %x\n", session);
@@ -588,8 +274,8 @@
                  session->username, session->password);
 
             session->hasFormData = TRUE;
-            gaim_session_fetch(url, FALSE, NULL, FALSE,
-                               gaym_weblogin_step4, session, session);
+            gaim_util_fetch_url_request(url, FALSE, NULL, FALSE, NULL, TRUE,
+                               gaym_weblogin_step4, session);
         } else {
             gaim_debug_misc("gaym", "cancelled before step1\n");
             gaim_debug_misc("gaym", "gaym->sessoin: %x\n", session);
@@ -599,6 +285,8 @@
     }
 }
 
+
+/*Doesn't do anything yet*/
 void gaym_try_cached_password(GaimAccount * account,
                               void (*callback) (GaimAccount * account))
 {



From jblebrun at mail.berlios.de  Sat Nov 11 20:28:35 2006
From: jblebrun at mail.berlios.de (jblebrun at BerliOS)
Date: Sat, 11 Nov 2006 19:28:35 -0000
Subject: [Qrc-svn] r291 - qrc/branches/fork-for-gaim-2/gaym/src
Message-ID: <200611111927.kABJRjSS027886@sheep.berlios.de>

Author: jblebrun
Date: 2006-11-11 20:27:43 +0100 (Sat, 11 Nov 2006)
New Revision: 291

Modified:
   qrc/branches/fork-for-gaim-2/gaym/src/cmds.c
   qrc/branches/fork-for-gaim-2/gaym/src/gaym.c
   qrc/branches/fork-for-gaim-2/gaym/src/msgs.c
   qrc/branches/fork-for-gaim-2/gaym/src/weblogin.c
Log:
Modify weblogin so that login doesn't hang.
Oops, I broke incoming pvt msgs. Should be fixed.
Also, the overescaped msgs should be fixed, although it still shows up 
incorrectly in your own chat window.



Modified: qrc/branches/fork-for-gaim-2/gaym/src/cmds.c
===================================================================
--- qrc/branches/fork-for-gaim-2/gaym/src/cmds.c	2006-11-04 07:56:27 UTC (rev 290)
+++ qrc/branches/fork-for-gaim-2/gaym/src/cmds.c	2006-11-11 19:27:43 UTC (rev 291)
@@ -405,13 +405,15 @@
     } else {
         nick = g_strdup(args[0]);
     }
-    cur = args[1];
-    end = args[1];
+    gchar* unescaped=gaim_unescape_html(args[1]);
+    cur = unescaped;
+    end = unescaped;
     while (*end && *cur) {
         end = strchr(cur, '\n');
         if (!end)
             end = cur + strlen(cur);
         msg = g_strndup(cur, end - cur);
+
         buf = gaym_format(gaym, "vt:", "PRIVMSG", nick, msg);
 	gaim_debug_misc("gaym_cmd_privmsg",buf);
         gaym_send(gaym, buf);
@@ -420,6 +422,7 @@
         cur = end + 1;
     }
     g_free(nick);
+    g_free(unescaped);
     return 0;
 }
 

Modified: qrc/branches/fork-for-gaim-2/gaym/src/gaym.c
===================================================================
--- qrc/branches/fork-for-gaim-2/gaym/src/gaym.c	2006-11-04 07:56:27 UTC (rev 290)
+++ qrc/branches/fork-for-gaim-2/gaym/src/gaym.c	2006-11-11 19:27:43 UTC (rev 291)
@@ -1622,7 +1622,7 @@
     NULL,                                                 /**< destroy        */
     NULL,                                                  /**< ui_info        */
     &prpl_info,                                           /**< extra_info     */
-    NULL,//&prefs_info,
+    &prefs_info,
     gaym_actions
 };
 
@@ -1687,7 +1687,6 @@
 static void _init_plugin(GaimPlugin * plugin)
 {
 
-    printf("INIT PLUGIN DAMMIT!\n");
     GaimAccountOption *option;
 
     option = gaim_account_option_string_new(_("Bio Line"), "bioline", "");

Modified: qrc/branches/fork-for-gaim-2/gaym/src/msgs.c
===================================================================
--- qrc/branches/fork-for-gaim-2/gaym/src/msgs.c	2006-11-04 07:56:27 UTC (rev 290)
+++ qrc/branches/fork-for-gaim-2/gaym/src/msgs.c	2006-11-11 19:27:43 UTC (rev 291)
@@ -1172,7 +1172,7 @@
                                             gaym->account);
 
     notice = !strcmp(args[0], " notice ");
-    msg = gaym_parse_ctcp(gaym, nick, args[0], args[1], notice);
+    tmp = gaym_parse_ctcp(gaym, nick, args[0], args[1], notice);
 
     if (!tmp) {
         g_free(nick);
@@ -1180,13 +1180,14 @@
     }
 
     if (!gaym_privacy_check(gc, nick)) {
+	g_free(tmp);
         g_free(nick);
         return;
     }
 
     //msg = g_markup_escape_text(tmp, -1);
-
     //g_free(tmp);
+    msg=tmp;
 
     if (notice) {
         tmp = g_strdup_printf("(notice) %s", msg);

Modified: qrc/branches/fork-for-gaim-2/gaym/src/weblogin.c
===================================================================
--- qrc/branches/fork-for-gaim-2/gaym/src/weblogin.c	2006-11-04 07:56:27 UTC (rev 290)
+++ qrc/branches/fork-for-gaim-2/gaym/src/weblogin.c	2006-11-11 19:27:43 UTC (rev 291)
@@ -104,8 +104,13 @@
 	    if(!url || !session)
 		return 0;
 
-	    gchar* buf = g_strdup_printf("GET %s HTTP/1.1\r\n" "Accept-Encoding: identity\r\n"
-                       "Host: www.gay.com\r\n" "Cookie: %s\r\n",
+	    gchar* buf = g_strdup_printf(   "GET %s HTTP/1.0\r\n" 
+					    "Accept-Charset: utf-8\r\n"
+					    "User-Agent: Mozilla/4.0\r\n"
+					    "Accept-Encoding: identity\r\n"
+					    "Host: www.gay.com\r\n" 
+					    "Cookie: %s\r\n"
+					    "Connction: Close\r\n",
                        url, session->cookies);
 	gchar* res; 
 	if (session->hasFormData)
@@ -233,9 +238,10 @@
 	gaim_debug_misc("weblogin","About to build url\n");
 	gchar* request=gaym_build_session_request(url, session);
 	gaim_debug_misc("weblogin","Requesting: %s\n",request);
-        gaim_util_fetch_url_request(url, FALSE, NULL, FALSE, 
+        gaim_util_fetch_url_request(url, FALSE, NULL, TRUE, 
 				    request, TRUE, gaym_weblogin_step5,
 				    session);
+	gaim_debug_misc("weblogin","applet fetched");
     } else {
         gaim_debug_misc("gaym", "Connection was cancelled before step4\n");
         gaim_debug_misc("gaym", "session: %x\n", session);



From jblebrun at mail.berlios.de  Thu Nov 23 08:18:45 2006
From: jblebrun at mail.berlios.de (jblebrun at BerliOS)
Date: Thu, 23 Nov 2006 07:18:45 -0000
Subject: [Qrc-svn] r292 - qrc/branches/fork-for-gaim-2/gaym/src
Message-ID: <200611230717.kAN7HpVF002770@sheep.berlios.de>

Author: jblebrun
Date: 2006-11-23 08:17:51 +0100 (Thu, 23 Nov 2006)
New Revision: 292

Modified:
   qrc/branches/fork-for-gaim-2/gaym/src/gaym.c
Log:
Fixed for beta5 API


Modified: qrc/branches/fork-for-gaim-2/gaym/src/gaym.c
===================================================================
--- qrc/branches/fork-for-gaim-2/gaym/src/gaym.c	2006-11-11 19:27:43 UTC (rev 291)
+++ qrc/branches/fork-for-gaim-2/gaym/src/gaym.c	2006-11-23 07:17:51 UTC (rev 292)
@@ -466,7 +466,7 @@
     gaim_connection_update_progress(gc, buf, 5, 6);
     g_free(buf);
     gaim_debug_misc("gaym", "Trying login to %s\n", gaym->server);
-    GaimProxyConnectData* pdata = gaim_proxy_connect(account, 
+    GaimProxyConnectData* pdata = gaim_proxy_connect(NULL, account, 
 			     gaym->server,
                              gaim_account_get_int(account, "port", IRC_DEFAULT_PORT),
                              *gaym_login_cb, 



From jblebrun at mail.berlios.de  Sun Nov 26 06:00:50 2006
From: jblebrun at mail.berlios.de (jblebrun at BerliOS)
Date: Sun, 26 Nov 2006 05:00:50 -0000
Subject: [Qrc-svn] r293 - qrc/branches/fork-for-gaim-2/gaym/src
Message-ID: <200611260459.kAQ4xtVE016115@sheep.berlios.de>

Author: jblebrun
Date: 2006-11-26 05:59:54 +0100 (Sun, 26 Nov 2006)
New Revision: 293

Modified:
   qrc/branches/fork-for-gaim-2/gaym/src/gayminfo.c
   qrc/branches/fork-for-gaim-2/gaym/src/msgs.c
Log:
Fix the "hanging photo" problem.


Modified: qrc/branches/fork-for-gaim-2/gaym/src/gayminfo.c
===================================================================
--- qrc/branches/fork-for-gaim-2/gaym/src/gayminfo.c	2006-11-23 07:17:51 UTC (rev 292)
+++ qrc/branches/fork-for-gaim-2/gaym/src/gayminfo.c	2006-11-26 04:59:54 UTC (rev 293)
@@ -69,7 +69,7 @@
     if ((end) && (start < end)) {
         return g_strdup_printf("%.*s", end - start, start);
     } else {
-        return 0;
+        return g_strdup_printf("Not entered");
     }
 }
 
@@ -90,7 +90,7 @@
     if (start != end && end) {
         return g_strdup_printf("%.*s", end - start, start);
     } else {
-        return 0;
+        return g_strdup_printf("Not entered|-|-");
     }
 }
 

Modified: qrc/branches/fork-for-gaim-2/gaym/src/msgs.c
===================================================================
--- qrc/branches/fork-for-gaim-2/gaym/src/msgs.c	2006-11-23 07:17:51 UTC (rev 292)
+++ qrc/branches/fork-for-gaim-2/gaym/src/msgs.c	2006-11-26 04:59:54 UTC (rev 293)
@@ -109,26 +109,11 @@
         return;
 
     int id = gaim_imgstore_add(info_data, len, NULL);
-    if (d->stats && d->bio)
-        info =
-            g_strdup_printf
-            ("<b>Stats:</b> %s<br><b>Bio:</b> %s<br><img id=%d><br><a href='%s%s'>Full Profile</a>",
-             d->stats, d->bio, id, hashurl, d->who);
-    else if (d->stats)
-        info =
-            g_strdup_printf
-            ("<b>Stats:</b> %s<br><img id=%d><br><a href='%s%s'>Full Profile</a>",
-             d->stats, id, hashurl, d->who);
-    else if (d->bio)
-        info =
-            g_strdup_printf
-            ("<b>Bio:</b> %s<br><img id=%d><br><a href='%s%s'>Full Profile</a>",
-             d->bio, id, hashurl, d->who);
-    else
-        info =
-            g_strdup_printf
-            ("No Info Found<br><img id=%d><br><a href='%s%s'>Full Profile</a>",
-             id, hashurl, d->who);
+    info = g_strdup_printf ("<a href='%s%s'> Full Profile</a><br>"
+                            "<b>Stats:</b> %s<br>"
+                            "<b>Bio:</b> %s<br>"
+                            "<img id=%d>",
+                            hashurl, d->who, d->stats, d->bio, id);
 
     gaim_request_close(GAIM_REQUEST_ACTION, dialog);
     g_hash_table_remove(gaym->info_window_needed,



