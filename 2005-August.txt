From jblebrun at berlios.de  Mon Aug  1 07:36:03 2005
From: jblebrun at berlios.de (Jason LeBrun at BerliOS)
Date: Mon, 1 Aug 2005 07:36:03 +0200
Subject: [Qrc-svn] r265 - in qrc/trunk: gaym/src gaym-extras/src
Message-ID: <200508010536.j715a3DN010005@sheep.berlios.de>

Author: jblebrun
Date: 2005-08-01 07:35:48 +0200 (Mon, 01 Aug 2005)
New Revision: 265

Modified:
   qrc/trunk/gaym-extras/src/Makefile.am
   qrc/trunk/gaym-extras/src/gaym-extras.c
   qrc/trunk/gaym-extras/src/gaym-extras.h
   qrc/trunk/gaym-extras/src/roombrowse.c
   qrc/trunk/gaym/src/cmds.c
   qrc/trunk/gaym/src/gaym.c
   qrc/trunk/gaym/src/gaym.h
   qrc/trunk/gaym/src/helpers.c
   qrc/trunk/gaym/src/msgs.c
   qrc/trunk/gaym/src/weblogin.c
Log:
NEW FEATURE: ROOM BROWSER!
It's new and experimental. 
Don't be suprised if it does weird stuff. I'm still trying to make it perfect.
Play around with it! Right click on a room in your buddy list and choose "Browse <roomname>"

The "Pref" column is the shortened version of user name that /WHO gives.
The "?" column shows an N if the WHO list and the NAMES list get out of sync.

There are probably some memory leaks, but hopefully nothing that opens hundreds of file pointers and leaves them dangling ;-)

One known bug that I realize as I write this: if you try to do a list on, say, #557=1 and #557=2 at the same time, bad things will happen. Probably not too bad, but not good, either. I need to update the hash and equals functions to fix this. 

File changes in gaym-extras are trivial, except for roombrowse.c, which was just a complete re-write.

cmds.c:
    Added the "WHO" command


msgs.c:
    Added a handler for the WHO command. It also manages a structure which is eventually sent back to the requester.


gaym.c:
    Add the gaym_get_room_namelist function for the plugin to call.
    Add a hash table for room lists.
    Add a function for hashing that allows #557=* to be the same as #557=1 or #557=8. Needs to be updated.  

weblogin.c:
    Got rid of some noisy debug messages.

gaym.h: 
    Add the GaymNamelist structure.
    Add the namelists hash to struct gaym_conn
    Add a prefix field to gaym buddies
    Add declaration for gaym_cmd_who
    Add declaration for get_room_namelist

helpers.c:
    Just commented out a debug msg I am not using anymore.





Modified: qrc/trunk/gaym/src/cmds.c
===================================================================
--- qrc/trunk/gaym/src/cmds.c	2005-07-31 19:13:29 UTC (rev 264)
+++ qrc/trunk/gaym/src/cmds.c	2005-08-01 05:35:48 UTC (rev 265)
@@ -574,7 +574,20 @@
     g_free(converted_nick);
     return 0;
 }
+int gaym_cmd_who(struct gaym_conn *gaym, const char *cmd,
+                   const char *target, const char **args)
+{
+    char *buf;
+    if (!args || !args[0])
+        return 0;
 
+    buf = gaym_format(gaym, "vn", "WHO", args[0]);
+    gaim_debug_misc("cmds","Exceuting %s\n",buf);
+    gaym_send(gaym, buf);
+    g_free(buf);
+    return 0;
+}
+
 static void gaym_do_mode(struct gaym_conn *gaym, const char *target,
                          const char *sign, char **ops)
 {

Modified: qrc/trunk/gaym/src/gaym.c
===================================================================
--- qrc/trunk/gaym/src/gaym.c	2005-07-31 19:13:29 UTC (rev 264)
+++ qrc/trunk/gaym/src/gaym.c	2005-08-01 05:35:48 UTC (rev 265)
@@ -448,6 +448,16 @@
 
 }
 
+guint gaym_room_hash(gconstpointer key) {
+
+    if(*((char*)key)==0)
+	return 0;
+
+    return atoi((char*)(key+1));
+
+
+}
+
 static void gaym_login(GaimAccount * account)
 {
     GaimConnection *gc;
@@ -478,6 +488,12 @@
     /**
      * gaym->server = "www.gay.com";
      */
+
+
+    gaym->namelists = g_hash_table_new_full((GHashFunc)gaym_room_hash,
+					    g_int_equal,
+					    g_free,
+					    NULL);
     gaym->buddies =
         g_hash_table_new_full((GHashFunc) gaym_nick_hash,
                               (GEqualFunc) gaym_nick_equal, NULL,
@@ -529,13 +545,15 @@
                                   const gchar * config_text, size_t len)
 {
     struct gaym_conn *gaym = (struct gaym_conn *) proto_data;
-    GaimConnection *gc = gaim_account_get_connection(gaym->account);
+    //GaimConnection *gc = gaim_account_get_connection(gaym->account);
 
     g_return_if_fail(config_text != NULL);
 
     gaym->confighash = gaym_properties_new(config_text);
     g_return_if_fail(gaym->confighash != NULL);
 
+    //if(roomlist=g_hash_table_lookup(gaym->confighash, "roomlist"))
+    //    gaym->roomlist = gaym_parse_roomlist();
     // synchronize_deny_list(gc, gaym->confighash);
 
     return;
@@ -1201,7 +1219,6 @@
                 if (chat->account == account && chat_name != NULL &&
                     name != NULL
                     && g_pattern_match_simple(chat_name, name)) {
-
                     return chat;
                 }
             }
@@ -1552,13 +1569,26 @@
     NULL,                                                 /**< load           */
     NULL,                                                 /**< unload         */
     NULL,                                                 /**< destroy        */
-
     NULL,                                                  /**< ui_info        */
     &prpl_info,                                           /**< extra_info     */
     &prefs_info,
     gaym_actions
 };
 
+
+void gaym_get_room_namelist(const char* room, struct gaym_conn* gaym) {
+
+    const char* args[1]={room};
+    GaymNamelist *namelist = g_new0(GaymNamelist, 1);
+    namelist->roomname=g_strdup(room);
+    namelist->members=NULL;
+    namelist->num_rooms=100;
+    namelist->current=0;
+    g_hash_table_insert(gaym->namelists, g_strdup(room), namelist); 
+    
+    //g_hash_table_insert(gaym->namelist_pending, list);
+    gaym_cmd_who(gaym, NULL, NULL, args);
+}
 static void _init_plugin(GaimPlugin * plugin)
 {
 
@@ -1600,8 +1630,15 @@
                          gaim_value_new(GAIM_TYPE_POINTER,
                                         GAIM_TYPE_CHAR));
 
+     gaim_signal_register(gaim_accounts_get_handle(),
+                         "namelist-complete",
+                         gaim_marshal_VOID__POINTER_POINTER, NULL, 2,
+                         gaim_value_new(GAIM_TYPE_SUBTYPE,
+                                        GAIM_SUBTYPE_ACCOUNT),
+                         gaim_value_new(GAIM_TYPE_POINTER));
 
 
+
     gaim_prefs_add_none("/plugins/prpl/gaym");
     gaim_prefs_add_int("/plugins/prpl/gaym/chat_room_instances", 4);
     gaim_prefs_add_bool("/plugins/prpl/gaym/show_join", TRUE);

Modified: qrc/trunk/gaym/src/gaym.h
===================================================================
--- qrc/trunk/gaym/src/gaym.h	2005-07-31 19:13:29 UTC (rev 264)
+++ qrc/trunk/gaym/src/gaym.h	2005-08-01 05:35:48 UTC (rev 265)
@@ -96,6 +96,9 @@
 
     GHashTable *hammers;
 
+
+    GHashTable *namelists;
+
 };
 
 typedef struct {
@@ -120,6 +123,7 @@
     char *thumbnail;            /* thumbnail string */
     char *sex;                  /* sex string */
     char *age;                  /* age string */
+    char *prefix;		/* prefix string */
     char *location;             /* location string */
     gboolean gaymuser;		/* gaym detected */
 };
@@ -233,8 +237,14 @@
 cmd_handler gaym_cmd_trace;
 cmd_handler gaym_cmd_wallops;
 cmd_handler gaym_cmd_whois;
+cmd_handler gaym_cmd_who;
 
-
+typedef struct GaymNamelist {
+    char* roomname;
+    GSList *members; //List of GaymBuddies;
+    int num_rooms;
+    GSList* current; //Pointer to gaymbuddy to be updated next (during names pass)
+} GaymNamelist;
 void gaym_dccsend_send_file(GaimConnection * gc, const char *who,
                             const char *file);
 void gaym_dccsend_recv(struct gaym_conn *gaym, const char *from,
@@ -242,6 +252,7 @@
 void gaym_get_chat_key_from_weblogin(GaimAccount * account,
                                      void (*callback) (GaimAccount *));
 
+void gaym_get_room_namelist(const char* room, struct gaym_conn* gaym);
 void gaim_session_fetch(const char *url, gboolean full,
                         const char *user_agent, gboolean http11,
                         void (*cb) (gpointer, const char *, size_t),

Modified: qrc/trunk/gaym/src/helpers.c
===================================================================
--- qrc/trunk/gaym/src/helpers.c	2005-07-31 19:13:29 UTC (rev 264)
+++ qrc/trunk/gaym/src/helpers.c	2005-08-01 05:35:48 UTC (rev 265)
@@ -221,6 +221,7 @@
     }
 }
 
+
 GHashTable *gaym_properties_new(const gchar * str)
 {
 
@@ -288,7 +289,7 @@
         proparr = g_strsplit(tmparr[i], "=", 2);
         if (proparr[0] && strlen(g_strstrip(proparr[0])) > 0
             && proparr[1] && strlen(g_strstrip(proparr[1])) > 0) {
-	    gaim_debug_misc("properties","Inserted %s=%s\n",proparr[0],proparr[1]);
+	    //gaim_debug_misc("properties","Inserted %s=%s\n",proparr[0],proparr[1]);
             g_hash_table_insert(props, g_strdup(proparr[0]),
                                 g_strdup(proparr[1]));
 

Modified: qrc/trunk/gaym/src/msgs.c
===================================================================
--- qrc/trunk/gaym/src/msgs.c	2005-07-31 19:13:29 UTC (rev 264)
+++ qrc/trunk/gaym/src/msgs.c	2005-08-01 05:35:48 UTC (rev 265)
@@ -427,16 +427,26 @@
 {
     char *names, *cur, *end, *tmp, *msg;
     GaimConversation *convo;
-
+    
     if (!strcmp(name, "366")) {
-        convo =
+	GaymNamelist* namelist=g_hash_table_lookup(gaym->namelists, args[1]);
+        if(!strncmp(namelist->roomname, args[1], strlen(namelist->roomname)))
+	{
+	    gaim_debug_misc("names","*****Got all names responses for %s\n",args[1]);
+	    //g_hash_table_remove(gaym->namelists, args[2]);
+	    GaymNamelist* namelist=g_hash_table_lookup(gaym->namelists, args[1]);
+	    gaim_debug_misc("msgs","should be emitting namelist-complete signal passing namelist %x\n",namelist);
+	    gaim_signal_emit(gaim_accounts_get_handle(), "namelist-complete", gaym->account, namelist);
+	    return;
+	}
+	convo =
             gaim_find_conversation_with_account(gaym->nameconv ? gaym->
                                                 nameconv : args[1],
                                                 gaym->account);
         if (!convo) {
             gaim_debug(GAIM_DEBUG_ERROR, "gaym",
                        "Got a NAMES list for %s, which doesn't exist\n",
-                       args[2]);
+                       args[1]);
             g_string_free(gaym->names, TRUE);
             gaym->names = NULL;
             g_free(gaym->nameconv);
@@ -490,10 +500,29 @@
         }
         g_free(names);
     } else {
-        if (!gaym->names)
+        if (gaym->nameconv && !gaym->names) {
             gaym->names = g_string_new("");
+	    gaym->names = g_string_append(gaym->names, args[3]);
+	}
+	gaim_debug_misc("names","Response: %s\n",args[3]);
+	GaymNamelist* nameslist=g_hash_table_lookup(gaym->namelists, args[2]);
+	if(nameslist)
+	{
+	    gchar** names=g_strsplit(args[3]," ",-1);
+	    	    
 
-        gaym->names = g_string_append(gaym->names, args[3]);
+		int i=0;
+		gaim_debug_misc("names","names[i]: %s, nameslist->current: %x\n", names[i], nameslist->current);
+	    	while(names[i] && strlen(names[i]) && nameslist->current)
+		{
+			gaim_debug_misc("names","append %s (length %i)\n",names[i],strlen(names[i]));
+			((GaymBuddy*)(nameslist->current->data))->name=g_strdup(names[i]);
+			nameslist->current=g_slist_next(nameslist->current);
+			i++;
+		}
+		g_strfreev(names);
+	    
+	}
     }
 }
 
@@ -712,23 +741,16 @@
 
 	gpointer data, unused;
 	gboolean hammering=g_hash_table_lookup_extended
-	    (gaym->hammers,args[1],&unused, &data);
+	    (gaym->hammers,args[0],&unused, &data);
 	//There was a hammer, but it is cancelled. Leave!
+	gaim_debug_misc("join","Joined %s\n",args[0]);
 	if(hammering && !data) { //hammer was cancelled.
 	    gaim_debug_misc("gaym","JOINED, BUT HAMMER CANCELLED: ABORT!!!!\n");
 	    g_hash_table_remove(gaym->hammers, args[0]);
 	    gaym_cmd_part(gaym, NULL, NULL, (const char**)args);
 	    return;
 	}
-#if 0
-        if (gaym->persist_room && !strcmp(gaym->persist_room, args[0])) {
-            g_free(gaym->persist_room);
-            gaym->persist_room = NULL;
-            gaim_request_close(GAIM_REQUEST_ACTION,
-                               gaym->hammer_cancel_dialog);
-
-        }
-#endif
+	
 	g_hash_table_remove(gaym->hammers, args[0]);
         serv_got_joined_chat(gc, id++, args[0]);
 
@@ -1159,6 +1181,72 @@
 void gaym_msg_who(struct gaym_conn *gaym, const char *name,
                   const char *from, char **args)
 {
+    char* pos;
+    GaymNamelist* nameslist;
+
+    if (!strncmp(name,"315",3))
+    {
+	
+	nameslist=g_hash_table_lookup(gaym->namelists, args[1]);
+        nameslist->members=g_slist_reverse(nameslist->members);
+	nameslist->current=nameslist->members;
+
+	//If we are doing an "umbrella room" then we send out this names thing.
+	//Because the names parsing section terminates on a "names" from 
+	//The exact channel name match.
+	if(g_str_has_suffix(args[1],"=*"))
+	{
+	    gaim_debug_misc("who","Has a =* suffix, sending out one more namescmd \n");
+	    const char* cmdargs[1]={args[1]};
+	    gaym_cmd_names(gaym, NULL, NULL, cmdargs);
+	}
+	return;
+    }
+
+    if(args[2])
+    {
+
+	nameslist=g_hash_table_lookup(gaym->namelists, args[1]);
+	if(!nameslist)
+	    return;
+	GaymBuddy *member=g_new0(GaymBuddy, 1);
+	gchar** parts=g_strsplit(args[2],"|",2);
+	if(args[1])
+	{
+	    member->bio=gaym_bio_strdup(parts[1]);
+	    member->thumbnail=gaym_thumbnail_strdup(parts[1]);
+	    member->prefix=g_strndup(parts[1],6);
+	    
+	    gchar* stats=gaym_stats_strdup(parts[1]);
+	    if(stats) 
+	    {
+		gchar** stat_parts=g_strsplit(stats,"|",3);
+		member->sex=stat_parts[0];
+		member->age=stat_parts[1];
+		member->location=stat_parts[2];
+		g_free(stats);
+	    }
+	    
+	    nameslist->members=g_slist_prepend(nameslist->members, member);
+	}
+	g_strfreev(parts);	
+	
+	pos=strrchr(args[1], '=');
+	int val=0;
+	if (!pos)
+	    return;
+	val=g_ascii_digit_value(*(++pos));
+	if (val<nameslist->num_rooms)
+	{
+	    gaim_debug_misc("msgs","*******NEXT ROOM******\n");
+	    const char* cmdargs[1]={args[1]};
+	    gaym_cmd_names(gaym, NULL, NULL, cmdargs);
+	    nameslist->num_rooms=val;
+	}
+    }
+
+     
+    
     //Use the who msgs cross-referenced with the NAMES list to figure out who is who. Resolve conflicts.
     
 }

Modified: qrc/trunk/gaym/src/weblogin.c
===================================================================
--- qrc/trunk/gaym/src/weblogin.c	2005-07-31 19:13:29 UTC (rev 264)
+++ qrc/trunk/gaym/src/weblogin.c	2005-08-01 05:35:48 UTC (rev 265)
@@ -71,7 +71,6 @@
         g_free(session->username);
     if (session->password)
         g_free(session->password);
-    gaim_debug_misc("gaym", "freeing session: %x\n", session);
     g_free(session);
 }
 
@@ -86,13 +85,11 @@
             *retval = ' ';
         retval++;
     }
-    gaim_debug_info("gaym", "Changed %s with gaym_url_decode\n", string);
     return string;
 }
 
 static void destroy_fetch_url_data(GaimFetchUrlData * gfud)
 {
-    gaim_debug_misc("gaym", "destroy_fetch_url_data called\n");
     if (gfud->webdata != NULL)
         g_free(gfud->webdata);
     if (gfud->url != NULL)
@@ -190,7 +187,6 @@
        if we make sure that there is indeed a \n in our header. */
     if (p && g_strstr_len(p, data_len - (p - data), "\n")) {
         sscanf(p, "Content-Length: %zu", &content_len);
-        gaim_debug_misc("parse_content_len", "parsed %u\n", content_len);
     }
 
     return content_len;
@@ -327,10 +323,6 @@
                     size_t content_len;
                     gfud->startsaving = TRUE;
 
-                    gaim_debug_misc("gaim_url_fetch",
-                                    "Response headers: '%*.*s'\n",
-                                    gfud->len, gfud->len, gfud->webdata);
-
                     // JBL 10-16-2004: Put cookies into session
 
                     parse_cookies(gfud->webdata, gfud->session, gfud->len);

Modified: qrc/trunk/gaym-extras/src/Makefile.am
===================================================================
--- qrc/trunk/gaym-extras/src/Makefile.am	2005-07-31 19:13:29 UTC (rev 264)
+++ qrc/trunk/gaym-extras/src/Makefile.am	2005-08-01 05:35:48 UTC (rev 265)
@@ -2,7 +2,7 @@
 	$(GAIM_LIBDIR)/gaim
 
 GAYMSOURCES = \
-	gaym-extras.c chatsort.c bio-popups.c chaticon.c gaym-extras.h
+	gaym-extras.c chatsort.c bio-popups.c chaticon.c gaym-extras.h roombrowse.c
 
 AM_CFLAGS = \
 	$(st)

Modified: qrc/trunk/gaym-extras/src/gaym-extras.c
===================================================================
--- qrc/trunk/gaym-extras/src/gaym-extras.c	2005-07-31 19:13:29 UTC (rev 264)
+++ qrc/trunk/gaym-extras/src/gaym-extras.c	2005-08-01 05:35:48 UTC (rev 265)
@@ -95,7 +95,7 @@
 {
     init_chat_icons();
     init_popups();
-
+    init_roombrowse(plugin);
     gaim_signal_connect(gaim_conversations_get_handle(), "chat-joined",
                         plugin, GAIM_CALLBACK(redochatwindow), NULL);
 
@@ -109,7 +109,6 @@
     gaim_signal_connect(gaim_conversations_get_handle(),
                         "deleting-conversation", plugin,
                         GAIM_CALLBACK(clean_popup_stuff), NULL);
-
     gaim_prefs_add_none("/plugins/gaym-extras");
     gaim_prefs_add_none("/plugins/gaym-extras/silly");
 

Modified: qrc/trunk/gaym-extras/src/gaym-extras.h
===================================================================
--- qrc/trunk/gaym-extras/src/gaym-extras.h	2005-07-31 19:13:29 UTC (rev 264)
+++ qrc/trunk/gaym-extras/src/gaym-extras.h	2005-08-01 05:35:48 UTC (rev 265)
@@ -73,6 +73,7 @@
 void add_im_popup_stuff(GaimConversation * c);
 void init_chat_icons();
 void init_popups();
+void init_roombrowse(GaimPlugin* plugin);
 
 
 static struct StockIcon {

Modified: qrc/trunk/gaym-extras/src/roombrowse.c
===================================================================
--- qrc/trunk/gaym-extras/src/roombrowse.c	2005-07-31 19:13:29 UTC (rev 264)
+++ qrc/trunk/gaym-extras/src/roombrowse.c	2005-08-01 05:35:48 UTC (rev 265)
@@ -21,415 +21,223 @@
 #include "gtkblist.h"
 #include "gtkimhtmltoolbar.h"
 #include <gdk/gdkkeysyms.h>
+#include "gaym-extras.h"
 
-#define CHATSORT_PLUGIN_ID "gtk-chatsort"
-#define CHATSORT_USERS_COLUMNS 4
-#define CHATSORT_USERS_ENTRY_COLUMN 3
+#include "../../gaym/src/gaym.h"
 
-/**
- * Unused variables:
- *
- * static GList *browsers = NULL;
- */
 
+static GHashTable *browsers = NULL;
+
+
+enum {
+    COLUMN_PHOTO,
+    COLUMN_SYNC,
+    COLUMN_NAME,
+    COLUMN_PREFIX,
+    COLUMN_INFO,
+    N_COLUMNS
+};
+
 struct RoomBrowseInfo {
 
     GaimAccount *account;
     GaimConnection *gc;
 };
 
-static GtkWidget *setup_roombrowse_pane(GaimConversation * conv)
-{
-    GaimGtkConversation *gtkconv;
-    GaimGtkChatPane *gtkchat;
-    GaimConnection *gc;
-    GtkWidget *vpaned, *hpaned;
-    GtkWidget *vbox;
+struct update_cb_data {
+    GaimConnection* gc;
+    const char* room;
+};
 
-        /**
-	 * Unused variables:
-	 *
-	 * GaimPluginProtocolInfo *prpl_info = NULL;
-	 * GtkWidget *hbox;
-	 * GtkWidget *lbox, *bbox;
-	 * GtkWidget *label;
-	 * GtkWidget *list;
-	 * GtkWidget *button;
-	 * GtkWidget *sw;
-	 * GtkListStore *ls;
-	 * GtkCellRenderer *rend;
-	 * GtkTreeViewColumn *col;
-	 * GList *focus_chain = NULL;
-	 */
+typedef struct RoomBrowseGui {
+    GtkWidget* window;
+    GtkWidget* button;
+    GtkWidget* list;
+    GtkTreeModel* model;
+    GtkWidget* label;
+    GtkTreeIter iter;
+    GaimConnection* gc;
+} RoomBrowseGui;
 
-    gtkconv = GAIM_GTK_CONVERSATION(conv);
-    gtkchat = gtkconv->u.chat;
-    gc = gaim_conversation_get_gc(conv);
+void roombrowse_add_info(gpointer data, RoomBrowseGui* browser) {
+    /* Add a new row to the model */
+    GaymBuddy* member=(GaymBuddy*)data;
+    gaim_debug_misc("roombrowse","append row%s\n",member->name);
+    char* sync="Y";
+    if(!member->name || !member->prefix)
+	return;
+    if(strncmp(member->name, member->prefix, (MIN(strlen(member->name),strlen(member->prefix))-1))) 
+    {
+	    sync="N";
+    }
+    GString* info=g_string_new("");
+    if(member->age)
+	g_string_append_printf(info, "\nAge: %s", member->age); 
+    if(member->location)
+	g_string_append_printf(info, "\nLocation: %s", member->location); 
+    if(member->bio)
+	g_string_append_printf(info, "\nInfo: %s", member->bio); 
+    g_string_erase(info, 0, 1);
+    char* infoc=g_string_free(info, FALSE);
+    gtk_list_store_append (GTK_LIST_STORE(browser->model), &browser->iter);
+    if(member->thumbnail) {
 
-    /* Setup the outer pane. */
-    vpaned = gtk_vpaned_new();
-    gtk_widget_show(vpaned);
-    /* Setup the top part of the pane. */
-    vbox = gtk_vbox_new(FALSE, 6);
-    gtk_paned_pack1(GTK_PANED(vpaned), vbox, TRUE, TRUE);
-    gtk_widget_show(vbox);
+	GdkPixbuf *pixbuf=lookup_cached_thumbnail(	browser->gc->account, 
+						gaim_normalize(browser->gc->account,member->name));
+        gtk_list_store_set(GTK_LIST_STORE(browser->model), &browser->iter, COLUMN_PHOTO, pixbuf, -1);
 
-    /* Setup the horizontal pane. */
-    hpaned = gtk_hpaned_new();
-    gtk_box_pack_start(GTK_BOX(vbox), hpaned, TRUE, TRUE, 0);
-    gtk_widget_show(hpaned);
-
-    /* Setup the scrolled window to put gtkimhtml in. */
-    gtkconv->sw = gtk_scrolled_window_new(NULL, NULL);
-    gtk_scrolled_window_set_policy(GTK_SCROLLED_WINDOW(gtkconv->sw),
-                                   GTK_POLICY_AUTOMATIC,
-                                   GTK_POLICY_ALWAYS);
-    gtk_scrolled_window_set_shadow_type(GTK_SCROLLED_WINDOW(gtkconv->sw),
-                                        GTK_SHADOW_IN);
-    gtk_paned_pack1(GTK_PANED(hpaned), gtkconv->sw, TRUE, TRUE);
-
-    gtk_widget_set_size_request(gtkconv->sw,
-                                gaim_prefs_get_int
-                                ("/gaim/gtk/conversations/chat/default_width"),
-                                gaim_prefs_get_int
-                                ("/gaim/gtk/conversations/chat/default_height"));
-
-    // g_signal_connect(G_OBJECT(gtkconv->sw), "size-allocate",
-    // G_CALLBACK(size_allocate_cb), conv);
-
-    gtk_widget_show(gtkconv->sw);
-
-    return vpaned;
-}
-
-static gint close_conv_cb(GtkWidget * w, gpointer d)
-{
-    GaimConversation *conv = (GaimConversation *) d;
-
-    gaim_conversation_destroy(conv);
-
-    return TRUE;
-}
-
-GdkPixbuf *get_tab_icon(GaimConversation * conv, gboolean small_icon)
-{
-    GaimAccount *account = NULL;
-    const char *name = NULL;
-    GdkPixbuf *status = NULL;
-
-    g_return_val_if_fail(conv != NULL, NULL);
-
-    account = gaim_conversation_get_account(conv);
-    name = gaim_conversation_get_name(conv);
-
-    g_return_val_if_fail(account != NULL, NULL);
-    g_return_val_if_fail(name != NULL, NULL);
-
-
-    if (gaim_conversation_get_type(conv) == GAIM_CONV_IM) {
-        GaimBuddy *b = gaim_find_buddy(account, name);
-        if (b != NULL) {
-            status = gaim_gtk_blist_get_status_icon((GaimBlistNode *) b,
-                                                    (small_icon ?
-                                                     GAIM_STATUS_ICON_SMALL
-                                                     :
-                                                     GAIM_STATUS_ICON_LARGE));
-        }
     }
+    gtk_list_store_set (GTK_LIST_STORE(browser->model), &browser->iter,
+			    COLUMN_SYNC, sync,
+                          COLUMN_NAME, member->name, 
+			  COLUMN_PREFIX, member->prefix,
+			  COLUMN_INFO, infoc,
+			  -1);
 
-    if (!status) {
-        GdkPixbuf *pixbuf;
-        pixbuf = create_prpl_icon(account);
 
-        if (small_icon && pixbuf != NULL) {
-            status = gdk_pixbuf_scale_simple(pixbuf, 15, 15,
-                                             GDK_INTERP_BILINEAR);
-            g_object_unref(pixbuf);
-        } else
-            status = pixbuf;
-    }
-    return status;
 }
+void roombrowse_update_list(GaimAccount* account, GaymNamelist* namelist) {
 
-/**
- * Unused function
- */
-#if 0
-static void update_tab_icon(GaimConversation * conv)
-{
-    GaimGtkConversation *gtkconv;
-    GaimConvWindow *win = gaim_conversation_get_window(conv);
-    GaimAccount *account;
-    const char *name;
-    GdkPixbuf *status = NULL;
-
-    g_return_if_fail(conv != NULL);
-
-    gtkconv = GAIM_GTK_CONVERSATION(conv);
-    name = gaim_conversation_get_name(conv);
-    account = gaim_conversation_get_account(conv);
-
-    status = get_tab_icon(conv, TRUE);
-
-    g_return_if_fail(status != NULL);
-
-    gtk_image_set_from_pixbuf(GTK_IMAGE(gtkconv->icon), status);
-    gtk_image_set_from_pixbuf(GTK_IMAGE(gtkconv->menu_icon), status);
-
-    if (status != NULL)
-        g_object_unref(status);
-
-    if (gaim_conv_window_get_active_conversation(win) == conv &&
-        gtkconv->u.im->anim == NULL) {
-        status = get_tab_icon(conv, FALSE);
-
-        gtk_window_set_icon(GTK_WINDOW(GAIM_GTK_WINDOW(win)->window),
-                            status);
-
-        if (status != NULL)
-            g_object_unref(status);
+    gaim_debug_misc("roombrowse","update_list from namelist at %x\n",namelist);
+    g_return_if_fail(namelist);
+    
+    RoomBrowseGui* browser=g_hash_table_lookup(browsers, namelist->roomname);
+    if(!browser) {
+	gaim_debug_misc("roombrowse","No browser found for %s\n",namelist->roomname);
     }
+    gtk_list_store_clear(GTK_LIST_STORE(browser->model));
+    g_slist_foreach(namelist->members, (GFunc)roombrowse_add_info, browser);
+    
 }
-#endif
-
-/* Courtesy of Galeon! */
-static void
-tab_close_button_state_changed_cb(GtkWidget * widget,
-                                  GtkStateType prev_state)
-{
-    if (GTK_WIDGET_STATE(widget) == GTK_STATE_ACTIVE)
-        gtk_widget_set_state(widget, GTK_STATE_NORMAL);
+gboolean update_list(GtkWidget* button, gpointer data) {
+    
+    gaim_debug_misc("roombrowse","Doing list update!\n");
+    struct update_cb_data* udata=(struct update_cb_data*)data;
+    
+    gaym_get_room_namelist(udata->room, udata->gc->proto_data);
+    return TRUE;
 }
-
-static void
-roombrowse_gtk_add_conversation(GaimConvWindow * win,
-                                GaimConversation * conv)
+static void roombrowse_menu_cb(GaimBlistNode * node, gpointer data)
 {
-    GaimGtkWindow *gtkwin;
-    GaimGtkConversation *gtkconv, *focus_gtkconv;
-    GaimConversation *focus_conv;
-    GtkWidget *pane = NULL;
-    GtkWidget *tab_cont;
-    GtkWidget *tabby, *menu_tabby;
-    GtkWidget *close_image;
-    gboolean new_ui;
-    GaimConversationType conv_type;
-    const char *name;
+    RoomBrowseGui* browser=g_new0(RoomBrowseGui, 1);
+    GaimConnection* gc=(GaimConnection*)data;
+    browser->window=gtk_window_new(GTK_WINDOW_TOPLEVEL);
+   
+    browser->gc=gc;
+    //GaimAccount *account = ((GaimChat *) node)->account;
+    //if (!win)
+    //    win = gaim_conv_window_new();
+    GaimChat *chat = ((GaimChat *) node);
+    
+    const char* room = gaim_chat_get_name(chat);
+    const char* channel = g_hash_table_lookup(chat->components, "channel");
+    gaim_debug_misc("roombrowse","chat name: %s\n",room);
+    gaim_debug_misc("roombrowse","channel name: %s\n",channel);
+    gtk_window_set_title(GTK_WINDOW(browser->window), room);
+    
+    GtkWidget* vbox=gtk_vbox_new(FALSE, 6);
+    gtk_container_add(GTK_CONTAINER(browser->window), vbox);
+    gtk_widget_show(vbox);
+    
+    browser->label=gtk_label_new(room);
+    gtk_box_pack_start(GTK_BOX(vbox),browser->label, FALSE, FALSE, 0);
+    gtk_widget_show(browser->label);
+    GtkWidget* sw=gtk_scrolled_window_new(NULL, NULL);
+    gtk_box_pack_start(GTK_BOX(vbox), sw, TRUE, TRUE, 0);
+    gtk_widget_set_size_request(GTK_WIDGET(sw), 100, 200);
+    gtk_widget_show(sw);
 
-    name = gaim_conversation_get_name(conv);
-    conv_type = gaim_conversation_get_type(conv);
-    gtkwin = GAIM_GTK_WINDOW(win);
+    GtkListStore* ls=gtk_list_store_new(N_COLUMNS,
+					GDK_TYPE_PIXBUF,
+					G_TYPE_STRING,
+					G_TYPE_STRING, 
+					G_TYPE_STRING, 
+					G_TYPE_STRING);
+    browser->model=GTK_TREE_MODEL(ls);
+        
+    browser->list=gtk_tree_view_new_with_model(GTK_TREE_MODEL(ls));
+    //gtk_tree_view_set_headers_visible(GTK_TREE_VIEW(browser->list), FALSE); 
+    GtkCellRenderer* rend;
+    GtkTreeViewColumn* col;
+    
+    rend=gtk_cell_renderer_pixbuf_new();
+    col=gtk_tree_view_column_new_with_attributes("Photo", rend, "pixbuf", COLUMN_PHOTO, NULL);
+    gtk_tree_view_append_column(GTK_TREE_VIEW(browser->list), col);
 
-    if (conv->ui_data != NULL) {
-        gtkconv = (GaimGtkConversation *) conv->ui_data;
+    rend=gtk_cell_renderer_text_new();
+    col=gtk_tree_view_column_new_with_attributes("?", rend, "text", COLUMN_SYNC, NULL);
+    gtk_tree_view_append_column(GTK_TREE_VIEW(browser->list), col);
 
-        tab_cont = gtkconv->tab_cont;
 
-        new_ui = FALSE;
-    } else {
-        gtkconv = g_malloc0(sizeof(GaimGtkConversation));
-        conv->ui_data = gtkconv;
+    rend=gtk_cell_renderer_text_new();
+    col=gtk_tree_view_column_new_with_attributes("Name", rend, "text", COLUMN_NAME, NULL);
+    gtk_tree_view_append_column(GTK_TREE_VIEW(browser->list), col);
+  
+    rend=gtk_cell_renderer_text_new();
+    col=gtk_tree_view_column_new_with_attributes("Pref", rend, "text", COLUMN_PREFIX, NULL);
+    gtk_tree_view_append_column(GTK_TREE_VIEW(browser->list), col);
 
-        /* Setup some initial variables. */
-        gtkconv->sg = gtk_size_group_new(GTK_SIZE_GROUP_BOTH);
-        gtkconv->tooltips = gtk_tooltips_new();
 
-        gaim_debug_misc("roombrowse", "setting up pane\n");
-        pane = setup_roombrowse_pane(conv);
+    rend=gtk_cell_renderer_text_new();
+    col=gtk_tree_view_column_new_with_attributes("Info", rend, "text", COLUMN_INFO, NULL);
+    gtk_tree_view_append_column(GTK_TREE_VIEW(browser->list), col);
 
-        gaim_debug_misc("roombrowse", "set up pane\n");
 
-        if (pane == NULL) {
-            g_free(gtkconv);
-            conv->ui_data = NULL;
+    gtk_container_add(GTK_CONTAINER(sw), browser->list);
+    gtk_widget_show(browser->list); 
 
-            return;
-        }
+    
+    browser->button=gtk_button_new_with_label("Update");
+    struct update_cb_data* udata=g_new0(struct update_cb_data, 1);
+    udata->gc=gc;
+    udata->room=channel;
+    
+    g_signal_connect(browser->button, "clicked", G_CALLBACK(update_list), udata);
+    gtk_box_pack_start(GTK_BOX(vbox), browser->button, FALSE, FALSE, 0);
+    gtk_widget_show(browser->button);
 
+    gtk_widget_show(browser->window);
 
-
-        /* Setup the container for the tab. */
-        gtkconv->tab_cont = tab_cont = gtk_vbox_new(FALSE, 6);
-        gtk_container_set_border_width(GTK_CONTAINER(tab_cont), 6);
-        gtk_container_add(GTK_CONTAINER(tab_cont), pane);
-        gtk_widget_show(pane);
-
-        new_ui = TRUE;
-
-        gtkconv->make_sound = FALSE;
-        gtkconv->show_formatting_toolbar = FALSE;
-        gtkconv->show_timestamps = FALSE;
-
-        g_signal_connect_swapped(G_OBJECT(pane), "focus",
-                                 G_CALLBACK(gtk_widget_grab_focus),
-                                 gtkconv->entry);
-    }
-
-    gaim_debug_misc("roombrowse", "Setting up tabs\n");
-    gtkconv->tabby = tabby = gtk_hbox_new(FALSE, 6);
-    gtkconv->menu_tabby = menu_tabby = gtk_hbox_new(FALSE, 6);
-    gtkconv->entry = gtk_imhtml_new(NULL, NULL);
-    gtkconv->toolbar = gtk_imhtmltoolbar_new();
-
-    gaim_debug_misc("roombrowse", "Setting up close button\n");
-    /* Close button. */
-    gtkconv->close = gtk_button_new();
-    gtk_widget_set_size_request(GTK_WIDGET(gtkconv->close), 16, 16);
-    gtk_button_set_relief(GTK_BUTTON(gtkconv->close), GTK_RELIEF_NONE);
-    close_image =
-        gtk_image_new_from_stock(GTK_STOCK_CLOSE, GTK_ICON_SIZE_MENU);
-    gtk_widget_show(close_image);
-    gtk_container_add(GTK_CONTAINER(gtkconv->close), close_image);
-    gtk_tooltips_set_tip(gtkconv->tooltips, gtkconv->close,
-                         _("Close conversation"), NULL);
-
-    g_signal_connect(G_OBJECT(gtkconv->close), "clicked",
-                     G_CALLBACK(close_conv_cb), conv);
-
-    /* 
-     * I love Galeon. They have a fix for that stupid annoying visible
-     * border bug. I love you guys! -- ChipX86
-     */
-    g_signal_connect(G_OBJECT(gtkconv->close), "state_changed",
-                     G_CALLBACK(tab_close_button_state_changed_cb), NULL);
-
-    /* Status icon. */
-    gtkconv->icon = gtk_image_new();
-    gtkconv->menu_icon = gtk_image_new();
-    // update_tab_icon(conv);
-
-    /* Tab label. */
-    gtkconv->tab_label = gtk_label_new(gaim_conversation_get_title(conv));
-    gtkconv->menu_label = gtk_label_new(gaim_conversation_get_title(conv));
-#if 0
-    gtk_misc_set_alignment(GTK_MISC(gtkconv->tab_label), 0.00, 0.5);
-    gtk_misc_set_padding(GTK_MISC(gtkconv->tab_label), 4, 0);
-#endif
-
-    gaim_debug_misc("roombrowse", "Packing\n");
-    /* Pack it all together. */
-    gtk_box_pack_start(GTK_BOX(tabby), gtkconv->icon, FALSE, FALSE, 0);
-    gtk_box_pack_start(GTK_BOX(menu_tabby), gtkconv->menu_icon,
-                       FALSE, FALSE, 0);
-
-    gtk_widget_show_all(gtkconv->icon);
-    gtk_widget_show_all(gtkconv->menu_icon);
-
-    gtk_box_pack_start(GTK_BOX(tabby), gtkconv->tab_label, TRUE, TRUE, 0);
-    gtk_box_pack_start(GTK_BOX(menu_tabby), gtkconv->menu_label, TRUE,
-                       TRUE, 0);
-    gtk_widget_show(gtkconv->tab_label);
-    gtk_widget_show(gtkconv->menu_label);
-    gtk_misc_set_alignment(GTK_MISC(gtkconv->menu_label), 0, 0);
-
-    gtk_box_pack_start(GTK_BOX(tabby), gtkconv->close, FALSE, FALSE, 0);
-    if (gaim_prefs_get_bool("/gaim/gtk/conversations/close_on_tabs"))
-        gtk_widget_show(gtkconv->close);
-
-    gtk_widget_show(tabby);
-    gtk_widget_show(menu_tabby);
-
-    if (gaim_conversation_get_type(conv) == GAIM_CONV_IM)
-        gaim_gtkconv_update_buddy_icon(conv);
-
-    gaim_debug_misc("roombrowse", "Adding to notebook\n");
-    gaim_debug_misc("roombrowse", "gtkwin->notebook=%x\n",
-                    gtkwin->notebook);
-    gaim_debug_misc("roombrowse", "gtkwin=%x\n", gtkwin);
-    gaim_debug_misc("roombrowse", "tabby=%x\n", tabby);
-    gaim_debug_misc("roombrowse", "menu_tabby=%x\n", menu_tabby);
-    gaim_debug_misc("roombrowse", "tab_cont=%x\n", tab_cont);
-
-    /* Add this pane to the conversation's notebook. */
-    int n = gtk_notebook_get_n_pages(GTK_NOTEBOOK(gtkwin->notebook));
-    gaim_debug_misc("roombrowse:", "Notebook has %d pages\n", n);
-    gtk_notebook_append_page_menu(GTK_NOTEBOOK(gtkwin->notebook), tab_cont,
-                                  tabby, menu_tabby);
-    gaim_debug_misc("roombrowse", "Got through append_page_menu\n");
-    gtk_widget_show(tab_cont);
-
-    if (gaim_conv_window_get_conversation_count(win) == 1) {
-        /* Er, bug in notebooks? Switch to the page manually. */
-        gtk_notebook_set_current_page(GTK_NOTEBOOK(gtkwin->notebook), 0);
-
-        gtk_notebook_set_show_tabs(GTK_NOTEBOOK(gtkwin->notebook),
-                                   gaim_prefs_get_bool
-                                   ("/gaim/gtk/conversations/tabs"));
-    } else
-        gtk_notebook_set_show_tabs(GTK_NOTEBOOK(gtkwin->notebook), TRUE);
-    gaim_debug_misc("roombrowse", "FOcus stuff\n");
-    focus_conv = g_list_nth_data(gaim_conv_window_get_conversations(win),
-                                 gtk_notebook_get_current_page(GTK_NOTEBOOK
-                                                               (gtkwin->
-                                                                notebook)));
-    focus_gtkconv = GAIM_GTK_CONVERSATION(focus_conv);
-    gtk_widget_grab_focus(focus_gtkconv->entry);
-
-    if (!new_ui)
-        g_object_unref(gtkconv->tab_cont);
+    g_hash_table_insert(browsers, g_strdup(channel), browser);
+    update_list(browser->button, udata);
 }
-
-
-static void roombrowse_menu_cb(GaimBlistNode * node, gpointer data)
+static void roombrowse_menu_create(GaimBlistNode * node, GList** menu)
 {
-    GaimConvWindow *win = gaim_get_first_window_with_type(GAIM_CONV_MISC);
-    GaimConversation *conv = g_new0(GaimConversation, 1);
 
-    GaimAccount *account = ((GaimChat *) node)->account;
-    if (!win)
-        win = gaim_conv_window_new();
-    GaimChat *chat = ((GaimChat *) node);
-    char *room = g_strdup(g_hash_table_lookup(chat->components, "name"));
+    char *label;
 
-
-    gaim_debug_misc("roombrowser", "In cb with node=%x, account=%x\n",
-                    node, account);
-    conv = gaim_conversation_new(GAIM_CONV_MISC, account, room);
-
-    gaim_conversation_set_logging(conv, FALSE);
-
-    roombrowse_gtk_add_conversation(conv->window, conv);
-    gaim_conv_window_show(conv->window);
-
-    g_free(room);
-
-}
-static void roombrowse_menu_create(GaimBlistNode * node, GList ** menu)
-{
-
-    char *label, *room;
-
     struct gaym_conn *gaym;
     GaimChat *chat = (GaimChat *) node;
 
-    gaim_debug_misc("roombrowse", "In callback\n");
+    
     if (node->type != GAIM_BLIST_CHAT_NODE)
         return;
 
     gaym = chat->account->gc->proto_data;
 
-    room = g_strdup(g_hash_table_lookup(chat->components, "name"));
-    gaim_debug_misc("roombrowse", "Room name: %s\n", room);
-    if (!room)
-        return;
+    //char* room = g_strdup(g_hash_table_lookup(chat->components, "alias"));
+    gaim_debug_misc("roombrowse", "chat: %xRoom name: %s\n", chat, gaim_chat_get_name(chat));
 
-
-    label = g_strdup_printf("Lurk in %s", room);
+    label = g_strdup_printf("Browse users in %s", gaim_chat_get_name(chat));
     GaimBlistNodeAction *act = gaim_blist_node_action_new(label,
                                                           roombrowse_menu_cb,
-                                                          chat->account);
+							  chat->account->gc);
 
     *menu = g_list_append(*menu, act);
     // g_free(label);
 }
-static gboolean roombrowse_init()
+void init_roombrowse(GaimPlugin* plugin)
 {
     gaim_signal_connect(gaim_blist_get_handle(),
                         "blist-node-extended-menu",
                         plugin, GAIM_CALLBACK(roombrowse_menu_create),
                         NULL);
 
-
-    gaim_debug_misc("roombrowse", "Callback registered!\n");
-    return TRUE;
+    gaim_signal_connect(gaim_accounts_get_handle(),
+			"namelist-complete",
+			plugin, GAIM_CALLBACK(roombrowse_update_list), NULL);
+    
+    browsers=g_hash_table_new_full(g_str_hash, g_str_equal, g_free, NULL);
+    
+    return;
 }



From jblebrun at berlios.de  Mon Aug  1 16:49:57 2005
From: jblebrun at berlios.de (Jason LeBrun at BerliOS)
Date: Mon, 1 Aug 2005 16:49:57 +0200
Subject: [Qrc-svn] r266 - in qrc/trunk: gaym/src gaym-extras/src
Message-ID: <200508011449.j71EnvvC008548@sheep.berlios.de>

Author: jblebrun
Date: 2005-08-01 16:49:41 +0200 (Mon, 01 Aug 2005)
New Revision: 266

Modified:
   qrc/trunk/gaym-extras/src/chaticon.c
   qrc/trunk/gaym-extras/src/gaym-extras.c
   qrc/trunk/gaym-extras/src/gaym-extras.h
   qrc/trunk/gaym-extras/src/roombrowse.c
   qrc/trunk/gaym/src/gaym.c
   qrc/trunk/gaym/src/gaym.h
   qrc/trunk/gaym/src/msgs.c
Log:
*Changed to signals instead of function calls so that the windows version compiles. (Can't link to gaym-extras with gaym wiht mingw for some reason)

*Bugfix for /NAMES command alone

*Add gtk_set_rules_hint so rows of list alternate.

*Starting trying to add chat icons in room namelist option.


Modified: qrc/trunk/gaym/src/gaym.c
===================================================================
--- qrc/trunk/gaym/src/gaym.c	2005-08-01 05:35:48 UTC (rev 265)
+++ qrc/trunk/gaym/src/gaym.c	2005-08-01 14:49:41 UTC (rev 266)
@@ -1576,9 +1576,10 @@
 };
 
 
-void gaym_get_room_namelist(const char* room, struct gaym_conn* gaym) {
+void gaym_get_room_namelist(GaimAccount* account, const char* room) {
 
     const char* args[1]={room};
+    struct gaym_conn* gaym=(struct gaym_conn*)account->gc->proto_data;
     GaymNamelist *namelist = g_new0(GaymNamelist, 1);
     namelist->roomname=g_strdup(room);
     namelist->members=NULL;
@@ -1622,7 +1623,7 @@
                         "deleting-conversation", plugin,
                         GAIM_CALLBACK(gaym_clean_channel_members), NULL);
 
-    gaim_signal_register(gaim_accounts_get_handle(),
+       gaim_signal_register(gaim_accounts_get_handle(),
                          "info-updated",
                          gaim_marshal_VOID__POINTER_POINTER, NULL, 2,
                          gaim_value_new(GAIM_TYPE_SUBTYPE,
@@ -1630,12 +1631,21 @@
                          gaim_value_new(GAIM_TYPE_POINTER,
                                         GAIM_TYPE_CHAR));
 
-     gaim_signal_register(gaim_accounts_get_handle(),
+    gaim_signal_register(gaim_accounts_get_handle(),
                          "namelist-complete",
                          gaim_marshal_VOID__POINTER_POINTER, NULL, 2,
                          gaim_value_new(GAIM_TYPE_SUBTYPE,
                                         GAIM_SUBTYPE_ACCOUNT),
                          gaim_value_new(GAIM_TYPE_POINTER));
+    gaim_signal_register(gaim_accounts_get_handle(),
+                         "request-namelist",
+                         gaim_marshal_VOID__POINTER_POINTER, NULL, 2,
+                         gaim_value_new(GAIM_TYPE_SUBTYPE,
+                                        GAIM_SUBTYPE_ACCOUNT),
+                         gaim_value_new(GAIM_TYPE_POINTER, GAIM_TYPE_CHAR));
+     gaim_signal_connect(gaim_accounts_get_handle(),
+                        "request-namelist", plugin,
+                        GAIM_CALLBACK(gaym_get_room_namelist), NULL);
 
 
 

Modified: qrc/trunk/gaym/src/gaym.h
===================================================================
--- qrc/trunk/gaym/src/gaym.h	2005-08-01 05:35:48 UTC (rev 265)
+++ qrc/trunk/gaym/src/gaym.h	2005-08-01 14:49:41 UTC (rev 266)
@@ -252,7 +252,7 @@
 void gaym_get_chat_key_from_weblogin(GaimAccount * account,
                                      void (*callback) (GaimAccount *));
 
-void gaym_get_room_namelist(const char* room, struct gaym_conn* gaym);
+void gaym_get_room_namelist(GaimAccount* account, const char* room);
 void gaim_session_fetch(const char *url, gboolean full,
                         const char *user_agent, gboolean http11,
                         void (*cb) (gpointer, const char *, size_t),

Modified: qrc/trunk/gaym/src/msgs.c
===================================================================
--- qrc/trunk/gaym/src/msgs.c	2005-08-01 05:35:48 UTC (rev 265)
+++ qrc/trunk/gaym/src/msgs.c	2005-08-01 14:49:41 UTC (rev 266)
@@ -430,7 +430,7 @@
     
     if (!strcmp(name, "366")) {
 	GaymNamelist* namelist=g_hash_table_lookup(gaym->namelists, args[1]);
-        if(!strncmp(namelist->roomname, args[1], strlen(namelist->roomname)))
+        if(namelist && !strncmp(namelist->roomname, args[1], strlen(namelist->roomname)))
 	{
 	    gaim_debug_misc("names","*****Got all names responses for %s\n",args[1]);
 	    //g_hash_table_remove(gaym->namelists, args[2]);

Modified: qrc/trunk/gaym-extras/src/chaticon.c
===================================================================
--- qrc/trunk/gaym-extras/src/chaticon.c	2005-08-01 05:35:48 UTC (rev 265)
+++ qrc/trunk/gaym-extras/src/chaticon.c	2005-08-01 14:49:41 UTC (rev 266)
@@ -194,8 +194,52 @@
 
 }
 
-void init_chat_icons()
+void chaticon_replace(GaimConversation* conv, const char* name, GaimConvChatBuddyFlags flags) {
+    GaimGtkConversation *gtkconv = GAIM_GTK_CONVERSATION(conv);
+    GaimGtkChatPane *gtkchat = gtkconv->u.chat;
+    gboolean valid;
+    GtkTreeIter iter;
+    int row_count=0;
+    GtkTreeModel *list_store=gtk_tree_view_get_model(GTK_TREE_VIEW(gtkchat->list));
+   /* Get the first iter in the list */
+  valid = gtk_tree_model_get_iter_first (list_store, &iter);
+
+  while (valid)
+    {
+      /* Walk through the list, reading each row */
+      gchar *str_data;
+
+      /* Make sure you terminate calls to gtk_tree_model_get()
+       * with a '-1' value
+       */
+      gtk_tree_model_get (list_store, &iter, 
+                          CHAT_USERS_NAME_COLUMN, &str_data,
+                          -1);
+
+      /* Do something with the data */
+      g_print ("Row %d: (%s)(%s)\n", row_count, str_data,name);
+    
+	if(!strcmp(str_data,name)) {
+	    GdkPixbuf *pixbuf=lookup_cached_thumbnail(conv->account, gaim_normalize(conv->account,name));
+	    gaim_debug_misc("chaticon","Got pixbuf: %x\n");
+	    GtkTreePath* path=gtk_tree_model_get_path(list_store, &iter);
+	    gtk_list_store_set(GTK_LIST_STORE(list_store), &iter, 0, pixbuf, -1);
+
+	    gtk_tree_model_row_changed(list_store, path, &iter);
+	    //g_free(pixbuf);
+	    break;
+	}
+      row_count ++;
+      valid = gtk_tree_model_iter_next (list_store, &iter);
+      g_free (str_data);
+    } 
+
+}
+void init_chat_icons(GaimPlugin* plugin)
 {
+    
+ gaim_signal_connect(gaim_conversations_get_handle(), "chat-buddy-joined",
+                        plugin, GAIM_CALLBACK(chaticon_replace), NULL);
 
     icons = g_hash_table_new(g_direct_hash, g_direct_equal);
 }

Modified: qrc/trunk/gaym-extras/src/gaym-extras.c
===================================================================
--- qrc/trunk/gaym-extras/src/gaym-extras.c	2005-08-01 05:35:48 UTC (rev 265)
+++ qrc/trunk/gaym-extras/src/gaym-extras.c	2005-08-01 14:49:41 UTC (rev 266)
@@ -93,7 +93,7 @@
 }
 static gboolean plugin_load(GaimPlugin * plugin)
 {
-    init_chat_icons();
+    init_chat_icons(plugin);
     init_popups();
     init_roombrowse(plugin);
     gaim_signal_connect(gaim_conversations_get_handle(), "chat-joined",

Modified: qrc/trunk/gaym-extras/src/gaym-extras.h
===================================================================
--- qrc/trunk/gaym-extras/src/gaym-extras.h	2005-08-01 05:35:48 UTC (rev 265)
+++ qrc/trunk/gaym-extras/src/gaym-extras.h	2005-08-01 14:49:41 UTC (rev 266)
@@ -71,7 +71,7 @@
 void add_chat_popup_stuff(GaimConversation * c);
 void add_chat_sort_functions(GaimConversation * c);
 void add_im_popup_stuff(GaimConversation * c);
-void init_chat_icons();
+void init_chat_icons(GaimPlugin* plugin);
 void init_popups();
 void init_roombrowse(GaimPlugin* plugin);
 

Modified: qrc/trunk/gaym-extras/src/roombrowse.c
===================================================================
--- qrc/trunk/gaym-extras/src/roombrowse.c	2005-08-01 05:35:48 UTC (rev 265)
+++ qrc/trunk/gaym-extras/src/roombrowse.c	2005-08-01 14:49:41 UTC (rev 266)
@@ -62,7 +62,6 @@
 void roombrowse_add_info(gpointer data, RoomBrowseGui* browser) {
     /* Add a new row to the model */
     GaymBuddy* member=(GaymBuddy*)data;
-    gaim_debug_misc("roombrowse","append row%s\n",member->name);
     char* sync="Y";
     if(!member->name || !member->prefix)
 	return;
@@ -98,11 +97,11 @@
 }
 void roombrowse_update_list(GaimAccount* account, GaymNamelist* namelist) {
 
+    g_return_if_fail(namelist);
     gaim_debug_misc("roombrowse","update_list from namelist at %x\n",namelist);
-    g_return_if_fail(namelist);
     
     RoomBrowseGui* browser=g_hash_table_lookup(browsers, namelist->roomname);
-    if(!browser) {
+    if(!browser && namelist->roomname) {
 	gaim_debug_misc("roombrowse","No browser found for %s\n",namelist->roomname);
     }
     gtk_list_store_clear(GTK_LIST_STORE(browser->model));
@@ -114,7 +113,8 @@
     gaim_debug_misc("roombrowse","Doing list update!\n");
     struct update_cb_data* udata=(struct update_cb_data*)data;
     
-    gaym_get_room_namelist(udata->room, udata->gc->proto_data);
+    //gaym_get_room_namelist(udata->room, udata->gc->proto_data);
+    gaim_signal_emit(gaim_accounts_get_handle(), "request-namelist", udata->gc->account, udata->room);
     return TRUE;
 }
 static void roombrowse_menu_cb(GaimBlistNode * node, gpointer data)
@@ -159,7 +159,7 @@
     //gtk_tree_view_set_headers_visible(GTK_TREE_VIEW(browser->list), FALSE); 
     GtkCellRenderer* rend;
     GtkTreeViewColumn* col;
-    
+    gtk_tree_view_set_rules_hint(GTK_TREE_VIEW(browser->list), TRUE); 
     rend=gtk_cell_renderer_pixbuf_new();
     col=gtk_tree_view_column_new_with_attributes("Photo", rend, "pixbuf", COLUMN_PHOTO, NULL);
     gtk_tree_view_append_column(GTK_TREE_VIEW(browser->list), col);



From jblebrun at berlios.de  Tue Aug  2 08:42:38 2005
From: jblebrun at berlios.de (Jason LeBrun at BerliOS)
Date: Tue, 2 Aug 2005 08:42:38 +0200
Subject: [Qrc-svn] r267 - in qrc/trunk: gaym/src gaym-extras/src
Message-ID: <200508020642.j726gcVS003619@sheep.berlios.de>

Author: jblebrun
Date: 2005-08-02 08:42:09 +0200 (Tue, 02 Aug 2005)
New Revision: 267

Modified:
   qrc/trunk/gaym-extras/src/bio-popups.c
   qrc/trunk/gaym-extras/src/chaticon.c
   qrc/trunk/gaym-extras/src/chatsort.c
   qrc/trunk/gaym-extras/src/gaym-extras.c
   qrc/trunk/gaym-extras/src/gaym-extras.h
   qrc/trunk/gaym-extras/src/roombrowse.c
   qrc/trunk/gaym/src/cmds.c
   qrc/trunk/gaym/src/gaym.c
   qrc/trunk/gaym/src/gaym.h
   qrc/trunk/gaym/src/gayminfo.c
   qrc/trunk/gaym/src/gayminfo.h
   qrc/trunk/gaym/src/helpers.c
   qrc/trunk/gaym/src/msgs.c
Log:
Does anyone read these things?

*Switch to queues instead of hash tables for namelist retreival management.
*Clickable roombrowser
*Proper icon scaling
*Bugfixes, of course.

gaym.h:
    *Change namelist GHashtable to a GQueue (not to be confused with the magazine)

gaym.c:
    *hashtable access become queue accesses
    *initialize the gaym->nameconv pointer to NULL to prevent names bug.
    *strip markup from away message before setting it as bio
    !Away message destroy your original bio, I think.

msgs.c:
    *change hashtable accesses to queue accesses
    *order things in msg handlers correctly
    *add some null pointer checks
    *better parsing of the WHO info lines

gayminfo.c:
    *remove a debug message

roombrowse.c:
    *Add clickable rows, and right-click menus (gratuitous copying directly from gtkconv.c)
    *scale icons to spec
    *try fixed-height rows for neatness. (feedback?)

gaym-extras.c:
    *move icon scaling code here.
    *make icon scaling code actually scale properly (what's wrong with gaim people?)

chaticon.c:
    *move away scaling code
    *comment out signal-connection to broke-ass attempt at putting icons in namelist.


Modified: qrc/trunk/gaym/src/cmds.c
===================================================================
--- qrc/trunk/gaym/src/cmds.c	2005-08-01 14:49:41 UTC (rev 266)
+++ qrc/trunk/gaym/src/cmds.c	2005-08-02 06:42:09 UTC (rev 267)
@@ -575,14 +575,14 @@
     return 0;
 }
 int gaym_cmd_who(struct gaym_conn *gaym, const char *cmd,
-                   const char *target, const char **args)
+                 const char *target, const char **args)
 {
     char *buf;
     if (!args || !args[0])
         return 0;
 
     buf = gaym_format(gaym, "vn", "WHO", args[0]);
-    gaim_debug_misc("cmds","Exceuting %s\n",buf);
+    gaim_debug_misc("cmds", "Exceuting %s\n", buf);
     gaym_send(gaym, buf);
     g_free(buf);
     return 0;

Modified: qrc/trunk/gaym/src/gaym.c
===================================================================
--- qrc/trunk/gaym/src/gaym.c	2005-08-01 14:49:41 UTC (rev 266)
+++ qrc/trunk/gaym/src/gaym.c	2005-08-02 06:42:09 UTC (rev 267)
@@ -236,10 +236,13 @@
     }
 
     struct gaym_buddy *ib =
-        g_hash_table_lookup(gaym->channel_members, gaim_normalize(gaym->account,buddy->name)); 
-    if(!ib)
-         ib=g_hash_table_lookup(gaym->buddies, gaim_normalize(gaym->account,buddy->name));
-    
+        g_hash_table_lookup(gaym->channel_members,
+                            gaim_normalize(gaym->account, buddy->name));
+    if (!ib)
+        ib = g_hash_table_lookup(gaym->buddies,
+                                 gaim_normalize(gaym->account,
+                                                buddy->name));
+
     if (!ib) {
         return g_strdup("No info found.");
     }
@@ -300,7 +303,7 @@
     }
 
     bioline =
-        g_strdup_printf("%s#%s\xC2\xA0 \xC2\xA0\001%s",
+        g_strdup_printf("%s#%s\001%s",
                         gaym->thumbnail ? gaym->thumbnail : "",
                         gc->away ? gc->away : (gaym->bio ? gaym->bio : ""),
                         gaym->server_stats ? gaym->server_stats : "");
@@ -448,12 +451,13 @@
 
 }
 
-guint gaym_room_hash(gconstpointer key) {
+guint gaym_room_hash(gconstpointer key)
+{
 
-    if(*((char*)key)==0)
-	return 0;
+    if (*((char *) key) == 0)
+        return 0;
 
-    return atoi((char*)(key+1));
+    return atoi((char *) (key + 1));
 
 
 }
@@ -490,10 +494,8 @@
      */
 
 
-    gaym->namelists = g_hash_table_new_full((GHashFunc)gaym_room_hash,
-					    g_int_equal,
-					    g_free,
-					    NULL);
+    gaym->namelists = g_queue_new();
+
     gaym->buddies =
         g_hash_table_new_full((GHashFunc) gaym_nick_hash,
                               (GEqualFunc) gaym_nick_equal, NULL,
@@ -510,12 +512,17 @@
     gaym_msg_table_build(gaym);
     gaym->roomlist_filter = NULL;
 
-    gaym->hammers = g_hash_table_new_full(g_str_hash, g_str_equal, g_free, (GDestroyNotify)hammer_cb_data_destroy);
+    gaym->hammers =
+        g_hash_table_new_full(g_str_hash, g_str_equal, g_free,
+                              (GDestroyNotify) hammer_cb_data_destroy);
     /**
      * The last parameter needs to be NULL here, since the same
      * field is added for both the key and the value (and if we
      * free it twice, thats bad and causes crashing!).
      */
+
+    gaym->nameconv = NULL;
+
     gaym->info_window_needed =
         g_hash_table_new_full(g_str_hash, g_str_equal, g_free, NULL);
 
@@ -545,15 +552,15 @@
                                   const gchar * config_text, size_t len)
 {
     struct gaym_conn *gaym = (struct gaym_conn *) proto_data;
-    //GaimConnection *gc = gaim_account_get_connection(gaym->account);
+    // GaimConnection *gc = gaim_account_get_connection(gaym->account);
 
     g_return_if_fail(config_text != NULL);
 
     gaym->confighash = gaym_properties_new(config_text);
     g_return_if_fail(gaym->confighash != NULL);
 
-    //if(roomlist=g_hash_table_lookup(gaym->confighash, "roomlist"))
-    //    gaym->roomlist = gaym_parse_roomlist();
+    // if(roomlist=g_hash_table_lookup(gaym->confighash, "roomlist"))
+    // gaym->roomlist = gaym_parse_roomlist();
     // synchronize_deny_list(gc, gaym->confighash);
 
     return;
@@ -616,7 +623,7 @@
 
         login_name =
             gaym_nick_to_gcom_strdup(gaim_connection_get_display_name(gc));
-        bioline = g_strdup_printf("%s#%s\xC2\xA0 \xC2\xA0\001%s",
+        bioline = g_strdup_printf("%s#%s\001%s",
                                   gaym->thumbnail,
                                   user_bioline ? user_bioline : "",
                                   gaym->server_stats ? gaym->
@@ -662,7 +669,9 @@
     }
 }
 
-void kill_hammer(gpointer* room, struct hammer_cb_data* data, gpointer *null) {
+void kill_hammer(gpointer * room, struct hammer_cb_data *data,
+                 gpointer * null)
+{
     hammer_cb_data_destroy(data);
 }
 
@@ -704,6 +713,10 @@
     if (gaym->bio)
         g_free(gaym->bio);
 
+
+    // Would we need to free each element, too?
+    g_queue_free(gaym->namelists);
+
     g_hash_table_destroy(gaym->cmds);
     g_hash_table_destroy(gaym->msgs);
     g_hash_table_destroy(gaym->info_window_needed);
@@ -721,7 +734,7 @@
 
     g_hash_table_destroy(gaym->confighash);
 
-    g_hash_table_foreach(gaym->hammers, (GHFunc)kill_hammer, NULL);
+    g_hash_table_foreach(gaym->hammers, (GHFunc) kill_hammer, NULL);
 
     g_free(gaym->server);
     g_free(gaym);
@@ -806,7 +819,9 @@
     } else {
         if (gaym && gaym->bio) {
             bio = g_strdup(gaym->bio);
-            gaym_set_info(gc, bio);
+            char *stripped = gaim_markup_strip_html(bio);
+            gaym_set_info(gc, stripped);
+            g_free(stripped);
             g_free(bio);
         } else {
             gaym_set_info(gc, NULL);
@@ -834,11 +849,13 @@
     if (!channel_member) {
         GaymBuddy *channel_member = g_new0(GaymBuddy, 1);
         channel_member->ref_count = 1;
-        g_hash_table_insert(gaym->channel_members, g_strdup(gaim_normalize(gaym->account,name)),
+        g_hash_table_insert(gaym->channel_members,
+                            g_strdup(gaim_normalize(gaym->account, name)),
                             channel_member);
         gaim_debug_misc("gaym", "Creating channel_members entry for %s\n",
                         name);
-        return g_hash_table_lookup(gaym->channel_members, gaim_normalize(gaym->account, name));
+        return g_hash_table_lookup(gaym->channel_members,
+                                   gaim_normalize(gaym->account, name));
     } else {
         gaim_debug_misc("gaym",
                         "Adding reference to channel_members entry for %s\n",
@@ -855,7 +872,9 @@
 
     GaymBuddy *channel_member;
     channel_member =
-        (GaymBuddy *) g_hash_table_lookup(gaym->channel_members, gaim_normalize(gaym->account,name));
+        (GaymBuddy *) g_hash_table_lookup(gaym->channel_members,
+                                          gaim_normalize(gaym->account,
+                                                         name));
     if (!channel_member)
         return FALSE;
     else {
@@ -869,7 +888,9 @@
         if (channel_member->ref_count == 0) {
             gaim_debug_misc("gaym", "Removing %s from channel_members\n",
                             name);
-            return g_hash_table_remove(gaym->channel_members, gaim_normalize(gaym->account, name));
+            return g_hash_table_remove(gaym->channel_members,
+                                       gaim_normalize(gaym->account,
+                                                      name));
         }
         return FALSE;
     }
@@ -1331,7 +1352,7 @@
     0,                          /* options */
     NULL,                       /* user_splits */
     NULL,                       /* protocol_options */
-    {"jpg", 57, 77, 57, 77},    /* icon_spec */
+    {"jpg", 57, 77, 57, 77, GAIM_ICON_SCALE_DISPLAY},   /* icon_spec */
     gaym_blist_icon,            /* list_icon */
     gaym_blist_emblems,         /* list_emblems */
     gaym_status_text,           /* status_text */
@@ -1576,18 +1597,25 @@
 };
 
 
-void gaym_get_room_namelist(GaimAccount* account, const char* room) {
+void gaym_get_room_namelist(GaimAccount * account, const char *room)
+{
 
-    const char* args[1]={room};
-    struct gaym_conn* gaym=(struct gaym_conn*)account->gc->proto_data;
+
+    if (!account || !room)
+        return;
+
+    const char *args[1] = { room };
+    struct gaym_conn *gaym = (struct gaym_conn *) account->gc->proto_data;
     GaymNamelist *namelist = g_new0(GaymNamelist, 1);
-    namelist->roomname=g_strdup(room);
-    namelist->members=NULL;
-    namelist->num_rooms=100;
-    namelist->current=0;
-    g_hash_table_insert(gaym->namelists, g_strdup(room), namelist); 
-    
-    //g_hash_table_insert(gaym->namelist_pending, list);
+    namelist->roomname = g_strdup(room);
+    namelist->members = NULL;
+    namelist->num_rooms = 100;
+    namelist->current = 0;
+
+    g_queue_push_tail(gaym->namelists, namelist);
+    // g_hash_table_insert(gaym->namelists, g_strdup(room), namelist); 
+
+    // g_hash_table_insert(gaym->namelist_pending, list);
     gaym_cmd_who(gaym, NULL, NULL, args);
 }
 static void _init_plugin(GaimPlugin * plugin)
@@ -1623,7 +1651,7 @@
                         "deleting-conversation", plugin,
                         GAIM_CALLBACK(gaym_clean_channel_members), NULL);
 
-       gaim_signal_register(gaim_accounts_get_handle(),
+    gaim_signal_register(gaim_accounts_get_handle(),
                          "info-updated",
                          gaim_marshal_VOID__POINTER_POINTER, NULL, 2,
                          gaim_value_new(GAIM_TYPE_SUBTYPE,
@@ -1642,10 +1670,11 @@
                          gaim_marshal_VOID__POINTER_POINTER, NULL, 2,
                          gaim_value_new(GAIM_TYPE_SUBTYPE,
                                         GAIM_SUBTYPE_ACCOUNT),
-                         gaim_value_new(GAIM_TYPE_POINTER, GAIM_TYPE_CHAR));
-     gaim_signal_connect(gaim_accounts_get_handle(),
-                        "request-namelist", plugin,
-                        GAIM_CALLBACK(gaym_get_room_namelist), NULL);
+                         gaim_value_new(GAIM_TYPE_POINTER,
+                                        GAIM_TYPE_CHAR));
+    gaim_signal_connect(gaim_accounts_get_handle(), "request-namelist",
+                        plugin, GAIM_CALLBACK(gaym_get_room_namelist),
+                        NULL);
 
 
 

Modified: qrc/trunk/gaym/src/gaym.h
===================================================================
--- qrc/trunk/gaym/src/gaym.h	2005-08-01 14:49:41 UTC (rev 266)
+++ qrc/trunk/gaym/src/gaym.h	2005-08-02 06:42:09 UTC (rev 267)
@@ -96,9 +96,10 @@
 
     GHashTable *hammers;
 
+    // Namelists come in order
+    // So use a queue.
+    GQueue *namelists;
 
-    GHashTable *namelists;
-
 };
 
 typedef struct {
@@ -123,9 +124,9 @@
     char *thumbnail;            /* thumbnail string */
     char *sex;                  /* sex string */
     char *age;                  /* age string */
-    char *prefix;		/* prefix string */
+    char *prefix;               /* prefix string */
     char *location;             /* location string */
-    gboolean gaymuser;		/* gaym detected */
+    gboolean gaymuser;          /* gaym detected */
 };
 GaymBuddy *gaym_get_channel_member_info(struct gaym_conn *gaym,
                                         const gchar * name);
@@ -137,9 +138,9 @@
                                          gchar * name);
 
 struct hammer_cb_data {
-   struct gaym_conn* gaym;
-   char* room;
-   void* cancel_dialog;
+    struct gaym_conn *gaym;
+    char *room;
+    void *cancel_dialog;
 } hammer_cb_data;
 
 void hammer_cb_data_destroy(struct hammer_cb_data *hdata);
@@ -240,10 +241,11 @@
 cmd_handler gaym_cmd_who;
 
 typedef struct GaymNamelist {
-    char* roomname;
-    GSList *members; //List of GaymBuddies;
+    char *roomname;
+    GSList *members;            // List of GaymBuddies;
     int num_rooms;
-    GSList* current; //Pointer to gaymbuddy to be updated next (during names pass)
+    GSList *current;            // Pointer to gaymbuddy to be updated next 
+                                // (during names pass)
 } GaymNamelist;
 void gaym_dccsend_send_file(GaimConnection * gc, const char *who,
                             const char *file);
@@ -252,7 +254,7 @@
 void gaym_get_chat_key_from_weblogin(GaimAccount * account,
                                      void (*callback) (GaimAccount *));
 
-void gaym_get_room_namelist(GaimAccount* account, const char* room);
+void gaym_get_room_namelist(GaimAccount * account, const char *room);
 void gaim_session_fetch(const char *url, gboolean full,
                         const char *user_agent, gboolean http11,
                         void (*cb) (gpointer, const char *, size_t),

Modified: qrc/trunk/gaym/src/gayminfo.c
===================================================================
--- qrc/trunk/gaym/src/gayminfo.c	2005-08-01 14:49:41 UTC (rev 266)
+++ qrc/trunk/gaym/src/gayminfo.c	2005-08-02 06:42:09 UTC (rev 267)
@@ -26,12 +26,13 @@
 #include "util.h"
 #include "debug.h"
 
-//#define GAYM_TOKEN 1
+// #define GAYM_TOKEN 1
 
 #ifdef GAYM_TOKEN
-gboolean gaym_stats_find_gaym_token(const char* info) {
-    gaim_debug_misc("token","checking for token in %s\n",info);
-    return (gboolean)g_strrstr(info, "\xC2\xA0 \xC2\xA0");
+gboolean gaym_stats_find_gaym_token(const char *info)
+{
+    gaim_debug_misc("token", "checking for token in %s\n", info);
+    return (gboolean) g_strrstr(info, "\xC2\xA0 \xC2\xA0");
 }
 #endif
 char *gaym_thumbnail_strdup(const char *info)
@@ -60,12 +61,12 @@
             end = strchr(start, 0);
     }
 #ifdef GAYM_TOKEN
-    gaim_debug_misc("gaym","end: %x, end-1: %x, end-5: %x\n",end,*(end-1),*(end-5));
-    if(end-5 >= start)
-	if(!strncmp((end-5),"\xC2\xA0 \xC2\xA0",5))
-	    end-=5;
+    gaim_debug_misc("gaym", "end: %x, end-1: %x, end-5: %x\n", end,
+                    *(end - 1), *(end - 5));
+    if (end - 5 >= start)
+        if (!strncmp((end - 5), "\xC2\xA0 \xC2\xA0", 5))
+            end -= 5;
 #endif
-    gaim_debug_misc("gaym","end %x, start %x\n",end,start);
     if ((end) && (start < end)) {
         return g_strdup_printf("%.*s", end - start, start);
     } else {
@@ -122,7 +123,7 @@
         cm->name = g_strdup(nick);
         cm->bio = gaym_bio_strdup(info);
 #ifdef GAYM_TOKEN
-	cm->gaymuser = gaym_stats_find_gaym_token(info);
+        cm->gaymuser = gaym_stats_find_gaym_token(info);
 #endif
         cm->thumbnail = gaym_thumbnail_strdup(info);
 
@@ -168,9 +169,9 @@
         gaim_signal_emit(gaim_accounts_get_handle(), "info-updated",
                          d->gc, NULL, d->who);
         if (gaim_find_conversation_with_account(d->who, d->gc->account)) {
-            //gaim_buddy_icons_set_for_user(gaim_connection_get_account
-            //                              (d->gc), d->who,
-            //                              (void *) pic_data, len);
+            // gaim_buddy_icons_set_for_user(gaim_connection_get_account
+            // (d->gc), d->who,
+            // (void *) pic_data, len);
         }
 
     } else {
@@ -189,7 +190,7 @@
     char *stats = NULL;
     char *url = NULL;
     struct gaym_fetch_thumbnail_data *data;
-    gboolean gaymuser=FALSE;
+    gboolean gaymuser = FALSE;
 
     if (!gaym || !gaym->account || !gaym->buddies || !name) {
         return;
@@ -197,7 +198,7 @@
 
     if (info) {
 #ifdef GAYM_TOKEN
-	gaymuser = gaym_stats_find_gaym_token(info);
+        gaymuser = gaym_stats_find_gaym_token(info);
 #endif
         bio = gaym_bio_strdup(info);
         if (bio) {
@@ -214,7 +215,7 @@
             stats = g_strstrip(stats);
         }
 
-	
+
     }
 
     GaimConnection *gc = gaim_account_get_connection(gaym->account);
@@ -239,8 +240,12 @@
             if (gdir) {
                 const char *filename;
 
-                while ((filename = g_dir_read_name(gdir)))      /* don't  free  filename:  owned  by glib.*/
-                {
+                while ((filename = g_dir_read_name(gdir))) {    /* don't
+                                                                   free
+                                                                   filename: 
+                                                                   owned
+                                                                   by
+                                                                   glib. */
                     char *thumbnail_base = g_path_get_basename(thumbnail);
                     gaim_debug_misc("gaym", "compared %s and %s\n",
                                     thumbnail_base, filename);
@@ -250,7 +255,7 @@
                     }
                     g_free(thumbnail_base);
                 }
-		g_dir_close(gdir);
+                g_dir_close(gdir);
             }
             if (do_fetch) {
 
@@ -316,7 +321,7 @@
             g_strfreev(s);
             g_free(stats);
         }
-	ib->gaymuser = gaymuser;
+        ib->gaymuser = gaymuser;
         GaimBuddy *buddy = gaim_find_buddy(gaym->account, name);
         if (buddy) {
             serv_got_update(gc, buddy->name, online, 0, 0, 0, 0);

Modified: qrc/trunk/gaym/src/gayminfo.h
===================================================================
--- qrc/trunk/gaym/src/gayminfo.h	2005-08-01 14:49:41 UTC (rev 266)
+++ qrc/trunk/gaym/src/gayminfo.h	2005-08-02 06:42:09 UTC (rev 267)
@@ -70,7 +70,7 @@
 
 
 
-gboolean gaym_stats_find_gaym_token(const char* info);
+gboolean gaym_stats_find_gaym_token(const char *info);
 
 /**
  * Extract the stats string from the extra IRC info about the user.

Modified: qrc/trunk/gaym/src/helpers.c
===================================================================
--- qrc/trunk/gaym/src/helpers.c	2005-08-01 14:49:41 UTC (rev 266)
+++ qrc/trunk/gaym/src/helpers.c	2005-08-02 06:42:09 UTC (rev 267)
@@ -289,7 +289,8 @@
         proparr = g_strsplit(tmparr[i], "=", 2);
         if (proparr[0] && strlen(g_strstrip(proparr[0])) > 0
             && proparr[1] && strlen(g_strstrip(proparr[1])) > 0) {
-	    //gaim_debug_misc("properties","Inserted %s=%s\n",proparr[0],proparr[1]);
+            // gaim_debug_misc("properties","Inserted
+            // %s=%s\n",proparr[0],proparr[1]);
             g_hash_table_insert(props, g_strdup(proparr[0]),
                                 g_strdup(proparr[1]));
 
@@ -457,11 +458,11 @@
 
 char *build_tooltip_text(struct gaym_buddy *ib)
 {
-    if(!ib->name)
-	return g_strdup("No info found.");
+    if (!ib->name)
+        return g_strdup("No info found.");
     char *escaped;
     GString *tooltip = g_string_new("");
-    
+
     g_string_printf(tooltip, "<b><i>%s</i></b>", ib->name);
 
     g_return_val_if_fail(ib != NULL, NULL);
@@ -494,7 +495,7 @@
     }
 
     if (ib->gaymuser) {
-	g_string_append(tooltip, _("\n<i>Gaym user.</i>"));
+        g_string_append(tooltip, _("\n<i>Gaym user.</i>"));
     }
     if (tooltip->len == 0) {
         g_string_append_printf(tooltip, _(" No info."));

Modified: qrc/trunk/gaym/src/msgs.c
===================================================================
--- qrc/trunk/gaym/src/msgs.c	2005-08-01 14:49:41 UTC (rev 266)
+++ qrc/trunk/gaym/src/msgs.c	2005-08-02 06:42:09 UTC (rev 267)
@@ -244,7 +244,7 @@
     if (!gaym || !args || !args[1]) {
         return;
     }
-    
+
     gcom_nick_to_gaym(args[1]);
 
     gaym_buddy_status(gaym, args[1], TRUE, args[5]);
@@ -427,19 +427,28 @@
 {
     char *names, *cur, *end, *tmp, *msg;
     GaimConversation *convo;
-    
+    gaim_debug_misc("names", "%s %s %s %s", name, from, args[1], args[2]);
     if (!strcmp(name, "366")) {
-	GaymNamelist* namelist=g_hash_table_lookup(gaym->namelists, args[1]);
-        if(namelist && !strncmp(namelist->roomname, args[1], strlen(namelist->roomname)))
-	{
-	    gaim_debug_misc("names","*****Got all names responses for %s\n",args[1]);
-	    //g_hash_table_remove(gaym->namelists, args[2]);
-	    GaymNamelist* namelist=g_hash_table_lookup(gaym->namelists, args[1]);
-	    gaim_debug_misc("msgs","should be emitting namelist-complete signal passing namelist %x\n",namelist);
-	    gaim_signal_emit(gaim_accounts_get_handle(), "namelist-complete", gaym->account, namelist);
-	    return;
-	}
-	convo =
+        GaymNamelist *namelist = g_queue_peek_head(gaym->namelists);
+        gaim_debug_misc("names", "namelist->roomname:%s\n",
+                        namelist->roomname);
+        if (namelist
+            && !strncmp(namelist->roomname, args[1],
+                        strlen(namelist->roomname))) {
+            gaim_debug_misc("names",
+                            "*****Got all names responses for %s\n",
+                            args[1]);
+            GaymNamelist *namelist = g_queue_pop_head(gaym->namelists);
+            gaim_debug_misc("msgs",
+                            "should be emitting namelist-complete signal passing namelist %x\n",
+                            namelist);
+            gaim_signal_emit(gaim_accounts_get_handle(),
+                             "namelist-complete", gaym->account, namelist);
+            return;
+        }
+        if (!gaym->nameconv)
+            return;
+        convo =
             gaim_find_conversation_with_account(gaym->nameconv ? gaym->
                                                 nameconv : args[1],
                                                 gaym->account);
@@ -502,27 +511,29 @@
     } else {
         if (gaym->nameconv && !gaym->names) {
             gaym->names = g_string_new("");
-	    gaym->names = g_string_append(gaym->names, args[3]);
-	}
-	gaim_debug_misc("names","Response: %s\n",args[3]);
-	GaymNamelist* nameslist=g_hash_table_lookup(gaym->namelists, args[2]);
-	if(nameslist)
-	{
-	    gchar** names=g_strsplit(args[3]," ",-1);
-	    	    
+            gaym->names = g_string_append(gaym->names, args[3]);
+        }
+        gaim_debug_misc("names", "Response: %s\n", args[3]);
+        GaymNamelist *nameslist = g_queue_peek_head(gaym->namelists);
+        if (nameslist) {
+            gchar **names = g_strsplit(args[3], " ", -1);
 
-		int i=0;
-		gaim_debug_misc("names","names[i]: %s, nameslist->current: %x\n", names[i], nameslist->current);
-	    	while(names[i] && strlen(names[i]) && nameslist->current)
-		{
-			gaim_debug_misc("names","append %s (length %i)\n",names[i],strlen(names[i]));
-			((GaymBuddy*)(nameslist->current->data))->name=g_strdup(names[i]);
-			nameslist->current=g_slist_next(nameslist->current);
-			i++;
-		}
-		g_strfreev(names);
-	    
-	}
+
+            int i = 0;
+            gaim_debug_misc("names",
+                            "names[i]: %s, nameslist->current: %x\n",
+                            names[i], nameslist->current);
+            while (names[i] && strlen(names[i]) && nameslist->current) {
+                gaim_debug_misc("names", "append %s (length %i)\n",
+                                names[i], strlen(names[i]));
+                ((GaymBuddy *) (nameslist->current->data))->name =
+                    g_strdup(names[i]);
+                nameslist->current = g_slist_next(nameslist->current);
+                i++;
+            }
+            g_strfreev(names);
+
+        }
     }
 }
 
@@ -592,8 +603,8 @@
 
     if (gc == NULL || args == NULL || args[1] == NULL)
         return;
-    
-    
+
+
 }
 
 void gaym_msg_nonick(struct gaym_conn *gaym, const char *name,
@@ -723,7 +734,7 @@
 void gaym_msg_join(struct gaym_conn *gaym, const char *name,
                    const char *from, char **args)
 {
-    gaim_debug_misc("join","got join for %s\n",args[0]);
+    gaim_debug_misc("join", "got join for %s\n", args[0]);
     GaimConnection *gc = gaim_account_get_connection(gaym->account);
     g_return_if_fail(gc != NULL);
 
@@ -739,19 +750,20 @@
     if (!gaim_utf8_strcasecmp(nick, gaim_connection_get_display_name(gc))) {
         /* We are joining a channel for the first time */
 
-	gpointer data, unused;
-	gboolean hammering=g_hash_table_lookup_extended
-	    (gaym->hammers,args[0],&unused, &data);
-	//There was a hammer, but it is cancelled. Leave!
-	gaim_debug_misc("join","Joined %s\n",args[0]);
-	if(hammering && !data) { //hammer was cancelled.
-	    gaim_debug_misc("gaym","JOINED, BUT HAMMER CANCELLED: ABORT!!!!\n");
-	    g_hash_table_remove(gaym->hammers, args[0]);
-	    gaym_cmd_part(gaym, NULL, NULL, (const char**)args);
-	    return;
-	}
-	
-	g_hash_table_remove(gaym->hammers, args[0]);
+        gpointer data, unused;
+        gboolean hammering = g_hash_table_lookup_extended
+            (gaym->hammers, args[0], &unused, &data);
+        // There was a hammer, but it is cancelled. Leave!
+        gaim_debug_misc("join", "Joined %s\n", args[0]);
+        if (hammering && !data) {       // hammer was cancelled.
+            gaim_debug_misc("gaym",
+                            "JOINED, BUT HAMMER CANCELLED: ABORT!!!!\n");
+            g_hash_table_remove(gaym->hammers, args[0]);
+            gaym_cmd_part(gaym, NULL, NULL, (const char **) args);
+            return;
+        }
+
+        g_hash_table_remove(gaym->hammers, args[0]);
         serv_got_joined_chat(gc, id++, args[0]);
 
         gint *entry = g_new(gint, 1);
@@ -1181,121 +1193,132 @@
 void gaym_msg_who(struct gaym_conn *gaym, const char *name,
                   const char *from, char **args)
 {
-    char* pos;
-    GaymNamelist* nameslist;
+    char *pos;
+    GaymNamelist *nameslist;
 
-    if (!strncmp(name,"315",3))
-    {
-	
-	nameslist=g_hash_table_lookup(gaym->namelists, args[1]);
-        nameslist->members=g_slist_reverse(nameslist->members);
-	nameslist->current=nameslist->members;
+    if (!strncmp(name, "315", 3)) {
 
-	//If we are doing an "umbrella room" then we send out this names thing.
-	//Because the names parsing section terminates on a "names" from 
-	//The exact channel name match.
-	if(g_str_has_suffix(args[1],"=*"))
-	{
-	    gaim_debug_misc("who","Has a =* suffix, sending out one more namescmd \n");
-	    const char* cmdargs[1]={args[1]};
-	    gaym_cmd_names(gaym, NULL, NULL, cmdargs);
-	}
-	return;
+        nameslist = g_queue_peek_head(gaym->namelists);
+        if (!nameslist)
+            return;
+        nameslist->members = g_slist_reverse(nameslist->members);
+        nameslist->current = nameslist->members;
+
+        // If we are doing an "umbrella room" then we send out this names
+        // thing.
+        // Because the names parsing section terminates on a "names" from 
+        // The exact channel name match.
+        if (g_str_has_suffix(args[1], "=*")) {
+            gaim_debug_misc("who",
+                            "Has a =* suffix, sending out one more namescmd \n");
+            const char *cmdargs[1] = { args[1] };
+            gaym_cmd_names(gaym, NULL, NULL, cmdargs);
+        }
+        return;
     }
 
-    if(args[2])
-    {
+    if (args[2]) {
 
-	nameslist=g_hash_table_lookup(gaym->namelists, args[1]);
-	if(!nameslist)
-	    return;
-	GaymBuddy *member=g_new0(GaymBuddy, 1);
-	gchar** parts=g_strsplit(args[2],"|",2);
-	if(args[1])
-	{
-	    member->bio=gaym_bio_strdup(parts[1]);
-	    member->thumbnail=gaym_thumbnail_strdup(parts[1]);
-	    member->prefix=g_strndup(parts[1],6);
-	    
-	    gchar* stats=gaym_stats_strdup(parts[1]);
-	    if(stats) 
-	    {
-		gchar** stat_parts=g_strsplit(stats,"|",3);
-		member->sex=stat_parts[0];
-		member->age=stat_parts[1];
-		member->location=stat_parts[2];
-		g_free(stats);
-	    }
-	    
-	    nameslist->members=g_slist_prepend(nameslist->members, member);
-	}
-	g_strfreev(parts);	
-	
-	pos=strrchr(args[1], '=');
-	int val=0;
-	if (!pos)
-	    return;
-	val=g_ascii_digit_value(*(++pos));
-	if (val<nameslist->num_rooms)
-	{
-	    gaim_debug_misc("msgs","*******NEXT ROOM******\n");
-	    const char* cmdargs[1]={args[1]};
-	    gaym_cmd_names(gaym, NULL, NULL, cmdargs);
-	    nameslist->num_rooms=val;
-	}
+        nameslist = g_queue_peek_tail(gaym->namelists);
+        if (!nameslist)
+            return;
+        GaymBuddy *member = g_new0(GaymBuddy, 1);
+        gchar **parts = g_strsplit(args[2], " ", 7);
+
+        if (parts[6]) {
+            member->bio = gaym_bio_strdup(parts[6]);
+            member->thumbnail = gaym_thumbnail_strdup(parts[6]);
+            char *prefix_start = NULL;
+            if (g_ascii_isdigit(parts[3][0])
+                && (prefix_start = strchr(parts[3], '|')))
+                member->prefix = g_strdup(prefix_start + 1);
+            else
+                member->prefix = g_strdup(parts[3]);
+
+            gchar *stats = gaym_stats_strdup(parts[6]);
+            if (stats) {
+                gchar **stat_parts = g_strsplit(stats, "|", 3);
+                member->sex = stat_parts[0];
+                member->age = stat_parts[1];
+                member->location = stat_parts[2];
+                g_free(stats);
+            }
+
+            nameslist->members =
+                g_slist_prepend(nameslist->members, member);
+        }
+        g_strfreev(parts);
+
+        pos = strrchr(args[1], '=');
+        int val = 0;
+        if (!pos)
+            return;
+        val = g_ascii_digit_value(*(++pos));
+        if (val < nameslist->num_rooms) {
+            gaim_debug_misc("msgs", "*******NEXT ROOM******\n");
+            const char *cmdargs[1] = { args[1] };
+            gaym_cmd_names(gaym, NULL, NULL, cmdargs);
+            nameslist->num_rooms = val;
+        }
     }
 
-     
-    
-    //Use the who msgs cross-referenced with the NAMES list to figure out who is who. Resolve conflicts.
-    
+
+    // Use the who msgs cross-referenced with the NAMES list to figure out 
+    // who is who. Resolve conflicts.
+
 }
 
 void hammer_stop_cb(gpointer data)
 {
-    struct hammer_cb_data* hdata = (struct hammer_cb_data *) data;
+    struct hammer_cb_data *hdata = (struct hammer_cb_data *) data;
 
-    gaim_debug_misc("gaym","hammer stopped, dialog is %x\n",hdata->cancel_dialog);
-    //This destroys the hammer data!
-    gaim_debug_misc("gaym", "Cancelling hammer: %s\n",hdata->room);
-    //I'm not sure if the dialog data is freed. 
-    //For now, I assume not. 
-    //hdata->cancel_dialog=0;
-    //The old key gets freed, so strdup it again
-    g_hash_table_replace(hdata->gaym->hammers, g_strdup(hdata->room), NULL); 
+    gaim_debug_misc("gaym", "hammer stopped, dialog is %x\n",
+                    hdata->cancel_dialog);
+    // This destroys the hammer data!
+    gaim_debug_misc("gaym", "Cancelling hammer: %s\n", hdata->room);
+    // I'm not sure if the dialog data is freed. 
+    // For now, I assume not. 
+    // hdata->cancel_dialog=0;
+    // The old key gets freed, so strdup it again
+    g_hash_table_replace(hdata->gaym->hammers, g_strdup(hdata->room),
+                         NULL);
 }
 
-void hammer_cb_data_destroy(struct hammer_cb_data *hdata) {
-    if(!hdata)
-	return;
-    if(hdata->cancel_dialog)
-	gaim_request_close(GAIM_REQUEST_ACTION, hdata->cancel_dialog);
-    if(hdata->room)
-	g_free(hdata->room);
+void hammer_cb_data_destroy(struct hammer_cb_data *hdata)
+{
+    if (!hdata)
+        return;
+    if (hdata->cancel_dialog)
+        gaim_request_close(GAIM_REQUEST_ACTION, hdata->cancel_dialog);
+    if (hdata->room)
+        g_free(hdata->room);
     g_free(hdata);
 }
 
-void hammer_cb_no(gpointer data) {
+void hammer_cb_no(gpointer data)
+{
     hammer_cb_data_destroy(data);
 }
 
 void hammer_cb_yes(gpointer data)
 {
     struct hammer_cb_data *hdata = (struct hammer_cb_data *) data;
-    char* room=g_strdup(hdata->room);
-    const char *args[1]={room};
-    
+    char *room = g_strdup(hdata->room);
+    const char *args[1] = { room };
+
     char *msg;
     msg = g_strdup_printf("Hammering into room %s", hdata->room);
     hdata->cancel_dialog =
-        gaim_request_action(hdata->gaym->account->gc, _("Cancel Hammer"), msg,
-                            NULL, 0, hdata, 1, ("Cancel"), hammer_stop_cb);
-    g_hash_table_insert(hdata->gaym->hammers, g_strdup(hdata->room), hdata);
+        gaim_request_action(hdata->gaym->account->gc, _("Cancel Hammer"),
+                            msg, NULL, 0, hdata, 1, ("Cancel"),
+                            hammer_stop_cb);
+    g_hash_table_insert(hdata->gaym->hammers, g_strdup(hdata->room),
+                        hdata);
     gaym_cmd_join(hdata->gaym, NULL, NULL, args);
     if (msg)
         g_free(msg);
     if (room)
-	g_free(room);
+        g_free(room);
 }
 void gaym_msg_chanfull(struct gaym_conn *gaym, const char *name,
                        const char *from, char **args)
@@ -1309,33 +1332,31 @@
 
     joinargs[0] = args[1];
 
-    gpointer unused=NULL;
-    gpointer data=NULL;
-    gboolean hammering=g_hash_table_lookup_extended
-	(gaym->hammers,args[1],&unused, &data);
+    gpointer unused = NULL;
+    gpointer data = NULL;
+    gboolean hammering = g_hash_table_lookup_extended
+        (gaym->hammers, args[1], &unused, &data);
 
-    if(hammering && data) {
-        //Add delay here?
-	gaym_cmd_join(gaym, NULL, NULL, joinargs);
-    }
-    else if(hammering && !data) { //hammer was cancelled.
-	    gaim_debug_misc("gaym","HAMMER CANCELLED ON FULL MESSAGE\n");
-	g_hash_table_remove(gaym->hammers, args[1]);
-    }
-    else {
+    if (hammering && data) {
+        // Add delay here?
+        gaym_cmd_join(gaym, NULL, NULL, joinargs);
+    } else if (hammering && !data) {    // hammer was cancelled.
+        gaim_debug_misc("gaym", "HAMMER CANCELLED ON FULL MESSAGE\n");
+        g_hash_table_remove(gaym->hammers, args[1]);
+    } else {
         buf =
             g_strdup_printf("%s is full. Do you want to keep trying?",
                             args[1]);
-	struct hammer_cb_data* hdata = g_new0(struct hammer_cb_data, 1);
-	hdata->gaym=gaym;
-	hdata->room=g_strdup(args[1]);
-	hdata->cancel_dialog=NULL;
+        struct hammer_cb_data *hdata = g_new0(struct hammer_cb_data, 1);
+        hdata->gaym = gaym;
+        hdata->room = g_strdup(args[1]);
+        hdata->cancel_dialog = NULL;
         gaim_request_yes_no(gc, _("Room Full"), _("Room Full"), buf, 0,
                             hdata, hammer_cb_yes, hammer_cb_no);
 
         g_free(buf);
     }
-	
+
 }
 
 void gaym_msg_create_pay_only(struct gaym_conn *gaym, const char *name,

Modified: qrc/trunk/gaym-extras/src/bio-popups.c
===================================================================
--- qrc/trunk/gaym-extras/src/bio-popups.c	2005-08-01 14:49:41 UTC (rev 266)
+++ qrc/trunk/gaym-extras/src/bio-popups.c	2005-08-02 06:42:09 UTC (rev 267)
@@ -96,7 +96,7 @@
         gdir = g_dir_open(dirname, 0, &err);
         if (gdir) {
             filename = g_dir_read_name(gdir);   // don't free filename:
-                                                // owned by glib.
+            // owned by glib.
             if (filename) {
                 path = g_build_filename(dirname, filename, NULL);
                 if (path)

Modified: qrc/trunk/gaym-extras/src/chaticon.c
===================================================================
--- qrc/trunk/gaym-extras/src/chaticon.c	2005-08-01 14:49:41 UTC (rev 266)
+++ qrc/trunk/gaym-extras/src/chaticon.c	2005-08-02 06:42:09 UTC (rev 267)
@@ -1,33 +1,6 @@
 #include "gaym-extras.h"
 GHashTable *icons;
-void get_icon_scale_size(GdkPixbuf * icon, GaimBuddyIconSpec * spec,
-                         int *width, int *height)
-{
-    *width = gdk_pixbuf_get_width(icon);
-    *height = gdk_pixbuf_get_height(icon);
-    gaim_debug_misc("popups", "current: w: %i, h: %i\n", *width, *height);
-    /* this should eventually get smarter about preserving the aspect
-       ratio when scaling, but gimmie a break, I just woke up */
-    if (spec && spec->scale_rules & GAIM_ICON_SCALE_DISPLAY) {
-        if (*width < spec->min_width)
-            *width = spec->min_width;
-        else if (*width > spec->max_width)
-            *width = spec->max_width;
 
-        if (*height < spec->min_height)
-            *height = spec->min_height;
-        else if (*height > spec->max_height)
-            *height = spec->max_height;
-    }
-
-    /* and now for some arbitrary sanity checks */
-    if (*width > 100)
-        *width = 100;
-    if (*height > 100)
-        *height = 100;
-    gaim_debug_misc("popups", "scaled: w: %i, h: %i\n", *width, *height);
-}
-
 void gaym_update_thumbnail(GaimConversation * conv, GdkPixbuf * pixbuf)
 {
     GaimGtkConversation *gtkconv;
@@ -70,6 +43,7 @@
     // double
     // aspect=(double)gdk_pixbuf_get_width(pixbuf)/(double)gdk_pixbuf_get_height(pixbuf); 
     // 
+    // 
 
     scale =
         gdk_pixbuf_scale_simple(pixbuf,
@@ -194,52 +168,57 @@
 
 }
 
-void chaticon_replace(GaimConversation* conv, const char* name, GaimConvChatBuddyFlags flags) {
+void chaticon_replace(GaimConversation * conv, const char *name,
+                      GaimConvChatBuddyFlags flags)
+{
     GaimGtkConversation *gtkconv = GAIM_GTK_CONVERSATION(conv);
     GaimGtkChatPane *gtkchat = gtkconv->u.chat;
     gboolean valid;
     GtkTreeIter iter;
-    int row_count=0;
-    GtkTreeModel *list_store=gtk_tree_view_get_model(GTK_TREE_VIEW(gtkchat->list));
-   /* Get the first iter in the list */
-  valid = gtk_tree_model_get_iter_first (list_store, &iter);
+    int row_count = 0;
+    GtkTreeModel *list_store =
+        gtk_tree_view_get_model(GTK_TREE_VIEW(gtkchat->list));
+    /* Get the first iter in the list */
+    valid = gtk_tree_model_get_iter_first(list_store, &iter);
 
-  while (valid)
-    {
-      /* Walk through the list, reading each row */
-      gchar *str_data;
+    while (valid) {
+        /* Walk through the list, reading each row */
+        gchar *str_data;
 
-      /* Make sure you terminate calls to gtk_tree_model_get()
-       * with a '-1' value
-       */
-      gtk_tree_model_get (list_store, &iter, 
-                          CHAT_USERS_NAME_COLUMN, &str_data,
-                          -1);
+        /* Make sure you terminate calls to gtk_tree_model_get() with a
+           '-1' value */
+        gtk_tree_model_get(list_store, &iter,
+                           CHAT_USERS_NAME_COLUMN, &str_data, -1);
 
-      /* Do something with the data */
-      g_print ("Row %d: (%s)(%s)\n", row_count, str_data,name);
-    
-	if(!strcmp(str_data,name)) {
-	    GdkPixbuf *pixbuf=lookup_cached_thumbnail(conv->account, gaim_normalize(conv->account,name));
-	    gaim_debug_misc("chaticon","Got pixbuf: %x\n");
-	    GtkTreePath* path=gtk_tree_model_get_path(list_store, &iter);
-	    gtk_list_store_set(GTK_LIST_STORE(list_store), &iter, 0, pixbuf, -1);
+        /* Do something with the data */
+        g_print("Row %d: (%s)(%s)\n", row_count, str_data, name);
 
-	    gtk_tree_model_row_changed(list_store, path, &iter);
-	    //g_free(pixbuf);
-	    break;
-	}
-      row_count ++;
-      valid = gtk_tree_model_iter_next (list_store, &iter);
-      g_free (str_data);
-    } 
+        if (!strcmp(str_data, name)) {
+            GdkPixbuf *pixbuf =
+                lookup_cached_thumbnail(conv->account,
+                                        gaim_normalize(conv->account,
+                                                       name));
+            gaim_debug_misc("chaticon", "Got pixbuf: %x\n");
+            GtkTreePath *path = gtk_tree_model_get_path(list_store, &iter);
+            gtk_list_store_set(GTK_LIST_STORE(list_store), &iter, 0,
+                               pixbuf, -1);
 
+            gtk_tree_model_row_changed(list_store, path, &iter);
+            // g_free(pixbuf);
+            break;
+        }
+        row_count++;
+        valid = gtk_tree_model_iter_next(list_store, &iter);
+        g_free(str_data);
+    }
+
 }
-void init_chat_icons(GaimPlugin* plugin)
+void init_chat_icons(GaimPlugin * plugin)
 {
-    
- gaim_signal_connect(gaim_conversations_get_handle(), "chat-buddy-joined",
-                        plugin, GAIM_CALLBACK(chaticon_replace), NULL);
 
+    // gaim_signal_connect(gaim_conversations_get_handle(),
+    // "chat-buddy-joined",
+    // plugin, GAIM_CALLBACK(chaticon_replace), NULL);
+
     icons = g_hash_table_new(g_direct_hash, g_direct_equal);
 }

Modified: qrc/trunk/gaym-extras/src/chatsort.c
===================================================================
--- qrc/trunk/gaym-extras/src/chatsort.c	2005-08-01 14:49:41 UTC (rev 266)
+++ qrc/trunk/gaym-extras/src/chatsort.c	2005-08-02 06:42:09 UTC (rev 267)
@@ -111,6 +111,7 @@
     gtk_widget_destroy(button);
     button = GTK_WIDGET(gaim_gtkconv_button_new(order[current].icon, NULL,      // _("E"), 
                                                                                 // 
+                                                // 
                                                 order[current].tooltip,
                                                 gtkconv->tooltips,
                                                 change_sort_order,

Modified: qrc/trunk/gaym-extras/src/gaym-extras.c
===================================================================
--- qrc/trunk/gaym-extras/src/gaym-extras.c	2005-08-01 14:49:41 UTC (rev 266)
+++ qrc/trunk/gaym-extras/src/gaym-extras.c	2005-08-02 06:42:09 UTC (rev 267)
@@ -1,13 +1,53 @@
 /* Show icons in chat room windows */
 
-//Messy.
+// Messy.
 #include "gaym-extras.h"
 #ifdef _WIN32
 #include "win32/win32dep.h"
 #else
 #define DATADIR GAIM_DATADIR
 #endif
+void get_icon_scale_size(GdkPixbuf * icon, GaimBuddyIconSpec * spec,
+                         int *width, int *height)
+{
+    *width = gdk_pixbuf_get_width(icon);
+    *height = gdk_pixbuf_get_height(icon);
+    gaim_debug_misc("popups", "current: w: %i, h: %i\n", *width, *height);
+    /* this should eventually get smarter about preserving the aspect
+       ratio when scaling, but gimmie a break, I just woke up */
+    if (spec && spec->scale_rules & GAIM_ICON_SCALE_DISPLAY) {
+        float spec_aspect =
+            (float) spec->max_width / (float) spec->max_height;
+        float icon_aspect = (float) (*width) / (float) (*height);
+
+        // icon will hit borders horizontally first
+        if (icon_aspect > spec_aspect) {
+            float width_ratio =
+                (float) (*width) / (float) (spec->max_width);
+            *height = (float) (*height) / width_ratio;
+            *width = spec->max_width;
+        }
+        if (icon_aspect < spec_aspect) {
+            float height_ratio =
+                (float) (*height) / (float) (spec->max_height);
+            *width = (float) (*width) / height_ratio;
+            *height = spec->max_height;
+        }
+
+
+
+    }
+
+    /* and now for some arbitrary sanity checks */
+    if (*width > 100)
+        *width = 100;
+    if (*height > 100)
+        *height = 100;
+    gaim_debug_misc("popups", "scaled: w: %i, h: %i\n", *width, *height);
+}
+
 // Adds motion handlers to IM tab labels.
+
 static void redo_im_window(GaimConversation * c)
 {
     if (!g_strrstr(gaim_account_get_protocol_id(c->account), "prpl-gaym"))
@@ -113,7 +153,7 @@
     gaim_prefs_add_none("/plugins/gaym-extras/silly");
 
     extras_register_stock();
-    
+
     return TRUE;
 }
 
@@ -125,10 +165,12 @@
     frame = gaim_plugin_pref_frame_new();
 
     ppref =
-        gaim_plugin_pref_new_with_name_and_label("/plugins/gaym-extras/silly",_("Do you really want to turn any of this off? ;-)"));
+        gaim_plugin_pref_new_with_name_and_label
+        ("/plugins/gaym-extras/silly",
+         _("Do you really want to turn any of this off? ;-)"));
     gaim_plugin_pref_frame_add(frame, ppref);
 
-      return frame;
+    return frame;
 }
 static GaimPluginUiInfo prefs_info = {
     get_plugin_pref_frame

Modified: qrc/trunk/gaym-extras/src/gaym-extras.h
===================================================================
--- qrc/trunk/gaym-extras/src/gaym-extras.h	2005-08-01 14:49:41 UTC (rev 266)
+++ qrc/trunk/gaym-extras/src/gaym-extras.h	2005-08-02 06:42:09 UTC (rev 267)
@@ -71,9 +71,9 @@
 void add_chat_popup_stuff(GaimConversation * c);
 void add_chat_sort_functions(GaimConversation * c);
 void add_im_popup_stuff(GaimConversation * c);
-void init_chat_icons(GaimPlugin* plugin);
+void init_chat_icons(GaimPlugin * plugin);
 void init_popups();
-void init_roombrowse(GaimPlugin* plugin);
+void init_roombrowse(GaimPlugin * plugin);
 
 
 static struct StockIcon {

Modified: qrc/trunk/gaym-extras/src/roombrowse.c
===================================================================
--- qrc/trunk/gaym-extras/src/roombrowse.c	2005-08-01 14:49:41 UTC (rev 266)
+++ qrc/trunk/gaym-extras/src/roombrowse.c	2005-08-02 06:42:09 UTC (rev 267)
@@ -45,154 +45,381 @@
 };
 
 struct update_cb_data {
-    GaimConnection* gc;
-    const char* room;
+    GaimConnection *gc;
+    const char *room;
 };
 
 typedef struct RoomBrowseGui {
-    GtkWidget* window;
-    GtkWidget* button;
-    GtkWidget* list;
-    GtkTreeModel* model;
-    GtkWidget* label;
+    GtkWidget *window;
+    GtkWidget *button;
+    GtkWidget *list;
+    GtkTreeModel *model;
+    GtkWidget *label;
     GtkTreeIter iter;
-    GaimConnection* gc;
+    GaimConnection *gc;
 } RoomBrowseGui;
 
-void roombrowse_add_info(gpointer data, RoomBrowseGui* browser) {
+void roombrowse_add_info(gpointer data, RoomBrowseGui * browser)
+{
     /* Add a new row to the model */
-    GaymBuddy* member=(GaymBuddy*)data;
-    char* sync="Y";
-    if(!member->name || !member->prefix)
-	return;
-    if(strncmp(member->name, member->prefix, (MIN(strlen(member->name),strlen(member->prefix))-1))) 
-    {
-	    sync="N";
+    GaymBuddy *member = (GaymBuddy *) data;
+    GaimPluginProtocolInfo *prpl_info = NULL;
+    int scale_width = 0, scale_height = 0;
+    char *sync = "Y";
+    if (!member->name || !member->prefix)
+        return;
+    if (strncmp
+        (member->name, member->prefix,
+         (MIN(strlen(member->name), strlen(member->prefix)) - 1))) {
+        sync = "N";
     }
-    GString* info=g_string_new("");
-    if(member->age)
-	g_string_append_printf(info, "\nAge: %s", member->age); 
-    if(member->location)
-	g_string_append_printf(info, "\nLocation: %s", member->location); 
-    if(member->bio)
-	g_string_append_printf(info, "\nInfo: %s", member->bio); 
+    GString *info = g_string_new("");
+    if (member->age)
+        g_string_append_printf(info, "\nAge: %s", member->age);
+    if (member->location)
+        g_string_append_printf(info, "\nLocation: %s", member->location);
+    if (member->bio)
+        g_string_append_printf(info, "\nInfo: %s", member->bio);
     g_string_erase(info, 0, 1);
-    char* infoc=g_string_free(info, FALSE);
-    gtk_list_store_append (GTK_LIST_STORE(browser->model), &browser->iter);
-    if(member->thumbnail) {
+    char *infoc = g_string_free(info, FALSE);
+    gtk_list_store_append(GTK_LIST_STORE(browser->model), &browser->iter);
+    if (member->thumbnail) {
 
-	GdkPixbuf *pixbuf=lookup_cached_thumbnail(	browser->gc->account, 
-						gaim_normalize(browser->gc->account,member->name));
-        gtk_list_store_set(GTK_LIST_STORE(browser->model), &browser->iter, COLUMN_PHOTO, pixbuf, -1);
+        GdkPixbuf *pixbuf = lookup_cached_thumbnail(browser->gc->account,
+                                                    gaim_normalize
+                                                    (browser->gc->account,
+                                                     member->name));
 
+        if (browser->gc)
+            prpl_info = GAIM_PLUGIN_PROTOCOL_INFO(browser->gc->prpl);
+        get_icon_scale_size(pixbuf,
+                            prpl_info ? &prpl_info->icon_spec : NULL,
+                            &scale_width, &scale_height);
+
+        GdkPixbuf *scale = gdk_pixbuf_scale_simple(pixbuf,
+                                                   scale_width,
+                                                   scale_height,
+                                                   GDK_INTERP_BILINEAR);
+        g_object_unref(pixbuf);
+        gtk_list_store_set(GTK_LIST_STORE(browser->model), &browser->iter,
+                           COLUMN_PHOTO, scale, -1);
+
     }
-    gtk_list_store_set (GTK_LIST_STORE(browser->model), &browser->iter,
-			    COLUMN_SYNC, sync,
-                          COLUMN_NAME, member->name, 
-			  COLUMN_PREFIX, member->prefix,
-			  COLUMN_INFO, infoc,
-			  -1);
+    gtk_list_store_set(GTK_LIST_STORE(browser->model), &browser->iter,
+                       COLUMN_SYNC, sync,
+                       COLUMN_NAME, member->name,
+                       COLUMN_PREFIX, member->prefix,
+                       COLUMN_INFO, infoc, -1);
 
 
 }
-void roombrowse_update_list(GaimAccount* account, GaymNamelist* namelist) {
 
+void roombrowse_update_list(GaimAccount * account, GaymNamelist * namelist)
+{
+
     g_return_if_fail(namelist);
-    gaim_debug_misc("roombrowse","update_list from namelist at %x\n",namelist);
-    
-    RoomBrowseGui* browser=g_hash_table_lookup(browsers, namelist->roomname);
-    if(!browser && namelist->roomname) {
-	gaim_debug_misc("roombrowse","No browser found for %s\n",namelist->roomname);
+    gaim_debug_misc("roombrowse", "update_list from namelist at %x\n",
+                    namelist);
+
+    RoomBrowseGui *browser =
+        g_hash_table_lookup(browsers, namelist->roomname);
+    if (!browser && namelist->roomname) {
+        gaim_debug_misc("roombrowse", "No browser found for %s\n",
+                        namelist->roomname);
     }
     gtk_list_store_clear(GTK_LIST_STORE(browser->model));
-    g_slist_foreach(namelist->members, (GFunc)roombrowse_add_info, browser);
-    
+    g_slist_foreach(namelist->members, (GFunc) roombrowse_add_info,
+                    browser);
+
 }
-gboolean update_list(GtkWidget* button, gpointer data) {
-    
-    gaim_debug_misc("roombrowse","Doing list update!\n");
-    struct update_cb_data* udata=(struct update_cb_data*)data;
-    
-    //gaym_get_room_namelist(udata->room, udata->gc->proto_data);
-    gaim_signal_emit(gaim_accounts_get_handle(), "request-namelist", udata->gc->account, udata->room);
+
+gboolean update_list(GtkWidget * button, gpointer data)
+{
+
+    gaim_debug_misc("roombrowse", "Doing list update!\n");
+    struct update_cb_data *udata = (struct update_cb_data *) data;
+
+    // gaym_get_room_namelist(udata->room, udata->gc->proto_data);
+    gaim_signal_emit(gaim_accounts_get_handle(), "request-namelist",
+                     udata->gc->account, udata->room);
     return TRUE;
 }
+
+static void chat_do_im(RoomBrowseGui * browser, const char *who)
+{
+    GaimPluginProtocolInfo *prpl_info = NULL;
+    GaimConversation *conv;
+
+
+    if (browser->gc->account && browser->gc)
+        prpl_info = GAIM_PLUGIN_PROTOCOL_INFO(browser->gc->prpl);
+
+    conv = gaim_find_conversation_with_account(who, browser->gc->account);
+
+    if (conv != NULL)
+        gaim_conv_window_show(gaim_conversation_get_window(conv));
+    else
+        conv =
+            gaim_conversation_new(GAIM_CONV_IM, browser->gc->account, who);
+
+}
+static void chat_do_info(RoomBrowseGui * browser, const char *who)
+{
+    GaimPluginProtocolInfo *prpl_info = NULL;
+    GaimConnection *gc = browser->gc;
+
+    if (gc) {
+        prpl_info = GAIM_PLUGIN_PROTOCOL_INFO(gc->prpl);
+
+        prpl_info->get_info(gc, who);
+    }
+}
+
+static void menu_chat_im_cb(GtkWidget * w, RoomBrowseGui * browser)
+{
+    const char *who = g_object_get_data(G_OBJECT(w), "user_data");
+
+    chat_do_im(browser, who);
+}
+
+static void menu_chat_info_cb(GtkWidget * w, RoomBrowseGui * browser)
+{
+    char *who;
+
+    who = g_object_get_data(G_OBJECT(w), "user_data");
+
+    chat_do_info(browser, who);
+}
+
+// Right out of gtkconv.c, with a bunc removed.
+static GtkWidget *create_chat_menu(RoomBrowseGui * browser,
+                                   const char *who,
+                                   GaimPluginProtocolInfo * prpl_info,
+                                   GaimConnection * gc)
+{
+    static GtkWidget *menu = NULL;
+    GtkWidget *button;
+
+    /* 
+     * If a menu already exists, destroy it before creating a new one,
+     * thus freeing-up the memory it occupied.
+     */
+    if (menu)
+        gtk_widget_destroy(menu);
+
+    menu = gtk_menu_new();
+
+    if (gc && (prpl_info->get_info || prpl_info->get_cb_info)) {
+        button = gtk_menu_item_new_with_label(_("Info"));
+        g_signal_connect(G_OBJECT(button), "activate",
+                         G_CALLBACK(menu_chat_info_cb), browser);
+        g_object_set_data_full(G_OBJECT(button), "user_data",
+                               g_strdup(who), g_free);
+        gtk_menu_shell_append(GTK_MENU_SHELL(menu), button);
+        gtk_widget_show(button);
+    }
+
+
+    button = gtk_menu_item_new_with_label(_("IM"));
+    g_signal_connect(G_OBJECT(button), "activate",
+                     G_CALLBACK(menu_chat_im_cb), browser);
+    g_object_set_data_full(G_OBJECT(button), "user_data", g_strdup(who),
+                           g_free);
+    gtk_menu_shell_append(GTK_MENU_SHELL(menu), button);
+    gtk_widget_show(button);
+
+
+    return menu;
+}
+
+
+
+
+
+// Right out of gtkconv.c
+static gint chat_popup_menu_cb(GtkWidget * widget, RoomBrowseGui * browser)
+{
+    GaimPluginProtocolInfo *prpl_info = NULL;
+    GaimConnection *gc;
+    GtkTreeSelection *sel;
+    GtkTreeIter iter;
+    GtkTreeModel *model;
+    GtkWidget *menu;
+    gchar *who;
+
+    gc = browser->gc;
+
+    model = gtk_tree_view_get_model(GTK_TREE_VIEW(browser->list));
+
+    if (gc != NULL)
+        prpl_info = GAIM_PLUGIN_PROTOCOL_INFO(gc->prpl);
+
+    sel = gtk_tree_view_get_selection(GTK_TREE_VIEW(browser->list));
+    if (!gtk_tree_selection_get_selected(sel, NULL, &iter))
+        return FALSE;
+
+    gtk_tree_model_get(GTK_TREE_MODEL(model), &iter, COLUMN_NAME, &who,
+                       -1);
+    menu = create_chat_menu(browser, who, prpl_info, gc);
+    gtk_menu_popup(GTK_MENU(menu), NULL, NULL,
+                   gaim_gtk_treeview_popup_menu_position_func, widget,
+                   0, GDK_CURRENT_TIME);
+    g_free(who);
+
+    return TRUE;
+}
+
+// Right out of gtkconv.c
+static gint
+click_cb(GtkWidget * widget, GdkEventButton * event,
+         RoomBrowseGui * browser)
+{
+    GaimPluginProtocolInfo *prpl_info = NULL;
+    GaimConnection *gc;
+    GtkTreePath *path;
+    GtkTreeIter iter;
+    GtkTreeModel *model;
+    GtkTreeViewColumn *column;
+    gchar *who;
+    int x, y;
+
+    gc = browser->gc;
+
+    model = gtk_tree_view_get_model(GTK_TREE_VIEW(browser->list));
+
+    gtk_tree_view_get_path_at_pos(GTK_TREE_VIEW(browser->list),
+                                  event->x, event->y, &path, &column, &x,
+                                  &y);
+
+    if (path == NULL)
+        return FALSE;
+
+    if (gc != NULL)
+        prpl_info = GAIM_PLUGIN_PROTOCOL_INFO(gc->prpl);
+
+    gtk_tree_selection_select_path(GTK_TREE_SELECTION
+                                   (gtk_tree_view_get_selection
+                                    (GTK_TREE_VIEW(browser->list))), path);
+
+    gtk_tree_model_get_iter(GTK_TREE_MODEL(model), &iter, path);
+    gtk_tree_model_get(GTK_TREE_MODEL(model), &iter, COLUMN_NAME, &who,
+                       -1);
+
+    if (event->button == 1 && event->type == GDK_2BUTTON_PRESS) {
+        chat_do_im(browser, who);
+    } else if (event->button == 3 && event->type == GDK_BUTTON_PRESS) {
+        GtkWidget *menu = create_chat_menu(browser, who, prpl_info, gc);
+        gtk_menu_popup(GTK_MENU(menu), NULL, NULL, NULL, NULL,
+                       event->button, event->time);
+    }
+
+    g_free(who);
+    gtk_tree_path_free(path);
+
+    return TRUE;
+}
+
+
 static void roombrowse_menu_cb(GaimBlistNode * node, gpointer data)
 {
-    RoomBrowseGui* browser=g_new0(RoomBrowseGui, 1);
-    GaimConnection* gc=(GaimConnection*)data;
-    browser->window=gtk_window_new(GTK_WINDOW_TOPLEVEL);
-   
-    browser->gc=gc;
-    //GaimAccount *account = ((GaimChat *) node)->account;
-    //if (!win)
-    //    win = gaim_conv_window_new();
+    RoomBrowseGui *browser = g_new0(RoomBrowseGui, 1);
+    GaimConnection *gc = (GaimConnection *) data;
+    browser->window = gtk_window_new(GTK_WINDOW_TOPLEVEL);
+
+    browser->gc = gc;
+    // GaimAccount *account = ((GaimChat *) node)->account;
+    // if (!win)
+    // win = gaim_conv_window_new();
     GaimChat *chat = ((GaimChat *) node);
-    
-    const char* room = gaim_chat_get_name(chat);
-    const char* channel = g_hash_table_lookup(chat->components, "channel");
-    gaim_debug_misc("roombrowse","chat name: %s\n",room);
-    gaim_debug_misc("roombrowse","channel name: %s\n",channel);
+
+    const char *room = gaim_chat_get_name(chat);
+    const char *channel = g_hash_table_lookup(chat->components, "channel");
+    gaim_debug_misc("roombrowse", "chat name: %s\n", room);
+    gaim_debug_misc("roombrowse", "channel name: %s\n", channel);
     gtk_window_set_title(GTK_WINDOW(browser->window), room);
-    
-    GtkWidget* vbox=gtk_vbox_new(FALSE, 6);
+
+    GtkWidget *vbox = gtk_vbox_new(FALSE, 6);
     gtk_container_add(GTK_CONTAINER(browser->window), vbox);
     gtk_widget_show(vbox);
-    
-    browser->label=gtk_label_new(room);
-    gtk_box_pack_start(GTK_BOX(vbox),browser->label, FALSE, FALSE, 0);
+
+    browser->label = gtk_label_new(room);
+    gtk_box_pack_start(GTK_BOX(vbox), browser->label, FALSE, FALSE, 0);
     gtk_widget_show(browser->label);
-    GtkWidget* sw=gtk_scrolled_window_new(NULL, NULL);
+    GtkWidget *sw = gtk_scrolled_window_new(NULL, NULL);
     gtk_box_pack_start(GTK_BOX(vbox), sw, TRUE, TRUE, 0);
-    gtk_widget_set_size_request(GTK_WIDGET(sw), 100, 200);
+    gtk_widget_set_size_request(GTK_WIDGET(sw), 400, 600);
     gtk_widget_show(sw);
 
-    GtkListStore* ls=gtk_list_store_new(N_COLUMNS,
-					GDK_TYPE_PIXBUF,
-					G_TYPE_STRING,
-					G_TYPE_STRING, 
-					G_TYPE_STRING, 
-					G_TYPE_STRING);
-    browser->model=GTK_TREE_MODEL(ls);
-        
-    browser->list=gtk_tree_view_new_with_model(GTK_TREE_MODEL(ls));
-    //gtk_tree_view_set_headers_visible(GTK_TREE_VIEW(browser->list), FALSE); 
-    GtkCellRenderer* rend;
-    GtkTreeViewColumn* col;
-    gtk_tree_view_set_rules_hint(GTK_TREE_VIEW(browser->list), TRUE); 
-    rend=gtk_cell_renderer_pixbuf_new();
-    col=gtk_tree_view_column_new_with_attributes("Photo", rend, "pixbuf", COLUMN_PHOTO, NULL);
+    GtkListStore *ls = gtk_list_store_new(N_COLUMNS,
+                                          GDK_TYPE_PIXBUF,
+                                          G_TYPE_STRING,
+                                          G_TYPE_STRING,
+                                          G_TYPE_STRING,
+                                          G_TYPE_STRING);
+    browser->model = GTK_TREE_MODEL(ls);
+
+    browser->list = gtk_tree_view_new_with_model(GTK_TREE_MODEL(ls));
+    // gtk_tree_view_set_fixed_height_mode(GTK_TREE_VIEW(browser->list),
+    // TRUE);
+    // gtk_tree_view_set_headers_visible(GTK_TREE_VIEW(browser->list),
+    // FALSE); 
+    GtkCellRenderer *rend;
+    GtkTreeViewColumn *col;
+    gtk_tree_view_set_rules_hint(GTK_TREE_VIEW(browser->list), TRUE);
+    rend = gtk_cell_renderer_pixbuf_new();
+    gtk_cell_renderer_set_fixed_size(rend, -1, 80);
+    col =
+        gtk_tree_view_column_new_with_attributes("Photo", rend, "pixbuf",
+                                                 COLUMN_PHOTO, NULL);
     gtk_tree_view_append_column(GTK_TREE_VIEW(browser->list), col);
 
-    rend=gtk_cell_renderer_text_new();
-    col=gtk_tree_view_column_new_with_attributes("?", rend, "text", COLUMN_SYNC, NULL);
+    rend = gtk_cell_renderer_text_new();
+    gtk_cell_renderer_set_fixed_size(rend, -1, 80);
+    col =
+        gtk_tree_view_column_new_with_attributes("?", rend, "text",
+                                                 COLUMN_SYNC, NULL);
     gtk_tree_view_append_column(GTK_TREE_VIEW(browser->list), col);
 
 
-    rend=gtk_cell_renderer_text_new();
-    col=gtk_tree_view_column_new_with_attributes("Name", rend, "text", COLUMN_NAME, NULL);
+    rend = gtk_cell_renderer_text_new();
+    gtk_cell_renderer_set_fixed_size(rend, -1, 80);
+    col =
+        gtk_tree_view_column_new_with_attributes("Name", rend, "text",
+                                                 COLUMN_NAME, NULL);
     gtk_tree_view_append_column(GTK_TREE_VIEW(browser->list), col);
-  
-    rend=gtk_cell_renderer_text_new();
-    col=gtk_tree_view_column_new_with_attributes("Pref", rend, "text", COLUMN_PREFIX, NULL);
+
+    rend = gtk_cell_renderer_text_new();
+    gtk_cell_renderer_set_fixed_size(rend, -1, 80);
+    col =
+        gtk_tree_view_column_new_with_attributes("Pref", rend, "text",
+                                                 COLUMN_PREFIX, NULL);
     gtk_tree_view_append_column(GTK_TREE_VIEW(browser->list), col);
 
 
-    rend=gtk_cell_renderer_text_new();
-    col=gtk_tree_view_column_new_with_attributes("Info", rend, "text", COLUMN_INFO, NULL);
+    rend = gtk_cell_renderer_text_new();
+    gtk_cell_renderer_set_fixed_size(rend, -1, 80);
+    col =
+        gtk_tree_view_column_new_with_attributes("Info", rend, "text",
+                                                 COLUMN_INFO, NULL);
     gtk_tree_view_append_column(GTK_TREE_VIEW(browser->list), col);
 
+    g_signal_connect(G_OBJECT(browser->list), "button_press_event",
+                     G_CALLBACK(click_cb), browser);
+    g_signal_connect(G_OBJECT(browser->list), "popup-menu",
+                     G_CALLBACK(chat_popup_menu_cb), browser);
 
+
     gtk_container_add(GTK_CONTAINER(sw), browser->list);
-    gtk_widget_show(browser->list); 
+    gtk_widget_show(browser->list);
 
-    
-    browser->button=gtk_button_new_with_label("Update");
-    struct update_cb_data* udata=g_new0(struct update_cb_data, 1);
-    udata->gc=gc;
-    udata->room=channel;
-    
-    g_signal_connect(browser->button, "clicked", G_CALLBACK(update_list), udata);
+
+    browser->button = gtk_button_new_with_label("Update");
+    struct update_cb_data *udata = g_new0(struct update_cb_data, 1);
+    udata->gc = gc;
+    udata->room = channel;
+
+    g_signal_connect(browser->button, "clicked", G_CALLBACK(update_list),
+                     udata);
     gtk_box_pack_start(GTK_BOX(vbox), browser->button, FALSE, FALSE, 0);
     gtk_widget_show(browser->button);
 
@@ -201,7 +428,7 @@
     g_hash_table_insert(browsers, g_strdup(channel), browser);
     update_list(browser->button, udata);
 }
-static void roombrowse_menu_create(GaimBlistNode * node, GList** menu)
+static void roombrowse_menu_create(GaimBlistNode * node, GList ** menu)
 {
 
     char *label;
@@ -209,24 +436,29 @@
     struct gaym_conn *gaym;
     GaimChat *chat = (GaimChat *) node;
 
-    
+
     if (node->type != GAIM_BLIST_CHAT_NODE)
         return;
 
     gaym = chat->account->gc->proto_data;
 
-    //char* room = g_strdup(g_hash_table_lookup(chat->components, "alias"));
-    gaim_debug_misc("roombrowse", "chat: %xRoom name: %s\n", chat, gaim_chat_get_name(chat));
+    // char* room = g_strdup(g_hash_table_lookup(chat->components,
+    // "alias"));
+    gaim_debug_misc("roombrowse", "chat: %xRoom name: %s\n", chat,
+                    gaim_chat_get_name(chat));
 
-    label = g_strdup_printf("Browse users in %s", gaim_chat_get_name(chat));
+    label =
+        g_strdup_printf("Browse users in %s", gaim_chat_get_name(chat));
     GaimBlistNodeAction *act = gaim_blist_node_action_new(label,
                                                           roombrowse_menu_cb,
-							  chat->account->gc);
+                                                          chat->account->
+                                                          gc);
 
     *menu = g_list_append(*menu, act);
     // g_free(label);
 }
-void init_roombrowse(GaimPlugin* plugin)
+
+void init_roombrowse(GaimPlugin * plugin)
 {
     gaim_signal_connect(gaim_blist_get_handle(),
                         "blist-node-extended-menu",
@@ -234,10 +466,12 @@
                         NULL);
 
     gaim_signal_connect(gaim_accounts_get_handle(),
-			"namelist-complete",
-			plugin, GAIM_CALLBACK(roombrowse_update_list), NULL);
-    
-    browsers=g_hash_table_new_full(g_str_hash, g_str_equal, g_free, NULL);
-    
+                        "namelist-complete",
+                        plugin, GAIM_CALLBACK(roombrowse_update_list),
+                        NULL);
+
+    browsers =
+        g_hash_table_new_full(g_str_hash, g_str_equal, g_free, NULL);
+
     return;
 }



From jblebrun at berlios.de  Tue Aug  2 08:44:36 2005
From: jblebrun at berlios.de (Jason LeBrun at BerliOS)
Date: Tue, 2 Aug 2005 08:44:36 +0200
Subject: [Qrc-svn] r268 - in qrc/tags: . release-0.9.5/gaym/src release-0.9.5/gaym-extras/src release-0.9.5/nsis
Message-ID: <200508020644.j726iaBM003917@sheep.berlios.de>

Author: jblebrun
Date: 2005-08-02 08:44:24 +0200 (Tue, 02 Aug 2005)
New Revision: 268

Added:
   qrc/tags/release-0.9.5/
   qrc/tags/release-0.9.5/gaym-extras/src/Makefile.am
   qrc/tags/release-0.9.5/gaym-extras/src/bio-popups.c
   qrc/tags/release-0.9.5/gaym-extras/src/chaticon.c
   qrc/tags/release-0.9.5/gaym-extras/src/chatsort.c
   qrc/tags/release-0.9.5/gaym-extras/src/gaym-extras.c
   qrc/tags/release-0.9.5/gaym-extras/src/gaym-extras.h
   qrc/tags/release-0.9.5/gaym-extras/src/roombrowse.c
   qrc/tags/release-0.9.5/gaym/src/cmds.c
   qrc/tags/release-0.9.5/gaym/src/gaym.c
   qrc/tags/release-0.9.5/gaym/src/gaym.h
   qrc/tags/release-0.9.5/gaym/src/gayminfo.c
   qrc/tags/release-0.9.5/gaym/src/gayminfo.h
   qrc/tags/release-0.9.5/gaym/src/helpers.c
   qrc/tags/release-0.9.5/gaym/src/msgs.c
   qrc/tags/release-0.9.5/gaym/src/weblogin.c
   qrc/tags/release-0.9.5/nsis/installer.nsi
Removed:
   qrc/tags/release-0.9.5/gaym-extras/src/Makefile.am
   qrc/tags/release-0.9.5/gaym-extras/src/bio-popups.c
   qrc/tags/release-0.9.5/gaym-extras/src/chaticon.c
   qrc/tags/release-0.9.5/gaym-extras/src/chatsort.c
   qrc/tags/release-0.9.5/gaym-extras/src/gaym-extras.c
   qrc/tags/release-0.9.5/gaym-extras/src/gaym-extras.h
   qrc/tags/release-0.9.5/gaym-extras/src/roombrowse.c
   qrc/tags/release-0.9.5/gaym/src/cmds.c
   qrc/tags/release-0.9.5/gaym/src/gaym.c
   qrc/tags/release-0.9.5/gaym/src/gaym.h
   qrc/tags/release-0.9.5/gaym/src/gayminfo.c
   qrc/tags/release-0.9.5/gaym/src/gayminfo.h
   qrc/tags/release-0.9.5/gaym/src/helpers.c
   qrc/tags/release-0.9.5/gaym/src/msgs.c
   qrc/tags/release-0.9.5/gaym/src/weblogin.c
   qrc/tags/release-0.9.5/nsis/installer.nsi
Log:
Tagging this revision as a potential release



Copied: qrc/tags/release-0.9.5 (from rev 259, qrc/trunk)

Deleted: qrc/tags/release-0.9.5/gaym/src/cmds.c
===================================================================
--- qrc/trunk/gaym/src/cmds.c	2005-07-30 22:19:23 UTC (rev 259)
+++ qrc/tags/release-0.9.5/gaym/src/cmds.c	2005-08-02 06:44:24 UTC (rev 268)
@@ -1,616 +0,0 @@
-/**
- * @file cmds.c
- * 
- * gaim
- *
- * Copyright (C) 2003, Ethan Blanton <eblanton at cs.purdue.edu>
- * 
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
- */
-
-#include "internal.h"
-
-#include "conversation.h"
-#include "debug.h"
-#include "notify.h"
-#include "util.h"
-#include "helpers.h"
-#include "gaym.h"
-
-
-
-static void gaym_do_mode(struct gaym_conn *gaym, const char *target,
-                         const char *sign, char **ops);
-
-int gaym_cmd_default(struct gaym_conn *gaym, const char *cmd,
-                     const char *target, const char **args)
-{
-    GaimConversation *convo =
-        gaim_find_conversation_with_account(target, gaym->account);
-    char *buf;
-
-    if (!convo)
-        return 1;
-
-    buf = g_strdup_printf(_("Unknown command: %s"), cmd);
-    if (gaim_conversation_get_type(convo) == GAIM_CONV_IM)
-        gaim_conv_im_write(GAIM_CONV_IM(convo), "", buf,
-                           GAIM_MESSAGE_SYSTEM | GAIM_MESSAGE_NO_LOG,
-                           time(NULL));
-    else
-        gaim_conv_chat_write(GAIM_CONV_CHAT(convo), "", buf,
-                             GAIM_MESSAGE_SYSTEM | GAIM_MESSAGE_NO_LOG,
-                             time(NULL));
-    g_free(buf);
-
-    return 1;
-}
-
-int gaym_cmd_away(struct gaym_conn *gaym, const char *cmd,
-                  const char *target, const char **args)
-{
-    char *buf, *message, *cur;
-
-    if (args[0] && strcmp(cmd, "back")) {
-        message = strdup(args[0]);
-        for (cur = message; *cur; cur++) {
-            if (*cur == '\n')
-                *cur = ' ';
-        }
-        buf = gaym_format(gaym, "v:", "AWAY", message);
-        g_free(message);
-    } else {
-        buf = gaym_format(gaym, "v", "AWAY");
-    }
-    gaym_send(gaym, buf);
-    g_free(buf);
-
-    return 0;
-}
-
-int gaym_cmd_ctcp_action(struct gaym_conn *gaym, const char *cmd,
-                         const char *target, const char **args)
-{
-    GaimConnection *gc = gaim_account_get_connection(gaym->account);
-    char *action, *dst, **newargs;
-    const char *src;
-    GaimConversation *convo;
-
-    if (!args || !args[0] || !gc)
-        return 0;
-
-    action = g_malloc(strlen(args[0]) + 10);
-
-    sprintf(action, "\001ACTION ");
-
-    src = args[0];
-    dst = action + 8;
-    while (*src) {
-        if (*src == '\n') {
-            if (*(src + 1) == '\0') {
-                break;
-            } else {
-                *dst++ = ' ';
-                src++;
-                continue;
-            }
-        }
-        *dst++ = *src++;
-    }
-    *dst++ = '\001';
-    *dst = '\0';
-
-    newargs = g_new0(char *, 2);
-    newargs[0] = g_strdup(target);
-    newargs[1] = action;
-    gaym_cmd_privmsg(gaym, cmd, target, (const char **) newargs);
-    g_free(newargs[0]);
-    g_free(newargs[1]);
-    g_free(newargs);
-
-    convo = gaim_find_conversation_with_account(target, gaym->account);
-    if (convo) {
-        action = g_strdup_printf("/me %s", args[0]);
-        if (action[strlen(action) - 1] == '\n')
-            action[strlen(action) - 1] = '\0';
-        if (gaim_conversation_get_type(convo) == GAIM_CONV_CHAT)
-            serv_got_chat_in(gc,
-                             gaim_conv_chat_get_id(GAIM_CONV_CHAT(convo)),
-                             gaim_connection_get_display_name(gc), 0,
-                             action, time(NULL));
-        else
-            gaim_conv_im_write(GAIM_CONV_IM(convo),
-                               gaim_connection_get_display_name(gc),
-                               action, 0, time(NULL));
-        g_free(action);
-    }
-
-    return 1;
-}
-
-int gaym_cmd_trace(struct gaym_conn *gaym, const char *cmd,
-                   const char *target, const char **args)
-{
-    char *buf;
-
-    buf = gaym_format(gaym, "vn", "TRACE", args[0]);
-    gaym_send(gaym, buf);
-    g_free(buf);
-
-    gaym->traceconv = g_strdup(target);
-
-    return 0;
-}
-
-int gaym_cmd_invite(struct gaym_conn *gaym, const char *cmd,
-                    const char *target, const char **args)
-{
-    char *buf;
-
-    if (!args || !args[0] || !(args[1] || target))
-        return 0;
-
-    buf =
-        gaym_format(gaym, "vnc", "INVITE", args[0],
-                    args[1] ? args[1] : target);
-    gaym_send(gaym, buf);
-    g_free(buf);
-
-    return 0;
-}
-
-int gaym_cmd_join(struct gaym_conn *gaym, const char *cmd,
-                  const char *target, const char **args)
-{
-    char *buf;
-
-    if (!args || !args[0])
-        return 0;
-
-    buf = gaym_format(gaym, "cv", "JOIN", args[0]);
-
-    gaym_send(gaym, buf);
-    g_free(buf);
-
-    return 0;
-}
-
-int gaym_cmd_kick(struct gaym_conn *gaym, const char *cmd,
-                  const char *target, const char **args)
-{
-    char *buf;
-    GaimConversation *convo;
-
-    if (!args || !args[0])
-        return 0;
-
-    convo = gaim_find_conversation_with_account(target, gaym->account);
-    if (!convo || gaim_conversation_get_type(convo) != GAIM_CONV_CHAT)
-        return 0;
-
-    if (args[1])
-        buf = gaym_format(gaym, "vcn:", "KICK", target, args[0], args[1]);
-    else
-        buf = gaym_format(gaym, "vcn", "KICK", target, args[0]);
-    gaym_send(gaym, buf);
-    g_free(buf);
-
-    return 0;
-}
-
-int gaym_cmd_list(struct gaym_conn *gaym, const char *cmd,
-                  const char *target, const char **args)
-{
-    if (args[0]) {
-        gchar *tmp = g_utf8_strdown(args[0], -1);
-        gaym->roomlist_filter = g_utf8_normalize(tmp, -1, G_NORMALIZE_ALL);
-        g_free(tmp);
-    } else {
-        gaym->roomlist_filter = NULL;
-    }
-    gaim_roomlist_show_with_account(gaym->account);
-
-    return 0;
-}
-
-int gaym_cmd_mode(struct gaym_conn *gaym, const char *cmd,
-                  const char *target, const char **args)
-{
-    GaimConnection *gc;
-    char *buf;
-
-    if (!args)
-        return 0;
-
-    if (!strcmp(cmd, "mode")) {
-        if (!args[0] && (*target == '#' || *target == '&'))
-            buf = gaym_format(gaym, "vc", "MODE", target);
-        else if (args[0] && (*args[0] == '+' || *args[0] == '-'))
-            buf = gaym_format(gaym, "vcv", "MODE", target, args[0]);
-        else if (args[0])
-            buf = gaym_format(gaym, "vv", "MODE", args[0]);
-        else
-            return 0;
-    } else if (!strcmp(cmd, "umode")) {
-        if (!args[0])
-            return 0;
-        gc = gaim_account_get_connection(gaym->account);
-        buf =
-            gaym_format(gaym, "vnv", "MODE",
-                        gaim_connection_get_display_name(gc), args[0]);
-    } else {
-        return 0;
-    }
-
-    gaym_send(gaym, buf);
-    g_free(buf);
-
-    return 0;
-}
-
-int gaym_cmd_names(struct gaym_conn *gaym, const char *cmd,
-                   const char *target, const char **args)
-{
-    char *buf;
-
-    if (!args)
-        return 0;
-
-    buf = gaym_format(gaym, "vc", "NAMES", args[0] ? args[0] : target);
-    gaym_send(gaym, buf);
-    g_free(buf);
-
-    gaym->nameconv = g_strdup(target);
-
-    return 0;
-}
-
-int gaym_cmd_nick(struct gaym_conn *gaym, const char *cmd,
-                  const char *target, const char **args)
-{
-    char *buf;
-    char *temp;
-
-    if (!args || !args[0])
-        return 0;
-
-    temp = gaym_nick_to_gcom_strdup(args[0]);
-    buf = gaym_format(gaym, "v:", "NICK", temp);
-    gaym_send(gaym, buf);
-    g_free(buf);
-    g_free(temp);
-    return 0;
-}
-
-int gaym_cmd_op(struct gaym_conn *gaym, const char *cmd,
-                const char *target, const char **args)
-{
-    char **nicks, **ops, *sign, *mode;
-    int i = 0, used = 0;
-
-    if (!args || !args[0] || !*args[0])
-        return 0;
-
-    if (!strcmp(cmd, "op")) {
-        sign = "+";
-        mode = "o";
-    } else if (!strcmp(cmd, "deop")) {
-        sign = "-";
-        mode = "o";
-    } else if (!strcmp(cmd, "voice")) {
-        sign = "+";
-        mode = "v";
-    } else if (!strcmp(cmd, "devoice")) {
-        sign = "-";
-        mode = "v";
-    } else {
-        gaim_debug(GAIM_DEBUG_ERROR, "gaym", "invalid 'op' command '%s'\n",
-                   cmd);
-        return 0;
-    }
-
-    nicks = g_strsplit(args[0], " ", -1);
-
-    for (i = 0; nicks[i]; i++)
-        /* nothing */ ;
-    ops = g_new0(char *, i * 2 + 1);
-
-    for (i = 0; nicks[i]; i++) {
-        if (!*nicks[i])
-            continue;
-        ops[used++] = mode;
-        ops[used++] = nicks[i];
-    }
-
-    gaym_do_mode(gaym, target, sign, ops);
-    g_free(ops);
-
-    return 0;
-}
-
-int gaym_cmd_part(struct gaym_conn *gaym, const char *cmd,
-                  const char *target, const char **args)
-{
-    char *buf;
-
-    if (!args)
-        return 0;
-
-    if (args[1])
-        buf =
-            gaym_format(gaym, "vc:", "PART", args[0] ? args[0] : target,
-                        args[1]);
-    else
-        buf = gaym_format(gaym, "vc", "PART", args[0] ? args[0] : target);
-    gaym_send(gaym, buf);
-    g_free(buf);
-
-    return 0;
-}
-
-int gaym_cmd_ping(struct gaym_conn *gaym, const char *cmd,
-                  const char *target, const char **args)
-{
-    char *stamp;
-    char *buf;
-
-    if (args && args[0]) {
-        if (*args[0] == '#' || *args[0] == '&')
-            return 0;
-        stamp = g_strdup_printf("\001PING %lu\001", time(NULL));
-        buf = gaym_format(gaym, "vn:", "PRIVMSG", args[0], stamp);
-        g_free(stamp);
-    } else {
-        stamp = g_strdup_printf("%s %lu", target, time(NULL));
-        buf = gaym_format(gaym, "v:", "PING", stamp);
-        g_free(stamp);
-    }
-    gaym_send(gaym, buf);
-    g_free(buf);
-
-    return 0;
-}
-
-int gaym_cmd_privmsg(struct gaym_conn *gaym, const char *cmd,
-                     const char *target, const char **args)
-{
-    const char *cur, *end;
-    char *msg, *buf, *nick;
-
-    if (!args || !args[0] || !args[1])
-        return 0;
-
-    /**
-     * Only run gaym_nick_to_gcom_strdup() against nicks,
-     * never on channels (which begin with either "#" or "&")
-     */
-    if (args[0][0] != '#' && args[0][0] != '&') {
-        nick = gaym_nick_to_gcom_strdup(args[0]);
-    } else {
-        nick = g_strdup(args[0]);
-    }
-    cur = args[1];
-    end = args[1];
-    while (*end && *cur) {
-        end = strchr(cur, '\n');
-        if (!end)
-            end = cur + strlen(cur);
-        msg = g_strndup(cur, end - cur);
-        buf = gaym_format(gaym, "vt:", "PRIVMSG", nick, msg);
-        gaym_send(gaym, buf);
-        g_free(msg);
-        g_free(buf);
-        cur = end + 1;
-    }
-    g_free(nick);
-    return 0;
-}
-
-int gaym_cmd_quit(struct gaym_conn *gaym, const char *cmd,
-                  const char *target, const char **args)
-{
-    char *buf;
-
-    if (!gaym->quitting) {
-        buf =
-            gaym_format(gaym, "v:", "QUIT",
-                        (args
-                         && args[0]) ? args[0] : "Download Gaim: "
-                        GAIM_WEBSITE);
-        gaym_send(gaym, buf);
-        g_free(buf);
-
-        gaym->quitting = TRUE;
-    }
-
-    return 0;
-}
-
-int gaym_cmd_quote(struct gaym_conn *gaym, const char *cmd,
-                   const char *target, const char **args)
-{
-    char *buf;
-
-    if (!args || !args[0])
-        return 0;
-
-    buf = gaym_format(gaym, "v", args[0]);
-    gaym_send(gaym, buf);
-    g_free(buf);
-
-    return 0;
-}
-
-int gaym_cmd_query(struct gaym_conn *gaym, const char *cmd,
-                   const char *target, const char **args)
-{
-    GaimConversation *convo;
-    GaimConnection *gc;
-
-    if (!args || !args[0])
-        return 0;
-
-    convo = gaim_conversation_new(GAIM_CONV_IM, gaym->account, args[0]);
-
-    if (args[1]) {
-        gc = gaim_account_get_connection(gaym->account);
-        gaym_cmd_privmsg(gaym, cmd, target, args);
-        gaim_conv_im_write(GAIM_CONV_IM(convo),
-                           gaim_connection_get_display_name(gc), args[1],
-                           GAIM_MESSAGE_SEND, time(NULL));
-    }
-
-    return 0;
-}
-
-int gaym_cmd_remove(struct gaym_conn *gaym, const char *cmd,
-                    const char *target, const char **args)
-{
-    char *buf;
-
-    if (!args || !args[0])
-        return 0;
-
-    if (*target != '#' && *target != '&')       /* not a channel, punt */
-        return 0;
-
-    if (args[1])
-        buf =
-            gaym_format(gaym, "vcn:", "REMOVE", target, args[0], args[1]);
-    else
-        buf = gaym_format(gaym, "vcn", "REMOVE", target, args[0]);
-    gaym_send(gaym, buf);
-    g_free(buf);
-
-    return 0;
-}
-
-int gaym_cmd_topic(struct gaym_conn *gaym, const char *cmd,
-                   const char *target, const char **args)
-{
-    char *buf;
-    const char *topic;
-    GaimConversation *convo;
-
-    if (!args)
-        return 0;
-
-    convo = gaim_find_conversation_with_account(target, gaym->account);
-    if (!convo || gaim_conversation_get_type(convo) != GAIM_CONV_CHAT)
-        return 0;
-
-    if (!args[0]) {
-        topic = gaim_conv_chat_get_topic(GAIM_CONV_CHAT(convo));
-
-        if (topic) {
-            char *tmp, *tmp2;
-            tmp = gaim_escape_html(topic);
-            tmp2 = gaim_markup_linkify(tmp);
-            buf = g_strdup_printf(_("current topic is: %s"), tmp2);
-            g_free(tmp);
-            g_free(tmp2);
-        } else
-            buf = g_strdup(_("No topic is set"));
-        gaim_conv_chat_write(GAIM_CONV_CHAT(convo), target, buf,
-                             GAIM_MESSAGE_SYSTEM | GAIM_MESSAGE_NO_LOG,
-                             time(NULL));
-        g_free(buf);
-
-        return 0;
-    }
-
-    buf = gaym_format(gaym, "vt:", "TOPIC", target, args[0]);
-    gaym_send(gaym, buf);
-    g_free(buf);
-
-    return 0;
-}
-
-int gaym_cmd_wallops(struct gaym_conn *gaym, const char *cmd,
-                     const char *target, const char **args)
-{
-    char *buf;
-
-    if (!args || !args[0])
-        return 0;
-
-    if (!strcmp(cmd, "wallops"))
-        buf = gaym_format(gaym, "v:", "WALLOPS", args[0]);
-    else if (!strcmp(cmd, "operwall"))
-        buf = gaym_format(gaym, "v:", "OPERWALL", args[0]);
-    else
-        return 0;
-
-    gaym_send(gaym, buf);
-    g_free(buf);
-
-    return 0;
-}
-
-int gaym_cmd_whois(struct gaym_conn *gaym, const char *cmd,
-                   const char *target, const char **args)
-{
-    char *buf;
-    char *converted_nick;
-    if (!args || !args[0])
-        return 0;
-
-    converted_nick = gaym_nick_to_gcom_strdup(args[0]);
-    buf = gaym_format(gaym, "vn", "WHOIS", converted_nick);
-    gaym_send(gaym, buf);
-    g_free(buf);
-    g_free(converted_nick);
-    return 0;
-}
-
-static void gaym_do_mode(struct gaym_conn *gaym, const char *target,
-                         const char *sign, char **ops)
-{
-    char *buf, mode[5];
-    int i = 0;
-
-    if (!sign)
-        return;
-
-    while (ops[i]) {
-        if (ops[i + 2] && ops[i + 4]) {
-            g_snprintf(mode, sizeof(mode), "%s%s%s%s", sign,
-                       ops[i], ops[i + 2], ops[i + 4]);
-            buf = gaym_format(gaym, "vcvnnn", "MODE", target, mode,
-                              ops[i + 1], ops[i + 3], ops[i + 5]);
-            i += 6;
-        } else if (ops[i + 2]) {
-            g_snprintf(mode, sizeof(mode), "%s%s%s",
-                       sign, ops[i], ops[i + 2]);
-            buf = gaym_format(gaym, "vcvnn", "MODE", target, mode,
-                              ops[i + 1], ops[i + 3]);
-            i += 4;
-        } else {
-            g_snprintf(mode, sizeof(mode), "%s%s", sign, ops[i]);
-            buf =
-                gaym_format(gaym, "vcvn", "MODE", target, mode,
-                            ops[i + 1]);
-            i += 2;
-        }
-        gaym_send(gaym, buf);
-        g_free(buf);
-    }
-
-    return;
-}
-
-/**
- * vim:tabstop=4:shiftwidth=4:expandtab:
- */

Copied: qrc/tags/release-0.9.5/gaym/src/cmds.c (from rev 267, qrc/trunk/gaym/src/cmds.c)

Deleted: qrc/tags/release-0.9.5/gaym/src/gaym.c
===================================================================
--- qrc/trunk/gaym/src/gaym.c	2005-07-30 22:19:23 UTC (rev 259)
+++ qrc/tags/release-0.9.5/gaym/src/gaym.c	2005-08-02 06:44:24 UTC (rev 268)
@@ -1,1632 +0,0 @@
-/**
- * @file gaym.c
- *
- * gaim
- *
- * Copyright (C) 2003, Robbert Haarman <gaim at inglorion.net>
- * Copyright (C) 2003, Ethan Blanton <eblanton at cs.purdue.edu>
- * Copyright (C) 2000-2003, Rob Flynn <rob at tgflinux.com>
- * Copyright (C) 1998-1999, Mark Spencer <markster at marko.net>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
- */
-
-#include "internal.h"
-#include "accountopt.h"
-#include "blist.h"
-#include "conversation.h"
-#include "debug.h"
-#include "notify.h"
-#include "prpl.h"
-#include "plugin.h"
-#include "util.h"
-#include "version.h"
-#include "request.h"
-#include "privacy.h"
-#include "signals.h"
-
-#include "helpers.h"
-#include "gayminfo.h"
-#include "gaympriv.h"
-#include "botfilter.h"
-#include "gaym.h"
-
-static const char *gaym_blist_icon(GaimAccount * a, GaimBuddy * b);
-static void gaym_blist_emblems(GaimBuddy * b, char **se, char **sw,
-                               char **nw, char **ne);
-static GList *gaym_away_states(GaimConnection * gc);
-static GList *gaym_actions(GaimPlugin * plugin, gpointer context);
-/* static GList *gaym_chat_info(GaimConnection *gc); */
-static void gaym_login(GaimAccount * account);
-static void gaym_login_cb(gpointer data, gint source,
-                          GaimInputCondition cond);
-static void gaym_close(GaimConnection * gc);
-static int gaym_im_send(GaimConnection * gc, const char *who,
-                        const char *what, GaimConvImFlags flags);
-static int gaym_chat_send(GaimConnection * gc, int id, const char *what);
-static void gaym_chat_join(GaimConnection * gc, GHashTable * data);
-static void gaym_input_cb(gpointer data, gint source,
-                          GaimInputCondition cond);
-
-static guint gaym_nick_hash(const char *nick);
-static gboolean gaym_nick_equal(const char *nick1, const char *nick2);
-static void gaym_buddy_free(struct gaym_buddy *ib);
-static void gaym_channel_member_free(GaymBuddy * cm);
-
-static void gaym_buddy_append(char *name, struct gaym_buddy *ib,
-                              BListWhois * blist_whois);
-static void gaym_buddy_clear_done(char *name, struct gaym_buddy *ib,
-                                  gpointer nothing);
-
-static GaimPlugin *_gaym_plugin = NULL;
-
-static const char *status_chars = "@+%&";
-
-int gaym_send(struct gaym_conn *gaym, const char *buf)
-{
-    int ret;
-
-    if (gaym->fd < 0)
-        return -1;
-
-    /* gaim_debug(GAIM_DEBUG_MISC, "gaym", "sent: %s", buf); */
-    if ((ret = write(gaym->fd, buf, strlen(buf))) < 0)
-        gaim_connection_error(gaim_account_get_connection(gaym->account),
-                              _("Server has disconnected"));
-
-    return ret;
-}
-
-gboolean gaym_blist_timeout(struct gaym_conn * gaym)
-{
-    /**
-     * There are 510 characters available for an IRC command (512 if
-     * you count CR-LF).  "WHOIS " takes up 6 characters.  Assuming
-     * you need allow an extra character for the NULL when using
-     * g_string_sized_new(), we need to allocate (510-6)+1=505 here.
-     */
-    BListWhois *blist_whois = g_new0(BListWhois, 1);
-    blist_whois->count = 0;
-    blist_whois->string = g_string_sized_new(505);
-
-    char *list, *buf;
-
-    g_hash_table_foreach(gaym->buddies, (GHFunc) gaym_buddy_append,
-                         (gpointer) blist_whois);
-
-    list = g_string_free(blist_whois->string, FALSE);
-    if (!list || !strlen(list)) {
-        g_hash_table_foreach(gaym->buddies, (GHFunc) gaym_buddy_clear_done,
-                             NULL);
-        gaim_timeout_remove(gaym->timer);
-        gaym->timer =
-            gaim_timeout_add(BLIST_UPDATE_PERIOD,
-                             (GSourceFunc) gaym_blist_timeout,
-                             (gpointer) gaym);
-        g_free(list);
-        g_free(blist_whois);
-
-        return TRUE;
-    }
-    gaym->blist_updating = TRUE;
-    buf = gaym_format(gaym, "vn", "WHOIS", list);
-    gaym_send(gaym, buf);
-    gaim_timeout_remove(gaym->timer);
-    gaym->timer =
-        gaim_timeout_add(BLIST_CHUNK_INTERVAL,
-                         (GSourceFunc) gaym_blist_timeout,
-                         (gpointer) gaym);
-
-    g_free(buf);
-    g_free(list);
-    g_free(blist_whois);
-
-    return TRUE;
-}
-
-static void gaym_buddy_clear_done(char *name, struct gaym_buddy *ib,
-                                  gpointer nothing)
-{
-    ib->done = FALSE;
-}
-
-static void gaym_buddy_append(char *name, struct gaym_buddy *ib,
-                              BListWhois * blist_whois)
-{
-    char *converted_name = NULL;
-    converted_name = gaym_nick_to_gcom_strdup(name);
-
-    /**
-     * There are 510 characters available for an IRC command (512 if
-     * you count CR-LF).  "WHOIS " takes up 6 characters.  This means
-     * we have up to 504 characters available for comma separated
-     * converted_names
-     */
-    if (ib->done == FALSE && blist_whois->count < 10
-        && (strlen(converted_name) + blist_whois->string->len + 1) <=
-        504) {
-        blist_whois->count++;
-        ib->done = TRUE;
-        if (blist_whois->string->len == 0) {
-            g_string_append_printf(blist_whois->string, "%s",
-                                   converted_name);
-        } else {
-            g_string_append_printf(blist_whois->string, ",%s",
-                                   converted_name);
-        }
-    }
-
-    g_free(converted_name);
-    return;
-}
-
-static void gaym_whois_one(struct gaym_conn *gaym, struct gaym_buddy *ib)
-{
-    char *buf;
-    char *nick;
-    nick = gaym_nick_to_gcom_strdup(ib->name);
-    buf = gaym_format(gaym, "vn", "WHOIS", nick);
-    gaym_send(gaym, buf);
-    g_free(nick);
-    g_free(buf);
-}
-
-static const char *gaym_blist_icon(GaimAccount * a, GaimBuddy * b)
-{
-    return "gaym";
-}
-
-static void gaym_blist_emblems(GaimBuddy * b, char **se, char **sw,
-                               char **nw, char **ne)
-{
-    if (b->present == GAIM_BUDDY_OFFLINE)
-        *se = "offline";
-}
-
-static char *gaym_status_text(GaimBuddy * buddy)
-{
-    char *status;
-
-    struct gaym_conn *gaym =
-        (struct gaym_conn *) buddy->account->gc->proto_data;
-
-    if (!gaym) {
-        return g_strdup(_("Offline"));
-    }
-
-    struct gaym_buddy *ib =
-        g_hash_table_lookup(gaym->buddies, buddy->name);
-
-    if (!ib) {
-        return g_strdup(_("Offline"));
-    }
-
-    if (!ib->online) {
-        return g_strdup(_("Offline"));
-    }
-
-    if (!ib->bio) {
-        return NULL;
-    }
-
-    status = g_markup_escape_text(ib->bio, strlen(ib->bio));
-
-    return status;
-}
-
-static char *gaym_tooltip_text(GaimBuddy * buddy)
-{
-    struct gaym_conn *gaym =
-        (struct gaym_conn *) buddy->account->gc->proto_data;
-
-    if (!gaym) {
-        return NULL;
-    }
-
-    struct gaym_buddy *ib =
-        g_hash_table_lookup(gaym->channel_members, buddy->name);
-
-    if (!ib)
-        ib = g_hash_table_lookup(gaym->buddies, buddy->name);
-
-    if (!ib) {
-        return NULL;
-    }
-
-    return build_tooltip_text(ib);
-}
-
-static GList *gaym_away_states(GaimConnection * gc)
-{
-    return g_list_prepend(NULL, (gpointer) GAIM_AWAY_CUSTOM);
-}
-
-static void gaym_set_info(GaimConnection * gc, const char *info)
-{
-    struct gaym_conn *gaym = gc->proto_data;
-    GaimAccount *account = gaim_connection_get_account(gc);
-    char *hostname = "none";
-    char *buf, *bioline;
-    int i = 0;
-
-    char *tmpinfo = NULL;
-    if (info) {
-        tmpinfo = g_strdup(info);
-        for (i = 0; i < strlen(tmpinfo); i++) {
-            if (tmpinfo[i] == '\n') {
-                tmpinfo[i] = ' ';
-            }
-        }
-        tmpinfo = g_strstrip(tmpinfo);
-    }
-
-    if (gc->away && !tmpinfo) {
-        /**
-         * don't change any bio settings, since this is just
-         * setting an away message
-         */
-    } else {
-        if (gaym->bio) {
-            g_free(gaym->bio);
-        }
-        if (tmpinfo && strlen(tmpinfo) > 0) {
-            gaim_debug_misc("gaym", "option1, info=%x\n", tmpinfo);
-            /* java client allows MAX_BIO_LEN characters */
-            gaym->bio = g_strndup(tmpinfo, MAX_BIO_LEN);
-        } else if (gaym->server_bioline
-                   && strlen(gaym->server_bioline) > 0) {
-            gaim_debug_misc("gaym", "option2\n");
-            gaym->bio = gaym_bio_strdup(gaym->server_bioline);
-        } else {
-            gaim_debug_misc("gaym", "option3\n");
-            gaym->bio = g_strdup("Gaim User");
-        }
-        gaim_account_set_user_info(account, gaym->bio);
-        gaim_account_set_string(account, "bioline", gaym->bio);
-        gaim_debug_info("gaym", "INFO=%x BIO=%x\n", tmpinfo, gaym->bio);
-        gaim_debug_misc("gaym", "In login_cb, gc->account=%x\n",
-                        gc->account);
-    }
-
-    bioline =
-        g_strdup_printf("%s#%s\001%s",
-                        gaym->thumbnail ? gaym->thumbnail : "",
-                        gc->away ? gc->away : (gaym->bio ? gaym->bio : ""),
-                        gaym->server_stats ? gaym->server_stats : "");
-
-    buf = gaym_format(gaym, "vvvv:", "USER",
-                      gaim_account_get_username(account),
-                      hostname, gaym->server, bioline);
-
-    gaim_debug_misc("gaym", "BIO=%x\n", bioline);
-
-    if (gaym_send(gaym, buf) < 0) {
-        gaim_connection_error(gc, "Error registering with server");
-    }
-
-    if (tmpinfo) {
-        g_free(tmpinfo);
-    }
-    g_free(bioline);
-    g_free(buf);
-
-    return;
-}
-
-static void gaym_show_set_info(GaimPluginAction * action)
-{
-    GaimConnection *gc = (GaimConnection *) action->context;
-    gaim_account_request_change_user_info(gaim_connection_get_account(gc));
-}
-
-static GList *gaym_actions(GaimPlugin * plugin, gpointer context)
-{
-    GList *list = NULL;
-    GaimPluginAction *act = NULL;
-
-    act = gaim_plugin_action_new(_("Change Bio"), gaym_show_set_info);
-    list = g_list_prepend(list, act);
-
-    return list;
-}
-
-static void gaym_blist_join_chat_cb(GaimBlistNode * node, gpointer data)
-{
-    const char *args[1];
-
-    GaimChat *chat = (GaimChat *) node;
-    struct gaym_conn *gaym = chat->account->gc->proto_data;
-    args[0] = data;
-
-    g_return_if_fail(args[0] != NULL);
-    g_return_if_fail(gaym != NULL);
-
-    gaym_cmd_join(gaym, "join", NULL, args);
-}
-
-static GList *gaym_blist_node_menu(GaimBlistNode * node)
-{
-    GList *m = NULL;
-    GaimBlistNodeAction *act = NULL;
-    int i = 0;
-
-    if (node->type != GAIM_BLIST_CHAT_NODE) {
-        return m;
-    }
-
-    GaimChat *chat = (GaimChat *) node;
-    char *channel = g_hash_table_lookup(chat->components, "channel");
-
-    if (!channel) {
-        return m;
-    }
-
-    if (!g_str_has_suffix(channel, "=*")) {
-        return m;
-    }
-
-    char *label = NULL;
-    char *instance = NULL;
-
-    int max = gaim_prefs_get_int("/plugins/prpl/gaym/chat_room_instances");
-
-    for (i = max; i > 0; i--) {
-        label = g_strdup_printf(_("Join Room %d"), i);
-        instance =
-            g_strdup_printf("%.*s%d", strlen(channel) - 1, channel, i);
-        act =
-            gaim_blist_node_action_new(label, gaym_blist_join_chat_cb,
-                                       instance);
-        m = g_list_prepend(m, act);
-    }
-    return m;
-}
-
-static GList *gaym_chat_join_info(GaimConnection * gc)
-{
-    GList *m = NULL;
-    struct proto_chat_entry *pce;
-
-    pce = g_new0(struct proto_chat_entry, 1);
-    pce->label = _("_Room:");
-    pce->identifier = "channel";
-    m = g_list_prepend(m, pce);
-
-    return m;
-}
-
-GHashTable *gaym_chat_info_defaults(GaimConnection * gc,
-                                    const char *chat_name)
-{
-    GHashTable *defaults;
-
-    defaults =
-        g_hash_table_new_full(g_str_hash, g_str_equal, NULL, g_free);
-
-    if (chat_name != NULL)
-        g_hash_table_insert(defaults, "channel", g_strdup(chat_name));
-
-    return defaults;
-}
-
-static void gaym_login_with_chat_key(GaimAccount * account)
-{
-    GaimConnection *gc;
-    struct gaym_conn *gaym;
-    char *buf;
-    const char *username = gaim_account_get_username(account);
-    int err;
-
-    gc = gaim_account_get_connection(account);
-    gaym = gc->proto_data;
-
-    buf = g_strdup_printf(_("Signon: %s"), username);
-    gaim_connection_update_progress(gc, buf, 5, 6);
-    g_free(buf);
-    gaim_debug_misc("gaym", "Trying login to %s\n", gaym->server);
-    err = gaim_proxy_connect(account, gaym->server,
-                             gaim_account_get_int(account, "port",
-                                                  IRC_DEFAULT_PORT),
-                             gaym_login_cb, gc);
-    if (err || !account->gc) {
-        gaim_connection_error(gc, _("Couldn't create socket"));
-        gaim_debug_misc("gaym", "err: %d, account->gc: %x\n", err,
-                        account->gc);
-        return;
-    }
-
-}
-
-static void gaym_login(GaimAccount * account)
-{
-    GaimConnection *gc;
-    struct gaym_conn *gaym;
-    char *buf;
-    const char *username = gaim_account_get_username(account);
-
-    gc = gaim_account_get_connection(account);
-    gc->flags |= GAIM_CONNECTION_NO_NEWLINES | GAIM_CONNECTION_AUTO_RESP;
-
-    if (strpbrk(username, " \t\v\r\n") != NULL) {
-        gaim_connection_error(gc,
-                              _("IRC nicks may not contain whitespace"));
-        return;
-    }
-
-    gc->proto_data = gaym = g_new0(struct gaym_conn, 1);
-    gaym->account = account;
-
-
-    /**
-     * gaim_connection_set_display_name(gc, userparts[0]);
-     */
-    gaim_connection_set_display_name(gc, username);
-    gaym->server =
-        g_strdup(gaim_account_get_string
-                 (account, "server", "www.gay.com"));
-    /**
-     * gaym->server = "www.gay.com";
-     */
-    gaym->buddies =
-        g_hash_table_new_full((GHashFunc) gaym_nick_hash,
-                              (GEqualFunc) gaym_nick_equal, NULL,
-                              (GDestroyNotify) gaym_buddy_free);
-
-    gaym->channel_members =
-        g_hash_table_new_full((GHashFunc) gaym_nick_hash,
-                              (GEqualFunc) gaym_nick_equal, NULL,
-                              (GDestroyNotify) gaym_channel_member_free);
-
-    gaym->cmds = g_hash_table_new(g_str_hash, g_str_equal);
-    gaym_cmd_table_build(gaym);
-    gaym->msgs = g_hash_table_new(g_str_hash, g_str_equal);
-    gaym_msg_table_build(gaym);
-    gaym->roomlist_filter = NULL;
-    /**
-     * The last parameter needs to be NULL here, since the same
-     * field is added for both the key and the value (and if we
-     * free it twice, thats bad and causes crashing!).
-     */
-    gaym->info_window_needed =
-        g_hash_table_new_full(g_str_hash, g_str_equal, g_free, NULL);
-
-    gaym->entry_order =
-        g_hash_table_new_full(g_str_hash, g_str_equal, g_free, g_free);
-
-    /**
-     * This is similar to gaym->info_window_needed, except this is
-     * for thumbails inside the IM conversation window if the
-     * person is not already on the buddy list
-     */
-
-    buf = g_strdup_printf(_("Signon: %s"), username);
-    gaim_connection_update_progress(gc, buf, 1, 6);
-    g_free(buf);
-
-
-    /**
-     * Making a change to try cached password first.
-     * gaym_try_cached_password(account, gaym_login_with_chat_key);
-     */
-    gaym_get_chat_key_from_weblogin(account, gaym_login_with_chat_key);
-}
-
-
-static void gaym_get_configtxt_cb(gpointer proto_data,
-                                  const gchar * config_text, size_t len)
-{
-    struct gaym_conn *gaym = (struct gaym_conn *) proto_data;
-    GaimConnection *gc = gaim_account_get_connection(gaym->account);
-
-    g_return_if_fail(config_text != NULL);
-
-    gaym->confighash = gaym_properties_new(config_text);
-    g_return_if_fail(gaym->confighash != NULL);
-
-    // synchronize_deny_list(gc, gaym->confighash);
-
-    return;
-}
-static void gaym_login_cb(gpointer data, gint source,
-                          GaimInputCondition cond)
-{
-    GaimConnection *gc = data;
-    struct gaym_conn *gaym = gc->proto_data;
-    char hostname[256];
-    char *buf;
-    const char *username;
-    const char *user_bioline = NULL;
-    char *bioline;
-    char *login_name;
-
-    if (GAIM_CONNECTION_IS_VALID(gc)) {
-
-
-        GList *connections = gaim_connections_get_all();
-
-        if (source < 0) {
-            gaim_connection_error(gc, _("Couldn't connect to host"));
-            return;
-        }
-
-        if (!g_list_find(connections, gc)) {
-            close(source);
-            return;
-        }
-
-        gaym->fd = source;
-        gaim_debug_misc("gaym", "In login_cb with chat_key=%s\n",
-                        gaym->chat_key);
-        if (gaym->chat_key) {
-
-            buf = gaym_format(gaym, "vv", "PASS", gaym->chat_key);
-            if (gaym_send(gaym, buf) < 0) {
-                gaim_connection_error(gc, "Error sending password");
-                return;
-            }
-            g_free(buf);
-        } else {
-            gaim_connection_error(gc,
-                                  _
-                                  ("Password wasn't recorded. Report bug."));
-            return;
-        }
-        gethostname(hostname, sizeof(hostname));
-        hostname[sizeof(hostname) - 1] = '\0';
-        username = gaim_account_get_string(gaym->account, "username", "");
-        user_bioline =
-            g_strdup(gaim_account_get_string
-                     (gaym->account, "bioline", ""));
-        gaim_debug_info("gaym", "USER BIOLINE=%x\n", user_bioline);
-        gaim_account_set_user_info(gc->account, user_bioline);
-        gaim_debug_misc("gaym",
-                        "In login_cb, user_bioline: %x, gc->account=%x\n",
-                        user_bioline, gc->account);
-
-        login_name =
-            gaym_nick_to_gcom_strdup(gaim_connection_get_display_name(gc));
-        bioline = g_strdup_printf("%s#%s\001%s",
-                                  gaym->thumbnail,
-                                  user_bioline ? user_bioline : "",
-                                  gaym->server_stats ? gaym->
-                                  server_stats : "");
-
-        buf = gaym_format(gaym, "vn", "NICK", login_name);
-        gaim_debug_misc("gaym", "Command: %s\n", buf);
-
-        if (gaym_send(gaym, buf) < 0) {
-            gaim_connection_error(gc, "Error sending nickname");
-            return;
-        }
-        g_free(buf);
-        buf =
-            gaym_format(gaym, "vvvv:", "USER", login_name, hostname,
-                        gaym->server, bioline);
-
-        gaim_debug_misc("gaym", "Command: %s\n", buf);
-        if (gaym_send(gaym, buf) < 0) {
-            gaim_connection_error(gc, "Error registering with server");
-            return;
-        }
-        g_free(login_name);
-        g_free(buf);
-
-        const char *server = gaim_account_get_string(gc->account, "server",
-                                                     IRC_DEFAULT_SERVER);
-        char *url =
-            g_strdup_printf
-            ("http://%s/messenger/config.txt?%s", server, gaym->chat_key);
-
-        char *user_agent = "Mozilla/4.0";
-
-        get_spamlist_from_web();
-        gaim_url_fetch(url, FALSE, user_agent, FALSE,
-                       gaym_get_configtxt_cb, gaym);
-
-        g_free(url);
-        gc->inpa =
-            gaim_input_add(gaym->fd, GAIM_INPUT_READ, gaym_input_cb, gc);
-
-
-    }
-}
-static void gaym_close(GaimConnection * gc)
-{
-    struct gaym_conn *gaym = gc->proto_data;
-
-    gaim_debug_misc("gaym", "gaym close function has been called\n");
-    if (gaym == NULL)
-        return;
-
-    gaym_cmd_quit(gaym, "quit", NULL, NULL);
-
-    if (gc->inpa)
-        gaim_input_remove(gc->inpa);
-
-    g_free(gaym->inbuf);
-    gaim_debug_misc("gaym", "closing fd %i\n", gaym->fd);
-    close(gaym->fd);
-
-    if (gaym->timer)
-        gaim_timeout_remove(gaym->timer);
-
-    if (gaym->thumbnail)
-        g_free(gaym->thumbnail);
-
-    if (gaym->chat_key)
-        g_free(gaym->chat_key);
-
-    if (gaym->server_bioline)
-        g_free(gaym->server_bioline);
-
-    if (gaym->server_stats)
-        g_free(gaym->server_stats);
-
-    if (gaym->roomlist_filter)
-        g_free(gaym->roomlist_filter);
-
-    if (gaym->bio)
-        g_free(gaym->bio);
-
-    g_hash_table_destroy(gaym->cmds);
-    g_hash_table_destroy(gaym->msgs);
-    g_hash_table_destroy(gaym->info_window_needed);
-    g_hash_table_destroy(gaym->entry_order);
-    if (gaym->motd)
-        g_string_free(gaym->motd, TRUE);
-
-    if (gaym->names)
-        g_string_free(gaym->names, TRUE);
-
-    if (gaym->nameconv)
-        g_free(gaym->nameconv);
-    if (gaym->subroom)
-        g_free(gaym->subroom);
-
-    g_hash_table_destroy(gaym->confighash);
-
-    if (gaym->hammer_cancel_dialog)
-        gaim_request_close(GAIM_REQUEST_ACTION,
-                           gaym->hammer_cancel_dialog);
-
-    g_free(gaym->server);
-    g_free(gaym);
-}
-
-static int gaym_im_send(GaimConnection * gc, const char *who,
-                        const char *what, GaimConvImFlags flags)
-{
-    struct gaym_conn *gaym = gc->proto_data;
-    const char *args[2];
-    char *automsg = NULL;
-    char *stripped_msg = NULL;
-    if (strchr(status_chars, *who) != NULL) {
-        args[0] = who + 1;
-    } else {
-        args[0] = who;
-    }
-    if (flags & GAIM_CONV_IM_AUTO_RESP) {
-        stripped_msg = gaim_markup_strip_html(what);
-        automsg = g_strdup_printf("<AUTO-REPLY> %s", stripped_msg);
-        g_free(stripped_msg);
-        args[1] = automsg;
-
-    } else {
-        args[1] = what;
-    }
-    gaym_cmd_privmsg(gaym, "msg", NULL, args);
-    if (automsg) {
-        g_free(automsg);
-    }
-    return 1;
-}
-
-static void gaym_get_info(GaimConnection * gc, const char *who)
-{
-    struct gaym_conn *gaym = gc->proto_data;
-    const char *args[1];
-    args[0] = who;
-
-    char *normalized = g_strdup(gaim_normalize(gc->account, who));
-    /**
-     * We are adding the same char* to both the key and the value.
-     * If this changes, we need to change the corresponding
-     * g_hash_table_new_full() so that things are properly cleaned
-     * up during the remove/destroy phase.
-     */
-    g_hash_table_insert(gaym->info_window_needed, normalized, normalized);
-    gaym_cmd_whois(gaym, "whois", NULL, args);
-}
-
-static void gaym_set_away(GaimConnection * gc, const char *state,
-                          const char *msg)
-{
-    char *bio = NULL;
-    char *tmpmsg = NULL;
-    int i = 0;
-    struct gaym_conn *gaym = gc->proto_data;
-
-    if (gc->away) {
-        g_free(gc->away);
-        gc->away = NULL;
-    }
-
-    /**
-     * In addition to setting the away message, set the Bio to the
-     * away message; if the away message is NULL, then set the Bio
-     * to the original bio.
-     */
-
-    if (msg) {
-        tmpmsg = g_strdup(msg);
-        for (i = 0; i < strlen(tmpmsg); i++) {
-            if (tmpmsg[i] == '\n') {
-                tmpmsg[i] = ' ';
-            }
-        }
-        tmpmsg = g_strstrip(tmpmsg);
-
-        gc->away = g_strndup(tmpmsg, MAX_BIO_LEN);
-        gaym_set_info(gc, NULL);
-        g_free(tmpmsg);
-    } else {
-        if (gaym && gaym->bio) {
-            bio = g_strdup(gaym->bio);
-            gaym_set_info(gc, bio);
-            g_free(bio);
-        } else {
-            gaym_set_info(gc, NULL);
-        }
-    }
-
-    /**
-     *  The following would be great, and gay.com's server supports
-     *  it, but gay.com's clients don't see the result.  So even though
-     *  we can see the result, we won't bother.
-     *
-     * args[0] = msg;
-     * gaym_cmd_away(gaym, "away", NULL, args);
-     */
-}
-
-GaymBuddy *gaym_get_channel_member_reference(struct gaym_conn
-                                             *gaym, const gchar * name)
-{
-
-    GaymBuddy *channel_member =
-        (GaymBuddy *) g_hash_table_lookup(gaym->channel_members,
-                                          name);
-
-    if (!channel_member) {
-        GaymBuddy *channel_member = g_new0(GaymBuddy, 1);
-        channel_member->ref_count = 1;
-        g_hash_table_insert(gaym->channel_members, g_strdup(name),
-                            channel_member);
-        gaim_debug_misc("gaym", "Creating channel_members entry for %s\n",
-                        name);
-        return g_hash_table_lookup(gaym->channel_members, name);
-    } else {
-        gaim_debug_misc("gaym",
-                        "Adding reference to channel_members entry for %s\n",
-                        name);
-        (channel_member->ref_count)++;
-        return channel_member;
-    }
-
-}
-
-gboolean gaym_unreference_channel_member(struct gaym_conn * gaym,
-                                         gchar * name)
-{
-
-    GaymBuddy *channel_member;
-    channel_member =
-        (GaymBuddy *) g_hash_table_lookup(gaym->channel_members, name);
-    if (!channel_member)
-        return FALSE;
-    else {
-
-        if (channel_member->ref_count <= 0)
-            gaim_debug_error("gaym",
-                             "****Reference counting error with channel members struct.\n");
-
-        channel_member->ref_count--;
-
-        if (channel_member->ref_count == 0) {
-            gaim_debug_misc("gaym", "Removing %s from channel_members\n",
-                            name);
-            return g_hash_table_remove(gaym->channel_members, name);
-        }
-        return FALSE;
-    }
-}
-
-static void gaym_add_buddy(GaimConnection * gc, GaimBuddy * buddy,
-                           GaimGroup * group)
-{
-    if (buddy->name) {
-        buddy->name = g_strstrip(buddy->name);
-    }
-    if (buddy->alias) {
-        buddy->alias = g_strstrip(buddy->alias);
-    }
-    if (buddy->server_alias) {
-        buddy->server_alias = g_strstrip(buddy->server_alias);
-    }
-    struct gaym_conn *gaym = (struct gaym_conn *) gc->proto_data;
-    struct gaym_buddy *ib = g_new0(struct gaym_buddy, 1);
-    ib->name = g_strdup(buddy->name);
-    ib->done = FALSE;
-    ib->online = FALSE;
-    ib->bio = NULL;
-    ib->thumbnail = NULL;
-    ib->sex = NULL;
-    ib->age = NULL;
-    ib->location = NULL;
-    g_hash_table_replace(gaym->buddies, ib->name, ib);
-    gaim_debug_misc("gaym", "Add buddy: %s\n", buddy->name);
-    /**
-     * if the timer isn't set, this is during signon, so we don't want to
-     * flood ourself off with WHOIS's, so we don't, but after that we want
-     * to know when someone's online asap
-     */
-    if (gaym->timer)
-        gaym_whois_one(gaym, ib);
-}
-
-static void gaym_remove_buddy(GaimConnection * gc, GaimBuddy * buddy,
-                              GaimGroup * group)
-{
-    struct gaym_conn *gaym = (struct gaym_conn *) gc->proto_data;
-
-    /**
-     * Only remove buddy->name from gaym->buddies if it doesn't
-     * exist in any other group on the buddy list.  This allows us
-     * to manage the buddy once, even though it might exist in
-     * several groups within the buddy list.
-     *
-     * To add to confusion, the buddy being deleted is not yet deleted,
-     * so we look for less than two identical buddies, and if so, then
-     * remove the buddy from gaym->buddies.
-     */
-
-    GSList *buddies = gaim_find_buddies(gaym->account, buddy->name);
-    guint length = g_slist_length(buddies);
-
-    if (length < 2) {
-        g_hash_table_remove(gaym->buddies, buddy->name);
-    }
-
-    g_slist_free(buddies);
-}
-
-static void gaym_input_cb(gpointer data, gint source,
-                          GaimInputCondition cond)
-{
-    GaimConnection *gc = data;
-    struct gaym_conn *gaym = gc->proto_data;
-    char *cur, *end;
-    int len;
-
-    if (gaym->inbuflen < gaym->inbufused + IRC_INITIAL_BUFSIZE) {
-        gaym->inbuflen += IRC_INITIAL_BUFSIZE;
-        gaym->inbuf = g_realloc(gaym->inbuf, gaym->inbuflen);
-    }
-
-    if ((len =
-         read(gaym->fd, gaym->inbuf + gaym->inbufused,
-              IRC_INITIAL_BUFSIZE - 1)) < 0) {
-        gaim_connection_error(gc, _("Read error"));
-        return;
-    } else if (len == 0) {
-        gaim_connection_error(gc, _("Server has disconnected"));
-        return;
-    }
-
-    gaym->inbufused += len;
-    gaym->inbuf[gaym->inbufused] = '\0';
-
-    cur = gaym->inbuf;
-    while (cur < gaym->inbuf + gaym->inbufused &&
-           ((end = strstr(cur, "\r\n")) || (end = strstr(cur, "\n")))) {
-        int step = (*end == '\r' ? 2 : 1);
-        *end = '\0';
-        gaym_parse_msg(gaym, cur);
-        cur = end + step;
-    }
-    if (cur != gaym->inbuf + gaym->inbufused) { /* leftover */
-        gaym->inbufused -= (cur - gaym->inbuf);
-        memmove(gaym->inbuf, cur, gaym->inbufused);
-    } else {
-        gaym->inbufused = 0;
-    }
-}
-
-static void gaym_add_permit(GaimConnection * gc, const char *name)
-{
-    if (!gaym_nick_check(name)) {
-        gaim_privacy_permit_remove(gc->account, name, TRUE);
-        gaim_notify_error(gc, _("Invalid User Name"), name,
-                          _("Invalid user name not added."));
-    } else {
-        gaym_privacy_change(gc, name);
-    }
-}
-
-static void gaym_add_deny(GaimConnection * gc, const char *name)
-{
-    if (!gaym_nick_check(name)) {
-        gaim_privacy_deny_remove(gc->account, name, TRUE);
-        gaim_notify_error(gc, _("Invalid User Name"), name,
-                          _("Invalid user name not added."));
-        return;
-    }
-    gaym_server_store_deny(gc, name, TRUE);
-    gaym_privacy_change(gc, name);
-}
-
-static void gaym_rem_permit(GaimConnection * gc, const char *name)
-{
-    gaym_privacy_change(gc, name);
-}
-
-static void gaym_rem_deny(GaimConnection * gc, const char *name)
-{
-    gaym_server_store_deny(gc, name, FALSE);
-    gaym_privacy_change(gc, name);
-}
-
-static void gaym_set_permit_deny(GaimConnection * gc)
-{
-    gaym_privacy_change(gc, NULL);
-}
-
-static void gaym_warn(GaimConnection * gc, const char *who,
-                      gboolean anonymous)
-{
-    void *handle = NULL;
-    struct gaym_conn *gaym = gc->proto_data;
-    char *buf =
-        g_strdup_printf
-        ("http://%s/members/report/form.html?area=chat&room=&report=%s",
-         gaym->server, who);
-    gaim_notify_uri(handle, buf);
-    g_free(buf);
-}
-
-static void gaym_chat_join(GaimConnection * gc, GHashTable * data)
-{
-    struct gaym_conn *gaym = gc->proto_data;
-    const char *args[1];
-    char *alias = NULL;
-
-    GaimChat *c = NULL;
-
-    /**
-     * need a copy, because data gets
-     * destroyed in roomlist.c
-     */
-    GHashTable *chatinfo = NULL;
-
-    args[0] = g_hash_table_lookup(data, "channel");
-
-    if (args[0]) {
-        alias = g_hash_table_lookup(data, "description");
-        c = gaim_blist_find_chat(gaim_connection_get_account(gc), args[0]);
-        if (!c) {
-            chatinfo = g_hash_table_new(g_str_hash, g_str_equal);
-
-            g_hash_table_replace(chatinfo, "channel", g_strdup(args[0]));
-
-            c = gaim_chat_new(gaim_connection_get_account(gc),
-                              alias, chatinfo);
-
-            gaim_blist_add_chat(c, NULL, NULL);
-        }
-    }
-
-    if (!args[0] || *args[0] != '#') {
-        /**
-         * Trigger a room search in config.txt....
-         */
-        return;
-    }
-
-    gaym_cmd_join(gaym, "join", NULL, args);
-}
-
-static char *gaym_get_chat_name(GHashTable * data)
-{
-    return g_strdup(g_hash_table_lookup(data, "channel"));
-}
-
-static void gaym_chat_invite(GaimConnection * gc, int id,
-                             const char *message, const char *name)
-{
-    struct gaym_conn *gaym = gc->proto_data;
-    GaimConversation *convo = gaim_find_chat(gc, id);
-    const char *args[2];
-
-    if (!convo) {
-        gaim_debug(GAIM_DEBUG_ERROR, "gaym",
-                   "Got chat invite request for bogus chat\n");
-        return;
-    }
-    args[0] = name;
-    args[1] = gaim_conversation_get_name(convo);
-    gaym_cmd_invite(gaym, "invite", gaim_conversation_get_name(convo),
-                    args);
-}
-
-static void gaym_chat_leave(GaimConnection * gc, int id)
-{
-    struct gaym_conn *gaym = gc->proto_data;
-    GaimConversation *convo = gaim_find_chat(gc, id);
-    const char *args[2];
-
-    if (!convo)
-        return;
-
-    args[0] = gaim_conversation_get_name(convo);
-    args[1] = NULL;
-    gaym_cmd_part(gaym, "part", gaim_conversation_get_name(convo), args);
-    serv_got_chat_left(gc, id);
-}
-
-static int gaym_chat_send(GaimConnection * gc, int id, const char *what)
-{
-    struct gaym_conn *gaym = gc->proto_data;
-    GaimConversation *convo = gaim_find_chat(gc, id);
-    const char *args[2];
-    char *tmp;
-
-    if (!convo) {
-        gaim_debug(GAIM_DEBUG_ERROR, "gaym",
-                   "chat send on nonexistent chat\n");
-        return -EINVAL;
-    }
-#if 0
-    if (*what == '/') {
-        return gaym_parse_cmd(gaym, convo->name, what + 1);
-    }
-#endif
-    args[0] = convo->name;
-    args[1] = what;
-
-    gaym_cmd_privmsg(gaym, "msg", NULL, args);
-
-    tmp = gaim_escape_html(what);
-    serv_got_chat_in(gc, id, gaim_connection_get_display_name(gc), 0, tmp,
-                     time(NULL));
-    g_free(tmp);
-    return 0;
-}
-
-static guint gaym_nick_hash(const char *nick)
-{
-    char *lc = NULL;
-    guint bucket;
-
-    if (!nick)
-        return 0;
-    lc = g_utf8_strdown(nick, -1);
-    bucket = g_str_hash(lc);
-    g_free(lc);
-
-    return bucket;
-}
-
-static gboolean gaym_nick_equal(const char *nick1, const char *nick2)
-{
-    return (gaim_utf8_strcasecmp(nick1, nick2) == 0);
-}
-
-static void gaym_channel_member_free(GaymBuddy * cm)
-{
-    g_free(cm->name);
-    g_free(cm->bio);
-    g_free(cm->thumbnail);
-    g_free(cm->sex);
-    g_free(cm->age);
-    g_free(cm->location);
-    g_free(cm);
-}
-
-static void gaym_buddy_free(struct gaym_buddy *ib)
-{
-    g_free(ib->name);
-    g_free(ib->bio);
-    g_free(ib->thumbnail);
-    g_free(ib->sex);
-    g_free(ib->age);
-    g_free(ib->location);
-    g_free(ib);
-}
-
-static GaimChat *gaym_find_blist_chat(GaimAccount * account,
-                                      const char *name)
-{
-    char *chat_name;
-    GaimChat *chat;
-    GaimPlugin *prpl;
-    GaimPluginProtocolInfo *prpl_info = NULL;
-    struct proto_chat_entry *pce;
-    GaimBlistNode *node, *group;
-    GList *parts;
-
-    GaimBuddyList *gaimbuddylist = gaim_get_blist();
-
-    g_return_val_if_fail(gaimbuddylist != NULL, NULL);
-    g_return_val_if_fail((name != NULL) && (*name != '\0'), NULL);
-
-    if (!gaim_account_is_connected(account))
-        return NULL;
-
-    prpl = gaim_find_prpl(gaim_account_get_protocol_id(account));
-    prpl_info = GAIM_PLUGIN_PROTOCOL_INFO(prpl);
-
-    for (group = gaimbuddylist->root; group != NULL; group = group->next) {
-        for (node = group->child; node != NULL; node = node->next) {
-            if (GAIM_BLIST_NODE_IS_CHAT(node)) {
-
-                chat = (GaimChat *) node;
-
-                if (account != chat->account)
-                    continue;
-
-                parts =
-                    prpl_info->
-                    chat_info(gaim_account_get_connection(chat->account));
-
-                pce = parts->data;
-                chat_name = g_hash_table_lookup(chat->components,
-                                                pce->identifier);
-
-                if (chat->account == account && chat_name != NULL &&
-                    name != NULL
-                    && g_pattern_match_simple(chat_name, name)) {
-
-                    return chat;
-                }
-            }
-        }
-    }
-
-    return NULL;
-}
-
-static GaimRoomlist *gaym_roomlist_get_list(GaimConnection * gc)
-{
-    struct gaym_conn *gaym;
-    GList *fields = NULL;
-    GaimRoomlistField *f;
-    char *buf;
-
-    gaym = gc->proto_data;
-
-    if (gaym->roomlist) {
-        gaim_roomlist_unref(gaym->roomlist);
-    }
-
-    gaym->roomlist = gaim_roomlist_new(gaim_connection_get_account(gc));
-
-    f = gaim_roomlist_field_new(GAIM_ROOMLIST_FIELD_STRING, _("Channel"),
-                                "channel", FALSE);
-    fields = g_list_prepend(fields, f);
-
-    f = gaim_roomlist_field_new(GAIM_ROOMLIST_FIELD_STRING, "",
-                                "description", TRUE);
-    fields = g_list_prepend(fields, f);
-
-    gaim_roomlist_set_fields(gaym->roomlist, fields);
-
-    /**
-     * Member created rooms are retrieved through the IRC protocol
-     * and after the last response is recieved from that request
-     * the static rooms are added
-     */
-
-    buf = gaym_format(gaym, "v", "LIST #_*");
-    gaym_send(gaym, buf);
-    g_free(buf);
-
-    return gaym->roomlist;
-}
-
-static void gaym_roomlist_cancel(struct _GaimRoomlist *list)
-{
-    GaimConnection *gc = gaim_account_get_connection(list->account);
-    struct gaym_conn *gaym;
-
-    if (gc == NULL)
-        return;
-
-    gaym = gc->proto_data;
-
-    gaim_roomlist_set_in_progress(list, FALSE);
-
-    if (gaym->roomlist == list) {
-        g_list_free(g_list_nth_data(list->rooms, 0));
-        gaym->roomlist = NULL;
-        gaim_roomlist_unref(list);
-    }
-
-    if (gaym->roomlist_filter) {
-        g_free(gaym->roomlist_filter);
-        gaym->roomlist_filter = NULL;
-    }
-}
-
-void gaym_roomlist_expand_category(struct _GaimRoomlist *list,
-                                   struct _GaimRoomlistRoom *category)
-{
-    GaimRoomlistRoom *room = NULL;
-    gchar *altname = NULL;
-    gchar *altchan = NULL;
-    int i = 0;
-
-    if (category->type & GAIM_ROOMLIST_ROOMTYPE_ROOM
-        && !category->expanded_once) {
-
-        category->expanded_once = TRUE;
-
-        int max =
-            gaim_prefs_get_int("/plugins/prpl/gaym/chat_room_instances");
-
-        gchar *name = category->fields->data;
-        gchar *chan = category->fields->next->data;
-
-        for (i = 1; i <= max; i++) {
-            altname = g_strdup_printf("%.*s%d", strlen(name) - 1, name, i);
-            altchan = g_strdup_printf("%.*s%d", strlen(chan) - 1, chan, i);
-
-            room =
-                gaim_roomlist_room_new(GAIM_ROOMLIST_ROOMTYPE_ROOM,
-                                       altname, category);
-
-            gaim_roomlist_room_add_field(list, room, altname);
-            gaim_roomlist_room_add_field(list, room, altchan);
-            gaim_roomlist_room_add(list, room);
-            g_free(altname);
-            g_free(altchan);
-        }
-    }
-    gaim_roomlist_set_in_progress(list, FALSE);
-}
-
-static GaimPluginProtocolInfo prpl_info = {
-    0,                          /* options */
-    NULL,                       /* user_splits */
-    NULL,                       /* protocol_options */
-    {"jpg", 57, 77, 57, 77},    /* icon_spec */
-    gaym_blist_icon,            /* list_icon */
-    gaym_blist_emblems,         /* list_emblems */
-    gaym_status_text,           /* status_text */
-    gaym_tooltip_text,          /* tooltip_text */
-    gaym_away_states,           /* away_states */
-    gaym_blist_node_menu,       /* blist_node_menu */
-    gaym_chat_join_info,        /* chat_info */
-    gaym_chat_info_defaults,    /* chat_info_defaults */
-    gaym_login,                 /* login */
-    gaym_close,                 /* close */
-    gaym_im_send,               /* send_im */
-    gaym_set_info,              /* set_info */
-    NULL,                       /* send_typing */
-    gaym_get_info,              /* get_info */
-    gaym_set_away,              /* set_away */
-    NULL,                       /* set_idle */
-    NULL,                       /* change_passwd */
-    gaym_add_buddy,             /* add_buddy */
-    NULL,                       /* add_buddies */
-    gaym_remove_buddy,          /* remove_buddy */
-    NULL,                       /* remove_buddies */
-    gaym_add_permit,            /* add_permit */
-    gaym_add_deny,              /* add_deny */
-    gaym_rem_permit,            /* rem_permit */
-    gaym_rem_deny,              /* rem_deny */
-    gaym_set_permit_deny,       /* set_permit_deny */
-    gaym_warn,                  /* warn */
-    gaym_chat_join,             /* join_chat */
-    NULL,                       /* reject_chat */
-    gaym_get_chat_name,         /* get_chat_name */
-    gaym_chat_invite,           /* chat_invite */
-    gaym_chat_leave,            /* chat_leave */
-    NULL,                       /* chat_whisper */
-    gaym_chat_send,             /* chat_send */
-    NULL,                       /* keepalive */
-    NULL,                       /* register_user */
-    NULL,                       /* get_cb_info */
-    NULL,                       /* get_cb_away */
-    NULL,                       /* alias_buddy */
-    NULL,                       /* group_buddy */
-    NULL,                       /* rename_group */
-    NULL,                       /* buddy_free */
-    NULL,                       /* convo_closed */
-    NULL,                       /* normalize */
-    NULL,                       /* set_buddy_icon */
-    NULL,                       /* remove_group */
-    NULL,                       /* get_cb_real_name */
-    NULL,                       /* set_chat_topic */
-    gaym_find_blist_chat,       /* find_blist_chat */
-    gaym_roomlist_get_list,     /* roomlist_get_list */
-    gaym_roomlist_cancel,       /* roomlist_cancel */
-    gaym_roomlist_expand_category,      /* roomlist_expand_category */
-    NULL,                       /* can_receive_file */
-    gaym_dccsend_send_file      /* send_file */
-};
-
-void deref_one_user(gpointer * user, gpointer * data)
-{
-
-    struct gaym_conn *gaym = (struct gaym_conn *) data;
-    GaimConvChatBuddy *cb = (GaimConvChatBuddy *) user;
-    gaim_debug_misc("gaym", "Removing %s in %x from list\n",
-                    (char *) cb->name, cb);
-
-    gaim_debug_misc("    ", "Succes was: %i\n",
-                    gaym_unreference_channel_member(gaym, cb->name));
-
-}
-static void gaym_clean_channel_members(GaimConversation * conv)
-{
-
-    g_return_if_fail(conv != NULL);
-
-    if (conv->type == GAIM_CONV_CHAT) {
-        GaimConvChat *chat = gaim_conversation_get_chat_data(conv);
-        GaimConnection *gc = gaim_conversation_get_gc(conv);
-        g_return_if_fail(gc != NULL);
-        struct gaym_conn *gaym = gc->proto_data;
-        GList *users = gaim_conv_chat_get_users(chat);
-        gaim_debug_misc("gaym", "got userlist %x length %i\n", users,
-                        g_list_length(users));
-        g_list_foreach(users, (GFunc) deref_one_user, gaym);
-    } else if (conv->type == GAIM_CONV_IM) {
-        gaim_debug_misc("gaym", "removing reference to %s\n", conv->name);
-        GaimConnection *gc = gaim_conversation_get_gc(conv);
-        g_return_if_fail(gc != NULL);
-        struct gaym_conn *gaym = gc->proto_data;
-        gaym_unreference_channel_member(gaym, conv->name);
-    }
-}
-static void gaym_get_photo_info(GaimConversation * conv)
-{
-    char *buf;
-    char *name;
-    gaim_debug_misc("gaym", "Got conversation-created signal\n");
-    if (strncmp(conv->account->protocol_id, "prpl-gaym", 9) == 0
-        && gaim_conversation_get_type(conv) == GAIM_CONV_IM) {
-
-        /**
-         * First check to see if we already have the photo via
-         * the buddy list process.
-         */
-
-        struct gaym_conn *gaym;
-
-        GaimConnection *gc = gaim_conversation_get_gc(conv);
-        gaym = (struct gaym_conn *) gc->proto_data;
-
-        if (!gaym) {
-            return;
-        }
-
-        struct gaym_buddy *ib =
-            g_hash_table_lookup(gaym->buddies, conv->name);
-
-        if (ib) {
-            return;
-        }
-
-        /**
-         * Since this person isn't in our buddy list, go ahead
-         * with the WHOIS to get the photo for the IM thumbnail
-         */
-
-
-        name = gaym_nick_to_gcom_strdup(conv->name);
-        buf = gaym_format(gaym, "vn", "WHOIS", name);
-        gaim_debug_misc("gaym", "Conversation triggered command: %s\n",
-                        buf);
-        gaym_send(gaym, buf);
-        gaym_get_channel_member_reference(gaym, name);
-        g_free(name);
-        g_free(buf);
-        // Opens a reference in channel_members.
-
-    }
-}
-
-static GaimPluginPrefFrame *get_plugin_pref_frame(GaimPlugin * plugin)
-{
-    GaimPluginPrefFrame *frame;
-    GaimPluginPref *ppref;
-
-    frame = gaim_plugin_pref_frame_new();
-
-    ppref = gaim_plugin_pref_new_with_label(_("Chat Rooms"));
-    gaim_plugin_pref_frame_add(frame, ppref);
-
-    ppref =
-        gaim_plugin_pref_new_with_name_and_label
-        ("/plugins/prpl/gaym/show_join", _("Show entrance announcement"));
-    gaim_plugin_pref_frame_add(frame, ppref);
-
-    ppref =
-        gaim_plugin_pref_new_with_name_and_label
-        ("/plugins/prpl/gaym/show_bio_with_join",
-         _("Show member bio with entrance announcement"));
-    gaim_plugin_pref_frame_add(frame, ppref);
-
-    ppref =
-        gaim_plugin_pref_new_with_name_and_label
-        ("/plugins/prpl/gaym/show_part", _("Show exit announcement"));
-    gaim_plugin_pref_frame_add(frame, ppref);
-
-    ppref =
-        gaim_plugin_pref_new_with_name_and_label
-        ("/plugins/prpl/gaym/chat_room_instances",
-         _("Number of chat room instances to display"));
-    gaim_plugin_pref_set_bounds(ppref, 0, 9);
-    gaim_plugin_pref_frame_add(frame, ppref);
-
-    ppref =
-        gaim_plugin_pref_new_with_label(_
-                                        ("Bio-Based Chat Room Activity Filtering"));
-    gaim_plugin_pref_frame_add(frame, ppref);
-
-    ppref =
-        gaim_plugin_pref_new_with_name_and_label
-        ("/plugins/prpl/gaym/botfilter_enable", _("Enable"));
-    gaim_plugin_pref_frame_add(frame, ppref);
-
-    ppref =
-        gaim_plugin_pref_new_with_name_and_label
-        ("/plugins/prpl/gaym/botfilter_ignore_null",
-         _("Ignore if bio is blank"));
-    gaim_plugin_pref_frame_add(frame, ppref);
-
-    ppref =
-        gaim_plugin_pref_new_with_name_and_label
-        ("/plugins/prpl/gaym/botfilter_patterns",
-         _
-         ("Ignore if bio contains these patterns\n\t? = match any single character\n\t* = match zero, one, or more"));
-    gaim_plugin_pref_frame_add(frame, ppref);
-
-    ppref =
-        gaim_plugin_pref_new_with_name_and_label
-        ("/plugins/prpl/gaym/botfilter_sep",
-         _("Above patterns are separated by"));
-    gaim_plugin_pref_set_max_length(ppref, 1);
-    gaim_plugin_pref_frame_add(frame, ppref);
-
-    ppref =
-        gaim_plugin_pref_new_with_name_and_label
-        ("/plugins/prpl/gaym/botfilter_url",
-         _
-         ("URL for GayBoi's spam database\n\tblank to disable\n\tchanges affect next login\n\tdefault is "
-          GAYBOI_SPAM_URL));
-    gaim_plugin_pref_frame_add(frame, ppref);
-
-    return frame;
-}
-
-static GaimPluginUiInfo prefs_info = {
-    get_plugin_pref_frame
-};
-
-static GaimPluginInfo info = {
-    GAIM_PLUGIN_MAGIC,
-    GAIM_MAJOR_VERSION,
-    GAIM_MINOR_VERSION,
-    GAIM_PLUGIN_PROTOCOL,                                 /**< type           */
-    NULL,                                                 /**< ui_requirement */
-    0,                                                    /**< flags          */
-    NULL,                                                 /**< dependencies   */
-    GAIM_PRIORITY_DEFAULT,                                /**< priority       */
-
-    "prpl-gaym",                                          /**< id             */
-    "GayM",                                               /**< name           */
-    VERSION,                                              /**< version        */
-    N_("GayM Protocol Plugin"),                           /**  summary        */
-    N_("Gay.com Messaging based on IRC"),                 /**  description    */
-    NULL,                                                 /**< author         */
-    "http://qrc.berlios.de/",                             /**< homepage       */
-
-    NULL,                                                 /**< load           */
-    NULL,                                                 /**< unload         */
-    NULL,                                                 /**< destroy        */
-
-    NULL,                                                  /**< ui_info        */
-    &prpl_info,                                           /**< extra_info     */
-    &prefs_info,
-    gaym_actions
-};
-
-static void _init_plugin(GaimPlugin * plugin)
-{
-
-    GaimAccountOption *option;
-
-    option = gaim_account_option_string_new(_("Bio Line"), "bioline", "");
-    prpl_info.protocol_options =
-        g_list_prepend(prpl_info.protocol_options, option);
-
-    option =
-        gaim_account_option_int_new(_("Port"), "port", IRC_DEFAULT_PORT);
-    prpl_info.protocol_options =
-        g_list_prepend(prpl_info.protocol_options, option);
-
-    option =
-        gaim_account_option_string_new(_("Server"), "server",
-                                       IRC_DEFAULT_SERVER);
-    prpl_info.protocol_options =
-        g_list_prepend(prpl_info.protocol_options, option);
-
-    /**
-     * We have to pull thumbnails, since they aren't pushed like with
-     * other protocols.
-     */
-    gaim_signal_connect(gaim_conversations_get_handle(),
-                        "conversation-created", plugin,
-                        GAIM_CALLBACK(gaym_get_photo_info), NULL);
-
-
-    gaim_signal_connect(gaim_conversations_get_handle(),
-                        "deleting-conversation", plugin,
-                        GAIM_CALLBACK(gaym_clean_channel_members), NULL);
-
-    gaim_signal_register(gaim_accounts_get_handle(),
-                         "info-updated",
-                         gaim_marshal_VOID__POINTER_POINTER, NULL, 2,
-                         gaim_value_new(GAIM_TYPE_SUBTYPE,
-                                        GAIM_SUBTYPE_ACCOUNT),
-                         gaim_value_new(GAIM_TYPE_POINTER,
-                                        GAIM_TYPE_CHAR));
-
-
-
-    gaim_prefs_add_none("/plugins/prpl/gaym");
-    gaim_prefs_add_int("/plugins/prpl/gaym/chat_room_instances", 4);
-    gaim_prefs_add_bool("/plugins/prpl/gaym/show_join", TRUE);
-    gaim_prefs_add_bool("/plugins/prpl/gaym/show_part", TRUE);
-    gaim_prefs_add_bool("/plugins/prpl/gaym/show_bio_with_join", TRUE);
-
-    gaim_prefs_add_bool("/plugins/prpl/gaym/botfilter_enable", FALSE);
-    gaim_prefs_add_bool("/plugins/prpl/gaym/botfilter_ignore_null", FALSE);
-    gaim_prefs_add_string("/plugins/prpl/gaym/botfilter_sep", "|");
-    gaim_prefs_add_string("/plugins/prpl/gaym/botfilter_patterns",
-                          "NULL|MODE * -i|*dantcamboy*|*Free preview*|*epowerchat*|*Live gay sex cam show*|*camboiz*");
-    gaim_prefs_add_string("/plugins/prpl/gaym/botfilter_url",
-                          GAYBOI_SPAM_URL);
-
-    gaim_prefs_connect_callback("/plugins/prpl/gaym/botfilter_url",
-                                botfilter_url_changed_cb, NULL);
-
-    gaim_prefs_add_string("/plugins/prpl/gaym/botfilter_url_result", "");
-    gaim_prefs_add_int("/plugins/prpl/gaym/botfilter_url_last_check", 0);
-
-    _gaym_plugin = plugin;
-
-    gaym_register_commands();
-}
-
-GAIM_INIT_PLUGIN(gaym, _init_plugin, info);
-
-
-
-/**
- * vim:tabstop=4:shiftwidth=4:expandtab:
- */

Copied: qrc/tags/release-0.9.5/gaym/src/gaym.c (from rev 267, qrc/trunk/gaym/src/gaym.c)

Deleted: qrc/tags/release-0.9.5/gaym/src/gaym.h
===================================================================
--- qrc/trunk/gaym/src/gaym.h	2005-07-30 22:19:23 UTC (rev 259)
+++ qrc/tags/release-0.9.5/gaym/src/gaym.h	2005-08-02 06:44:24 UTC (rev 268)
@@ -1,247 +0,0 @@
-/**
- * @file gaym.h
- * 
- * gaim
- *
- * Copyright (C) 2003, Ethan Blanton <eblanton at cs.purdue.edu>
- * 
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
- */
-
-#ifndef _GAIM_GAYM_H
-#define _GAIM_GAYM_H
-
-#include "internal.h"
-
-#include <glib.h>
-
-#include "roomlist.h"
-
-#define IRC_DEFAULT_SERVER "www.gay.com"
-#define IRC_DEFAULT_PORT 7514
-
-#define IRC_DEFAULT_CHARSET "UTF-8"
-#define IRC_DEFAULT_ALIAS "gaim"
-
-#define IRC_INITIAL_BUFSIZE 1024
-
-#define BLIST_UPDATE_PERIOD 60000       /* buddy list updated every 45s */
-#define BLIST_CHUNK_INTERVAL 5000       /* 5s between ISON chunks */
-
-#define MAX_BIO_LEN 150         /* max number of characters in bio */
-
-#define MAX_CHANNEL_MEMBERS 200
-
-#define GAYBOI_SPAM_URL "http://gayboi.org/spam/spamlst.php"
-
-typedef struct _BListWhois BListWhois;
-struct _BListWhois {
-    int count;
-    GString *string;
-};
-
-enum { IRC_USEROPT_SERVER, IRC_USEROPT_PORT, IRC_USEROPT_CHARSET };
-enum gaym_state { IRC_STATE_NEW, IRC_STATE_ESTABLISHED };
-enum info_string { INFO_AGE, INFO_LOCATION, INFO_BIO, INFO_URL };
-
-struct gaym_conn {
-    GaimAccount *account;
-    GHashTable *msgs;
-    GHashTable *cmds;
-    char *server;
-    int fd;
-    guint timer;
-    GHashTable *buddies;        /* hash table of struct gaym_buddy */
-    GHashTable *channel_members;        /* hash table of struct gaym_buddy 
-                                         */
-
-    char *inbuf;
-    int inbuflen;
-    int inbufused;
-
-    char *thumbnail;
-    char *chat_key;
-    char *server_bioline;
-    char *server_stats;
-    char *roomlist_filter;
-    char *bio;
-
-    gboolean blist_updating;
-    GHashTable *info_window_needed;
-
-    GString *motd;
-    GString *names;
-    char *nameconv;
-    char *traceconv;
-
-    GaimRoomlist *roomlist;
-
-    GList **node_menu;
-    gboolean quitting;
-    char *subroom;
-    GHashTable *confighash;
-    GHashTable *entry_order;
-
-    char *persist_room;
-    gboolean cancelling_persist;
-    void *hammer_cancel_dialog;
-
-};
-
-typedef struct {
-
-    gchar *cookies;
-    GHashTable *cookie_table;
-    void (*session_cb) (GaimAccount *);
-    GaimAccount *account;
-    char *username;
-    char *password;
-    struct gaym_conn *gaym;
-    gboolean hasFormData;
-
-} GaimUrlSession;
-
-typedef struct gaym_buddy GaymBuddy;
-struct gaym_buddy {
-    char *name;                 /* gaym formatted nick */
-    gboolean done;              /* has been checked */
-    gboolean online;            /* is online */
-    gint ref_count;             /* reference count for mem mngmnt */
-    char *bio;                  /* bio string */
-    char *thumbnail;            /* thumbnail string */
-    char *sex;                  /* sex string */
-    char *age;                  /* age string */
-    char *location;             /* location string */
-};
-
-gboolean gaym_unreference_channel_member(struct gaym_conn *gaym,
-                                         gchar * name);
-GaymBuddy *gaym_get_channel_member_info(struct gaym_conn *gaym,
-                                        const gchar * name);
-
-GaymBuddy *gaym_get_channel_member_reference(struct gaym_conn
-                                             *gaym, const char *name);
-typedef int (*IRCCmdCallback) (struct gaym_conn * gaym, const char *cmd,
-                               const char *target, const char **args);
-
-int gaym_send(struct gaym_conn *gaym, const char *buf);
-gboolean gaym_blist_timeout(struct gaym_conn *gaym);
-
-char *gaym_mgaym2html(const char *string);
-char *gaym_mgaym2txt(const char *string);
-
-void gaym_register_commands(void);
-void gaym_msg_table_build(struct gaym_conn *gaym);
-void gaym_parse_msg(struct gaym_conn *gaym, char *input);
-char *gaym_parse_ctcp(struct gaym_conn *gaym, const char *from,
-                      const char *to, const char *msg, int notice);
-char *gaym_format(struct gaym_conn *gaym, const char *format, ...);
-
-typedef void (msg_handler) (struct gaym_conn * gaym, const char *name,
-                            const char *from, char **args);
-msg_handler gaym_msg_away;
-msg_handler gaym_msg_default;
-msg_handler gaym_msg_away;
-msg_handler gaym_msg_badmode;
-msg_handler gaym_msg_banned;
-msg_handler gaym_msg_chanmode;
-msg_handler gaym_msg_endwhois;
-msg_handler gaym_msg_endmotd;
-msg_handler gaym_msg_invite;
-msg_handler gaym_msg_inviteonly;
-msg_handler gaym_msg_who;
-msg_handler gaym_msg_chanfull;
-msg_handler gaym_msg_join;
-msg_handler gaym_msg_kick;
-msg_handler gaym_msg_list;
-msg_handler gaym_msg_login_failed;
-msg_handler gaym_msg_mode;
-msg_handler gaym_msg_motd;
-msg_handler gaym_msg_names;
-msg_handler gaym_msg_nick;
-msg_handler gaym_msg_nickused;
-msg_handler gaym_msg_nochan;
-msg_handler gaym_msg_nonick_chan;
-msg_handler gaym_msg_nonick;
-msg_handler gaym_msg_no_such_nick;
-msg_handler gaym_msg_nochangenick;
-msg_handler gaym_msg_nosend;
-msg_handler gaym_msg_notice;
-msg_handler gaym_msg_notinchan;
-msg_handler gaym_msg_notop;
-msg_handler gaym_msg_part;
-msg_handler gaym_msg_ping;
-msg_handler gaym_msg_pong;
-msg_handler gaym_msg_privmsg;
-msg_handler gaym_msg_regonly;
-msg_handler gaym_msg_quit;
-msg_handler gaym_msg_topic;
-msg_handler gaym_msg_trace;
-msg_handler gaym_msg_unknown;
-msg_handler gaym_msg_wallops;
-msg_handler gaym_msg_whois;
-msg_handler gaym_msg_richnames_list;
-msg_handler gaym_msg_create_pay_only;
-msg_handler gaym_msg_pay_channel;
-msg_handler gaym_msg_toomany_channels;
-msg_handler gaym_msg_list_busy;
-
-
-void gaym_cmd_table_build(struct gaym_conn *gaym);
-
-typedef int (cmd_handler) (struct gaym_conn * gaym, const char *cmd,
-                           const char *target, const char **args);
-
-cmd_handler gaym_cmd_default;
-cmd_handler gaym_cmd_away;
-cmd_handler gaym_cmd_ctcp_action;
-cmd_handler gaym_cmd_invite;
-cmd_handler gaym_cmd_join;
-cmd_handler gaym_cmd_kick;
-cmd_handler gaym_cmd_list;
-cmd_handler gaym_cmd_mode;
-cmd_handler gaym_cmd_names;
-cmd_handler gaym_cmd_nick;
-cmd_handler gaym_cmd_op;
-cmd_handler gaym_cmd_privmsg;
-cmd_handler gaym_cmd_part;
-cmd_handler gaym_cmd_ping;
-cmd_handler gaym_cmd_quit;
-cmd_handler gaym_cmd_quote;
-cmd_handler gaym_cmd_query;
-cmd_handler gaym_cmd_remove;
-cmd_handler gaym_cmd_topic;
-cmd_handler gaym_cmd_trace;
-cmd_handler gaym_cmd_wallops;
-cmd_handler gaym_cmd_whois;
-
-
-void gaym_dccsend_send_file(GaimConnection * gc, const char *who,
-                            const char *file);
-void gaym_dccsend_recv(struct gaym_conn *gaym, const char *from,
-                       const char *msg);
-void gaym_get_chat_key_from_weblogin(GaimAccount * account,
-                                     void (*callback) (GaimAccount *));
-
-void gaim_session_fetch(const char *url, gboolean full,
-                        const char *user_agent, gboolean http11,
-                        void (*cb) (gpointer, const char *, size_t),
-                        void *user_data, GaimUrlSession * session);
-
-#endif                          /* _GAIM_GAYM_H */
-
-/**
- * vim:tabstop=4:shiftwidth=4:expandtab:
- */

Copied: qrc/tags/release-0.9.5/gaym/src/gaym.h (from rev 267, qrc/trunk/gaym/src/gaym.h)

Deleted: qrc/tags/release-0.9.5/gaym/src/gayminfo.c
===================================================================
--- qrc/trunk/gaym/src/gayminfo.c	2005-07-30 22:19:23 UTC (rev 259)
+++ qrc/tags/release-0.9.5/gaym/src/gayminfo.c	2005-08-02 06:44:24 UTC (rev 268)
@@ -1,310 +0,0 @@
-/**
- * @file gayminfo.c
- *
- * GayM
- *
- * GayM is the legal property of its developers, whose names are too numerous
- * to list here.  Please refer to the COPYRIGHT file distributed with this
- * source distribution.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
- */
-
-#include "gayminfo.h"
-#include "util.h"
-#include "debug.h"
-
-char *gaym_thumbnail_strdup(const char *info)
-{
-    char *start = strchr(info, ':');
-    char *end = 0;
-    if (start) {
-        start++;
-        end = strchr(info, '#');
-    }
-    if (start != end && end) {
-        return g_strdup_printf("%.*s", end - start, start);
-    } else {
-        return 0;
-    }
-}
-
-char *gaym_bio_strdup(const char *info)
-{
-    char *start = strchr(info, '#');
-    char *end = 0;
-    if (start) {
-        start++;
-        end = strchr(start, 0x01);
-        if (!end)
-            end = strchr(start, 0);
-    }
-
-    if ((end) && (start < end)) {
-        return g_strdup_printf("%.*s", end - start, start);
-    } else {
-        return 0;
-    }
-}
-
-char *gaym_stats_strdup(const char *info)
-{
-
-    char *start = strchr(info, '#');
-
-    if (start)
-        start = strchr(start, 0x01);
-
-    char *end = 0;
-    if (start) {
-        start++;
-        end = strchr(info, '\0');
-    }
-
-    if (start != end && end) {
-        return g_strdup_printf("%.*s", end - start, start);
-    } else {
-        return 0;
-    }
-}
-
-
-void gaym_update_channel_member(struct gaym_conn *gaym, const char *nick,
-                                const char *info)
-{
-    GaymBuddy *cm = gaym_get_channel_member_reference(gaym, nick);
-    if (!cm) {
-        gaim_debug_error("gaym",
-                         "ERROR: A member has joined a channel, or a conversation was opened, but we were unable to add the member to the internal management structure. Report a bug.");
-        return;
-    } else {
-        gchar *stats = gaym_stats_strdup(info);
-        if (stats) {
-            gchar **s = g_strsplit(stats, "|", 3);
-            if (s[0] && strlen(g_strstrip(s[0])) > 0) {
-                cm->sex = g_ascii_strup(s[0], -1);
-            }
-            if (s[1] && strlen(g_strstrip(s[1])) > 0) {
-                cm->age = g_strdup(s[1]);
-            }
-            if (s[2] && strlen(g_strstrip(s[2])) > 0) {
-                cm->location = g_strdup(s[2]);
-            }
-            g_strfreev(s);
-            g_free(stats);
-        }
-        cm->name = g_strdup(nick);
-        cm->bio = gaym_bio_strdup(info);
-        cm->thumbnail = gaym_thumbnail_strdup(info);
-
-    }
-}
-void gaym_fetch_thumbnail_cb(void *user_data, const char *pic_data,
-                             size_t len)
-{
-    if (!user_data)
-        return;
-    struct gaym_fetch_thumbnail_data *d = user_data;
-    if (!pic_data) {
-        return;
-    }
-
-    if (len && !g_strrstr_len(pic_data, len, "Server Error")) {
-        char *dir =
-            g_build_filename(gaim_user_dir(), "icons", "gaym", d->who,
-                             NULL);
-        char *filename = g_strdup(d->filename);
-        char *path = g_build_filename(dir, filename, NULL);
-        gaim_debug_misc("gayminfo", "dir: %s\n", dir);
-        gaim_debug_misc("gayminfo", "filename: %s\n", filename);
-        gaim_debug_misc("gayminfo", "path: %s\n", path);
-        if (!g_file_test(dir, G_FILE_TEST_EXISTS))
-            gaim_build_dir(dir, S_IRUSR | S_IWUSR | S_IXUSR);
-
-        if (path && !g_file_test(path, G_FILE_TEST_EXISTS)) {
-            FILE *file;
-            if ((file = g_fopen(path, "wb"))) {
-                fwrite(pic_data, 1, len, file);
-                fclose(file);
-            } else {
-                gaim_debug_misc("fetch_thumbnail_cb",
-                                "Couldn't write file\n");
-            }
-            g_free(filename);
-            g_free(path);
-            g_free(dir);
-        }
-    }
-    if (GAIM_CONNECTION_IS_VALID(d->gc) && len) {
-        gaim_signal_emit(gaim_accounts_get_handle(), "info-updated",
-                         d->gc, NULL, d->who);
-        if (gaim_find_conversation_with_account(d->who, d->gc->account)) {
-            gaim_buddy_icons_set_for_user(gaim_connection_get_account
-                                          (d->gc), d->who,
-                                          (void *) pic_data, len);
-        }
-
-    } else {
-        gaim_debug_error("gaym", "Fetching buddy icon failed.\n");
-    }
-
-    g_free(d->who);
-    g_free(d);
-}
-
-void gaym_buddy_status(struct gaym_conn *gaym, char *name,
-                       gboolean online, char *info)
-{
-    char *bio = NULL;
-    char *thumbnail = NULL;
-    char *stats = NULL;
-    char *url = NULL;
-    struct gaym_fetch_thumbnail_data *data;
-
-    if (!gaym || !gaym->account || !gaym->buddies || !name) {
-        return;
-    }
-
-    if (info) {
-        bio = gaym_bio_strdup(info);
-        if (bio) {
-            bio = g_strstrip(bio);
-        }
-
-        thumbnail = gaym_thumbnail_strdup(info);
-        if (thumbnail) {
-            thumbnail = g_strstrip(thumbnail);
-        }
-
-        stats = gaym_stats_strdup(info);
-        if (stats) {
-            stats = g_strstrip(stats);
-        }
-    }
-
-    GaimConnection *gc = gaim_account_get_connection(gaym->account);
-
-    if (!gc) {
-        return;
-    }
-
-    struct gaym_buddy *ib = g_hash_table_lookup(gaym->buddies, name);
-
-    char *normalized = g_strdup(gaim_normalize(gaym->account, name));
-
-    if (thumbnail) {
-        gboolean do_fetch = 1;
-        GError *err = NULL;
-        if (!ib || gaim_utf8_strcasecmp(thumbnail, ib->thumbnail)) {
-            char *dirname =
-                g_build_filename(gaim_user_dir(), "icons", "gaym",
-                                 gaim_normalize(gaym->account, name),
-                                 NULL);
-            GDir *gdir = g_dir_open(dirname, 0, &err);
-            if (gdir) {
-                const char *filename;
-
-                while ((filename = g_dir_read_name(gdir)))      // don't
-                    // free
-                    // filename: 
-                    // owned
-                    // by
-                    // glib.
-                {
-                    char *thumbnail_base = g_path_get_basename(thumbnail);
-                    gaim_debug_misc("gaym", "compared %s and %s\n",
-                                    thumbnail_base, filename);
-                    if (!gaim_utf8_strcasecmp(thumbnail_base, filename)) {
-                        do_fetch = 0;
-                        break;
-                    }
-                    g_free(thumbnail_base);
-                }
-            }
-            if (do_fetch) {
-
-                gaim_debug_misc("gaym",
-                                "********************************************\n");
-                gaim_debug_misc("gaym",
-                                "*****************FETCH**********************\n");
-                gaim_debug_misc("gaym",
-                                "********************************************\n");
-                char *hashurl = NULL;
-                hashurl =
-                    g_hash_table_lookup(gaym->confighash,
-                                        "mini-profile-panel.thumbnail-prefix");
-                g_return_if_fail(hashurl != NULL);
-                data = g_new0(struct gaym_fetch_thumbnail_data, 1);
-                data->gc = gaim_account_get_connection(gaym->account);
-                data->who = g_strdup(gaim_normalize(gaym->account, name));
-                data->filename = g_strdup(g_strrstr(thumbnail, "/"));
-                gaim_debug_misc("gayminfo", "Found filename: %s\n",
-                                data->filename);
-                url = g_strdup_printf("%s%s", hashurl, thumbnail);
-                gaim_url_fetch(url, FALSE, "Mozilla/4.0", FALSE,
-                               gaym_fetch_thumbnail_cb, data);
-                g_free(url);
-            }
-
-        }
-    }
-
-    g_free(normalized);
-
-    if (ib) {
-        g_free(ib->bio);
-        ib->bio = NULL;
-        g_free(ib->thumbnail);
-        ib->thumbnail = NULL;
-        g_free(ib->sex);
-        ib->sex = NULL;
-        g_free(ib->age);
-        ib->age = NULL;
-        g_free(ib->location);
-        ib->location = NULL;
-
-        ib->online = online;
-
-        if (bio && strlen(g_strstrip(bio)) > 0) {
-            ib->bio = bio;
-        }
-        if (thumbnail && strlen(g_strstrip(thumbnail)) > 0) {
-            ib->thumbnail = thumbnail;
-        }
-        if (stats && strlen(g_strstrip(stats)) > 0) {
-            gchar **s = g_strsplit(stats, "|", 3);
-            if (s[0] && strlen(g_strstrip(s[0])) > 0) {
-                ib->sex = g_ascii_strup(s[0], -1);
-            }
-            if (s[1] && strlen(g_strstrip(s[1])) > 0) {
-                ib->age = g_strdup(s[1]);
-            }
-            if (s[2] && strlen(g_strstrip(s[2])) > 0) {
-                ib->location = g_strdup(s[2]);
-            }
-            g_strfreev(s);
-            g_free(stats);
-        }
-        GaimBuddy *buddy = gaim_find_buddy(gaym->account, name);
-        if (buddy) {
-            serv_got_update(gc, buddy->name, online, 0, 0, 0, 0);
-        }
-    }
-    return;
-}
-
-/**
- * vim:tabstop=4:shiftwidth=4:expandtab:
- */

Copied: qrc/tags/release-0.9.5/gaym/src/gayminfo.c (from rev 267, qrc/trunk/gaym/src/gayminfo.c)

Deleted: qrc/tags/release-0.9.5/gaym/src/gayminfo.h
===================================================================
--- qrc/trunk/gaym/src/gayminfo.h	2005-07-30 22:19:23 UTC (rev 259)
+++ qrc/tags/release-0.9.5/gaym/src/gayminfo.h	2005-08-02 06:44:24 UTC (rev 268)
@@ -1,98 +0,0 @@
-/**
- * @file gayminfo.h GayM User Info (IRC-based) API
- *
- * GayM
- *
- * GayM is the legal property of its developers, whose names are too numerous
- * to list here.  Please refer to the COPYRIGHT file distributed with this
- * source distribution.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
- */
-#ifndef _GAIM_GAYM_GAYMINFO_H_
-#define _GAIM_GAYM_GAYMINFO_H_
-
-#include <glib.h>
-
-#include "gaym.h"
-
-/**
- * Begin temporary, pending further refactoring
- */
-#include "connection.h"
-struct gaym_fetch_thumbnail_data {
-    GaimConnection *gc;
-    char *who;
-    char *filename;
-    char *bio;
-    char *stats;
-    // const char *pic_data;
-    // gint pic_data_len;
-};
-void gaym_fetch_thumbnail_cb(void *user_data, const char *pic_data,
-                             size_t len);
-/**
- * End temporary, pending further refactoring
- */
-
-/**
- * Extract the thumbnail string from the extra IRC info about the user.
- * The returned string should be freed when no longer needed.
- *
- * @param info The extra IRC info string.
- *
- * @return The thumbnail string.
- */
-char *gaym_thumbnail_strdup(const char *info);
-
-/**
- * Extract the bio string from the extra IRC info about the user.
- * The returned string should be freed when no longer needed.
- *
- * @param info The extra IRC info string.
- *
- * @return The bio string.
- */
-char *gaym_bio_strdup(const char *info);
-
-/**
- * Extract the stats string from the extra IRC info about the user.
- * The returned string should be freed when no longer needed.
- *
- * @param info The extra IRC info string.
- *
- * @return The stats string.
- */
-char *gaym_stats_strdup(const char *info);
-
-/**
- * Process extra IRC information about a buddy
- *
- * @param gaym The protocol-specific data related to the connection.
- * @param name The buddy name
- * @param online Is the buddy on line.
- * @param info The extra IRC info string about the buddy, if any.
- */
-void gaym_buddy_status(struct gaym_conn *gaym, char *name,
-                       gboolean online, char *info);
-
-
-void gaym_update_channel_member(struct gaym_conn *gaym, const char *nick,
-                                const char *info);
-#endif                          /* _GAIM_GAYM_GAYMINFO_H_ */
-
-/**
- * vim:tabstop=4:shiftwidth=4:expandtab:
- */

Copied: qrc/tags/release-0.9.5/gaym/src/gayminfo.h (from rev 267, qrc/trunk/gaym/src/gayminfo.h)

Deleted: qrc/tags/release-0.9.5/gaym/src/helpers.c
===================================================================
--- qrc/trunk/gaym/src/helpers.c	2005-07-30 22:19:23 UTC (rev 259)
+++ qrc/tags/release-0.9.5/gaym/src/helpers.c	2005-08-02 06:44:24 UTC (rev 268)
@@ -1,509 +0,0 @@
-/**
- * GayM
- *
- * GayM is the legal property of its developers, whose names are too numerous
- * to list here.  Please refer to the COPYRIGHT file distributed with this
- * source distribution.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
- */
-#include "internal.h"
-#include "debug.h"
-#include "helpers.h"
-
-void gcom_nick_to_gaym(char *nick)
-{
-    int i = 0;
-
-    if (!nick) {
-        return;
-    }
-
-    /**
-     * If there is a "|" in the first position, it must be removed.
-     */
-    if (nick[0] == '|') {
-        nick[0] = ' ';
-        nick = g_strchug(nick);
-    }
-
-    /**
-     * Any remaining "|" must be replaced with "."
-     */
-    for (i = 0; i < strlen(nick); i++) {
-        if (nick[i] == '|') {
-            nick[i] = '.';
-        }
-    }
-    return;
-}
-
-char *gaym_nick_to_gcom_strdup(const char *nick)
-{
-    int i = 0;
-    char *converted = NULL;
-
-    /**
-     * If the first character is not an upper or lower case letter
-     * then gay.com's IRC server requires "|" to be prepended
-     */
-    if (g_ascii_isalpha(nick[0])) {
-        converted = g_strdup_printf("%s", nick);
-    } else {
-        converted = g_strdup_printf("|%s", nick);
-    }
-
-    /**
-     * gay.com's IRC server requires all "." in nicks to be represented
-     * by "|"
-     */
-    for (i = 0; i < strlen(converted); i++) {
-        if (converted[i] == '.') {
-            converted[i] = '|';
-        }
-    }
-    return converted;
-}
-
-char *return_string_between(const char *startbit, const char *endbit,
-                            const char *source)
-{
-    char *start = 0;
-    char *end = 0;
-
-    if (!source || !startbit || !endbit)
-        return 0;
-
-    start = strstr(source, startbit);
-
-    if (start) {
-        start += strlen(startbit);
-        end = strstr(start, endbit);
-    }
-    /**
-     * gaim_debug_misc("gaym", "source: %d; start: %d; end: %d\n", source,
-     * start, end);
-     */
-    if (start && end) {
-        return g_strdup_printf("%.*s", end - start, start);
-    } else {
-        return 0;
-    }
-}
-
-gchar *ascii2native(const gchar * str)
-{
-    gint i;                     /* Temp variable */
-    gint len = strlen(str);
-
-    /**
-     * This allocates enough space, and probably a little too much.
-     */
-    gchar *outstr = g_malloc(len * sizeof(guchar));
-
-    gint pos = 0;               /* Current position in the output string. */
-    for (i = 0; i < len; i++) {
-        /**
-         * If we see a '\u' then parse it.
-         */
-        if (((char) *(str + i) == '\\')
-            && (((char) *(str + i + 1)) == 'u')
-            && (g_ascii_isxdigit((char) *(str + i + 2)))
-            && (g_ascii_isxdigit((char) *(str + i + 3)))
-            && (g_ascii_isxdigit((char) *(str + i + 4)))
-            && (g_ascii_isxdigit((char) *(str + i + 5)))) {
-
-            gint bytes;
-            gchar unibuf[6];
-            gunichar value = 0;
-
-            /**
-             * Assumption that the /u will be followed by 4 hex digits.
-             * <<12 to multiply by 16^3, <<8 for 16^2, <<4 for 16
-             * I.e., each hex digit
-             */
-            value = (g_ascii_xdigit_value((gchar) * (str + i + 2)) << 12) +
-                (g_ascii_xdigit_value((gchar) * (str + i + 3)) << 8) +
-                (g_ascii_xdigit_value((gchar) * (str + i + 4)) << 4) +
-                (g_ascii_xdigit_value((gchar) * (str + i + 5)));
-
-            bytes = g_unichar_to_utf8(value, unibuf);
-            int j;
-            for (j = 0; j < bytes; j++) {
-                outstr[pos++] = unibuf[j];
-            }
-            /**
-             * Move past the entire escape sequence.
-             */
-            i += 5;
-        }
-        /**
-         * Otherwise, just copy the byte.
-         */
-        else {
-            outstr[pos++] = str[i];
-        }
-    }
-    return outstr;
-}
-
-gboolean gaym_nick_check(const char *nick)
-{
-    gboolean retval = FALSE;
-
-    if (!nick) {
-        return retval;
-    }
-
-    char *allowed =
-        "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_.-\0";
-    int i = 0;
-    int j = 0;
-
-    /**
-     * validate characters
-     */
-    for (i = 0; nick[i]; i++) {
-        retval = FALSE;
-        for (j = 0; allowed[j]; j++) {
-            if (nick[i] == allowed[j]) {
-                retval = TRUE;
-                break;
-            }
-        }
-        if (!retval) {
-            break;
-        }
-    }
-    if (!retval) {
-        return retval;
-    }
-    /**
-     * validate length
-     */
-    if (i > 30) {
-        retval = FALSE;
-        return retval;
-    }
-    /**
-     * its valid!
-     */
-    return retval;
-}
-
-void replace_dollar_n(gpointer key, gpointer value, gpointer user_data)
-{
-
-    /**
-     * replace $[0-9] with %s, so we can use printf style
-     * processing with the provided property values
-     */
-    gchar *pos = (gchar *) value;
-    while ((pos = (strchr(pos, '$')))) {
-        pos++;
-        if (g_ascii_isdigit(*pos)) {
-            *pos = 's';
-            *(pos - 1) = '%';
-
-        }
-    }
-}
-
-GHashTable *gaym_properties_new(const gchar * str)
-{
-
-    gchar *tmpstr = NULL;
-    gchar **tmparr = NULL;
-    gchar **proparr = NULL;
-    int i = 0;
-
-    GHashTable *props =
-        g_hash_table_new_full(g_str_hash, g_str_equal, g_free, g_free);
-
-    /**
-     * convert ascii-escaped to native
-     */
-    tmpstr = ascii2native(str);
-
-    /**
-     * strip out continuation character followed by newline 
-     */
-    // tmparr = g_strsplit(tmpstr, "\\\n", -1);
-    // g_free(tmpstr);
-    // tmpstr = g_strjoinv(NULL, tmparr);
-    // g_strfreev(tmparr);
-    /**
-     * Since the properties get stripped of spaces later,
-     * just replace \\\n with <space>\n in-place, for speed.
-     * */
-    char *pos = tmpstr;
-    while ((pos = g_strrstr(pos, "\\\n"))) {
-        *pos = ' ';
-        *(pos + 1) = ' ';
-    }
-    /**
-     * We're getting close.  Now we need an array as follows:
-     *
-     * property=value
-     * property=value
-     * ...
-     */
-    tmparr = g_strsplit(tmpstr, "\n", -1);
-
-    for (i = 0; tmparr[i] != NULL; i++) {
-        /**
-         * do nothing if this is a blank line
-         */
-        if (strlen(g_strstrip(tmparr[i])) == 0) {
-            continue;
-        }
-        /**
-         * do nothing if this is a comment line
-         */
-        if (tmparr[i][0] == '#') {
-            continue;
-        }
-        /**
-         * this must be a property=value string, so we make
-         * it into a 2-element array:
-         *
-         * property
-         * value
-         *
-         * but we won't store it in our hash table unless both
-         * have real values after stripping whitespace
-         */
-        proparr = g_strsplit(tmparr[i], "=", 2);
-        if (proparr[0] && strlen(g_strstrip(proparr[0])) > 0
-            && proparr[1] && strlen(g_strstrip(proparr[1])) > 0) {
-
-            g_hash_table_insert(props, g_strdup(proparr[0]),
-                                g_strdup(proparr[1]));
-
-        }
-        g_strfreev(proparr);
-    }
-
-    g_strfreev(tmparr);
-
-    g_hash_table_foreach(props, replace_dollar_n, NULL);
-
-    return props;
-}
-
-int roomlist_level_strip(char *description)
-{
-    int val = 0;
-    int i = 0;
-
-    if (!description) {
-        return val;
-    }
-
-    for (i = 0; i < strlen(description); i++) {
-        if (description[i] == '+') {
-            description[i] = ' ';
-        } else {
-            break;
-        }
-        val++;
-    }
-
-    description = g_strchug(description);
-
-    return val;
-}
-
-GaimRoomlistRoom *find_parent(int level, int old_level,
-                              GaimRoomlistRoom * last_room)
-{
-    GaimRoomlistRoom *parent = NULL;
-    int i = 0;
-
-    if (level == 0) {
-        /* do nothing */
-    } else if (level == old_level) {
-        parent = last_room->parent;
-    } else if (level > old_level) {
-        parent = last_room;
-    } else if (level < old_level) {
-        parent = last_room;
-        for (i = old_level - level; i >= 0; i--) {
-            parent = parent->parent;
-        }
-    }
-    return parent;
-}
-
-void build_roomlist_from_config(GaimRoomlist * roomlist,
-                                GHashTable * confighash, gchar * pattern)
-{
-    gchar **roominst = NULL;
-    gchar *altname = NULL;
-    gchar *normalized = NULL;
-    gchar *lowercase = NULL;
-    gchar *found = NULL;
-    int level = 0;
-    int old_level = 0;
-    int i = 0;
-    GaimRoomlistRoom *room = NULL;
-    GaimRoomlistRoom *parent = NULL;
-
-    g_return_if_fail(roomlist != NULL);
-    g_return_if_fail(confighash != NULL);
-
-    int max = gaim_prefs_get_int("/plugins/prpl/gaym/chat_room_instances");
-
-    gchar *roomstr = g_hash_table_lookup(confighash, "roomlist");
-    g_return_if_fail(roomstr != NULL);
-
-    gchar **roomarr = g_strsplit(roomstr, "|", -1);
-
-    /**
-     * We need to skip the first instance, because they start
-     * with a "|", which we've just split by, leaving a blank
-     * at the beginning of the list
-     */
-    for (i = 1; roomarr[i] != NULL; i++) {
-        if (roomarr[i][0] == '#') {
-            /**
-             * This is an actual room string, break it into its
-             * component parts, determine the level and the parent,
-             * and add this as both a room and a category
-             */
-            if (pattern != NULL) {
-                lowercase = g_utf8_strdown(roomarr[i], -1);
-                normalized =
-                    g_utf8_normalize(lowercase, -1, G_NORMALIZE_ALL);
-                found = g_strstr_len(normalized, -1, pattern);
-                g_free(normalized);
-                g_free(lowercase);
-            }
-            if (found != NULL || pattern == NULL) {
-                found = NULL;
-                roominst = g_strsplit(roomarr[i], " ", 2);
-                level = roomlist_level_strip(roominst[1]);
-                parent = find_parent(level, old_level, room);
-                altname = g_strdup_printf("%s:*", roominst[1]);
-                if (max == 0) {
-                    room =
-                        gaim_roomlist_room_new(GAIM_ROOMLIST_ROOMTYPE_ROOM,
-                                               altname, parent);
-                } else {
-                    room =
-                        gaim_roomlist_room_new
-                        (GAIM_ROOMLIST_ROOMTYPE_CATEGORY |
-                         GAIM_ROOMLIST_ROOMTYPE_ROOM, altname, parent);
-                }
-                gaim_roomlist_room_add_field(roomlist, room, altname);
-                gaim_roomlist_room_add_field(roomlist, room, roominst[0]);
-                gaim_roomlist_room_add(roomlist, room);
-                g_free(altname);
-                g_strfreev(roominst);
-                old_level = level;
-            }
-        } else if (pattern == NULL) {
-            /**
-             * This is a plain category, determine the level and
-             * the parent and add it.
-             */
-            level = roomlist_level_strip(roomarr[i]);
-            parent = find_parent(level, old_level, room);
-            room =
-                gaim_roomlist_room_new(GAIM_ROOMLIST_ROOMTYPE_CATEGORY,
-                                       roomarr[i], parent);
-            gaim_roomlist_room_add(roomlist, room);
-        }
-        old_level = level;
-    }
-    g_strfreev(roomarr);
-    gaim_roomlist_set_in_progress(roomlist, FALSE);
-}
-
-GaimConvChatBuddyFlags chat_pecking_order(const char *extra)
-{
-    GaimConvChatBuddyFlags flags = GAIM_CBFLAGS_NONE;
-    if (extra[0] == '1' && extra[1] == '8') {
-        /* profile and g-rated photo */
-        flags = GAIM_CBFLAGS_FOUNDER;
-    } else if (extra[0] == '1' && extra[1] == '9') {
-        /* profile and x-rated photo */
-        flags = GAIM_CBFLAGS_OP;
-    } else if (extra[0] == '8') {
-        /* profile but no photo */
-        flags = GAIM_CBFLAGS_HALFOP;
-    } else if (extra[0] == '0') {
-        /* no profile and no photo */
-        flags = GAIM_CBFLAGS_NONE;
-    } else {
-        /* unknown */
-        flags = GAIM_CBFLAGS_VOICE;
-    }
-    return flags;
-}
-
-char *build_tooltip_text(struct gaym_buddy *ib)
-{
-    char *escaped;
-    GString *tooltip = g_string_new("");
-    g_string_printf(tooltip, "<b><i>%s</i></b>", ib->name);
-
-    g_return_val_if_fail(ib != NULL, NULL);
-
-    if (ib->sex) {
-        escaped = g_markup_escape_text(ib->sex, strlen(ib->sex));
-        g_string_append_printf(tooltip, _("\n<b>%s:</b> %s"), _("Sex"),
-                               escaped);
-        g_free(escaped);
-    }
-
-    if (ib->age) {
-        escaped = g_markup_escape_text(ib->age, strlen(ib->age));
-        g_string_append_printf(tooltip, _("\n<b>%s:</b> %s"), _("Age"),
-                               escaped);
-        g_free(escaped);
-    }
-    if (ib->location) {
-        escaped = g_markup_escape_text(ib->location, strlen(ib->location));
-        g_string_append_printf(tooltip, _("\n<b>%s:</b> %s"),
-                               _("Location"), escaped);
-        g_free(escaped);
-    }
-
-    if (ib->bio) {
-        escaped = g_markup_escape_text(ib->bio, strlen(ib->bio));
-        g_string_append_printf(tooltip, _("\n<b>%s:</b> %s"), _("Bio"),
-                               escaped);
-        g_free(escaped);
-    }
-
-    if (tooltip->len == 0) {
-        g_string_append_printf(tooltip, _(" No info."));
-    }
-    // g_string_erase(tooltip, 0, 1);
-
-    return g_string_free(tooltip, FALSE);
-}
-
-GaimConvChatBuddyFlags include_chat_entry_order(GaimConvChatBuddyFlags
-                                                flags, gint entry)
-{
-
-    return (flags | (entry << 4));
-}
-
-/**
- * vim:tabstop=4:shiftwidth=4:expandtab:
- */

Copied: qrc/tags/release-0.9.5/gaym/src/helpers.c (from rev 267, qrc/trunk/gaym/src/helpers.c)

Deleted: qrc/tags/release-0.9.5/gaym/src/msgs.c
===================================================================
--- qrc/trunk/gaym/src/msgs.c	2005-07-30 22:19:23 UTC (rev 259)
+++ qrc/tags/release-0.9.5/gaym/src/msgs.c	2005-08-02 06:44:24 UTC (rev 268)
@@ -1,1331 +0,0 @@
-/**
- * @file msgs.c
- *
- * GayM
- *
- * GayM is the legal property of its developers, whose names are too numerous
- * to list here.  Please refer to the COPYRIGHT file distributed with this
- * source distribution.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
- */
-
-#include "internal.h"
-#include "conversation.h"
-#include "blist.h"
-#include "notify.h"
-#include "util.h"
-#include "debug.h"
-#include "imgstore.h"
-#include "request.h"
-#include "privacy.h"
-#include "prefs.h"
-
-#include "botfilter.h"
-#include "gaym.h"
-#include "gayminfo.h"
-#include "gaympriv.h"
-#include "helpers.h"
-
-static char *gaym_mask_nick(const char *mask)
-{
-    char *end, *buf;
-
-    end = strchr(mask, '!');
-    if (!end)
-        buf = g_strdup(mask);
-    else
-        buf = g_strndup(mask, end - mask);
-
-    return buf;
-}
-
-static void gaym_chat_remove_buddy(GaimConversation * convo, char *data[2])
-{
-    /**
-     * FIXME: is *message ever used ???
-     */
-    char *message = g_strdup_printf("quit: %s", data[1]);
-
-    if (gaim_conv_chat_find_user(GAIM_CONV_CHAT(convo), data[0]))
-        gaim_conv_chat_remove_user(GAIM_CONV_CHAT(convo), data[0], NULL);
-
-    g_free(message);
-}
-
-void gaym_msg_default(struct gaym_conn *gaym, const char *name,
-                      const char *from, char **args)
-{
-    gaim_debug(GAIM_DEBUG_INFO, "gaym", "Unrecognized message: %s\n",
-               args[0]);
-}
-
-void gaym_msg_away(struct gaym_conn *gaym, const char *name,
-                   const char *from, char **args)
-{
-    GaimConnection *gc = gaim_account_get_connection(gaym->account);
-
-    if (!args || !args[1] || !gc) {
-        return;
-    }
-
-    gcom_nick_to_gaym(args[1]);
-    serv_got_im(gc, args[1], args[2], GAIM_CONV_IM_AUTO_RESP, time(NULL));
-}
-
-static void gaym_fetch_photo_cb(void *user_data, const char *info_data,
-                                size_t len)
-{
-    if (!info_data || !user_data) {
-        return;
-    }
-
-    struct gaym_fetch_thumbnail_data *d = user_data;
-
-    char *info, *t;
-
-    struct gaym_conn *gaym = d->gc->proto_data;
-
-    char *hashurl =
-        g_hash_table_lookup(gaym->confighash, "view-profile-url");
-    g_return_if_fail(hashurl != NULL);
-
-    int id = gaim_imgstore_add(info_data, len, NULL);
-    if (d->stats && d->bio)
-        info =
-            g_strdup_printf
-            ("<b>Stats:</b> %s<br><b>Bio:</b> %s<br><img id=%d><br><a href='%s%s'>Full Profile</a>",
-             d->stats, d->bio, id, hashurl, d->who);
-    else if (d->stats)
-        info =
-            g_strdup_printf
-            ("<b>Stats:</b> %s<br><img id=%d><br><a href='%s%s'>Full Profile</a>",
-             d->stats, id, hashurl, d->who);
-    else if (d->bio)
-        info =
-            g_strdup_printf
-            ("<b>Bio:</b> %s<br><img id=%d><br><a href='%s%s'>Full Profile</a>",
-             d->bio, id, hashurl, d->who);
-    else
-        info =
-            g_strdup_printf
-            ("No Info Found<br><img id=%d><br><a href='%s%s'>Full Profile</a>",
-             id, hashurl, d->who);
-
-    gaim_notify_userinfo(d->gc, d->who,
-                         t = g_strdup_printf("Gay.com - %s", d->who),
-                         d->who, NULL, info, NULL, NULL);
-    g_free(t);
-
-    if (d) {
-        if (d->who)
-            g_free(d->who);
-        if (d->bio)
-            g_free(d->bio);
-        if (d->stats)
-            g_free(d->stats);
-        g_free(d);
-    }
-    gaim_imgstore_unref(id);
-}
-
-static void gaym_fetch_info_cb(void *user_data, const char *info_data,
-                               size_t len)
-{
-    struct gaym_fetch_thumbnail_data *d = user_data;
-    char *picpath;
-    char *picurl;
-    char *info, *t;
-    char *match = "pictures.0.url=";
-
-    struct gaym_conn *gaym = d->gc->proto_data;
-
-    char *hashurl =
-        g_hash_table_lookup(gaym->confighash, "view-profile-url");
-    g_return_if_fail(hashurl != NULL);
-
-    if (d->stats && d->bio)
-        info =
-            g_strdup_printf
-            ("<b>Stats:</b> %s<br><b>Bio:</b> %s<br><a href='%s%s'>Full Profile</a>",
-             d->stats, d->bio, hashurl, d->who);
-    else if (d->stats)
-        info =
-            g_strdup_printf
-            ("<b>Stats:</b> %s<br><a href='%s%s'>Full Profile</a>",
-             d->stats, hashurl, d->who);
-    else if (d->bio)
-        info =
-            g_strdup_printf
-            ("<b>Bio:</b> %s<br><a href='%s%s'>Full Profile</a>",
-             d->bio, hashurl, d->who);
-    else
-        info =
-            g_strdup_printf
-            ("No Info Found<br><a href='%s%s'>Full Profile</a>",
-             hashurl, d->who);
-
-    picpath = return_string_between(match, "\n", info_data);
-    if (!picpath || strlen(picpath) == 0) {
-        gaim_notify_userinfo(d->gc, d->who,
-                             t = g_strdup_printf("Gay.com - %s", d->who),
-                             d->who, NULL, info, NULL, NULL);
-        g_free(t);
-        return;
-    }
-
-    picurl = g_strdup_printf("http://www.gay.com%s", picpath);
-    if (picurl) {
-        gaim_url_fetch(picurl, FALSE, "Mozilla/4.0 (compatible; MSIE 5.0)",
-                       FALSE, gaym_fetch_photo_cb, user_data);
-        return;
-    }
-}
-
-void gaym_msg_no_such_nick(struct gaym_conn *gaym, const char *name,
-                           const char *from, char **args)
-{
-    /**
-     * name = 701
-     * from = irc.server.name
-     * args[1] = the nick that wasn't found
-     */
-
-    if (!gaym || !args || !args[1]) {
-        return;
-    }
-
-    gcom_nick_to_gaym(args[1]);
-
-    gaym_buddy_status(gaym, args[1], FALSE, NULL);
-
-    char *normalized = g_strdup(gaim_normalize(gaym->account, args[1]));
-
-    if (g_hash_table_lookup(gaym->info_window_needed, normalized)) {
-        g_hash_table_remove(gaym->info_window_needed, normalized);
-
-        char *hashurl =
-            g_hash_table_lookup(gaym->confighash, "view-profile-url");
-        g_return_if_fail(hashurl != NULL);
-
-        char *buf;
-        buf =
-            g_strdup_printf
-            ("That user is not logged on. Check <a href='%s%s'>here</a> to see if that user has a profile.",
-             hashurl, args[1]);
-        gaim_notify_userinfo(gaim_account_get_connection(gaym->account),
-                             NULL, NULL, "No such user", NULL, buf, NULL,
-                             NULL);
-    }
-    g_free(normalized);
-}
-
-void gaym_msg_whois(struct gaym_conn *gaym, const char *name,
-                    const char *from, char **args)
-{
-    /**
-     * name = 311
-     * from = irc.server.name
-     * args[1] = the nick that we have information about
-     */
-
-    if (!gaym || !args || !args[1]) {
-        return;
-    }
-
-    gcom_nick_to_gaym(args[1]);
-
-    gaym_buddy_status(gaym, args[1], TRUE, args[5]);
-
-    char *normalized = g_strdup(gaim_normalize(gaym->account, args[1]));
-
-    struct gaym_fetch_thumbnail_data *data;
-
-    // Update, but then release the reference. It was already opened
-    // during conversation-created.
-    gaym_update_channel_member(gaym, args[1], args[5]);
-    gaym_unreference_channel_member(gaym, args[1]);
-    gaim_signal_emit(gaim_accounts_get_handle(), "info-updated",
-                     gaym->account, args[1]);
-
-    if (g_hash_table_lookup(gaym->info_window_needed, normalized)) {
-
-        data = g_new0(struct gaym_fetch_thumbnail_data, 1);
-        data->gc = gaim_account_get_connection(gaym->account);
-        data->who = g_strdup(args[1]);
-        data->bio = gaym_bio_strdup(args[5]);
-        data->stats = gaym_stats_strdup(args[5]);
-        g_hash_table_remove(gaym->info_window_needed, normalized);
-        char *hashurl = g_hash_table_lookup(gaym->confighash,
-                                            "ohm.profile-url");
-        g_return_if_fail(hashurl != NULL);
-
-        char *infourl = g_strdup_printf("%s?pw=%s&name=%s", hashurl,
-                                        gaym->chat_key, args[1]);
-        if (infourl) {
-            gaim_url_fetch(infourl, FALSE,
-                           "Mozilla/4.0 (compatible; MSIE 5.0)", FALSE,
-                           gaym_fetch_info_cb, data);
-            g_free(infourl);
-        }
-    }
-    g_free(normalized);
-}
-
-void gaym_msg_login_failed(struct gaym_conn *gaym, const char *name,
-                           const char *from, char **args)
-{
-
-
-
-    gaym_cmd_quit(gaym, "quit", NULL, NULL);
-
-    // if (gc->inpa)
-    // gaim_input_remove(gc->inpa);
-
-    // g_free(gaym->inbuf);
-    // gaim_debug_misc("gaym", "Login failed. closing fd %i\n", gaym->fd);
-    // close(gaym->fd);
-    // gaim_debug_misc("gaym", "Get chatkey from weblogin\n");
-    // gaym_get_hash_from_weblogin(gaym->account,
-    // gaym_login_with_chat_key);
-
-}
-
-void gaym_msg_list(struct gaym_conn *gaym, const char *name,
-                   const char *from, char **args)
-{
-    /**
-     * If you free anything here related to the roomlist
-     * be sure you test what happens when the roomlist reference
-     * count goes to zero! Because it may crash gaim.
-     */
-    if (!gaym->roomlist) {
-        return;
-    }
-    /**
-     * Begin result of member created room list
-     */
-    if (!strcmp(name, "321") && gaym->roomlist_filter == NULL) {
-        GaimRoomlistRoom *room;
-        room = gaim_roomlist_room_new(GAIM_ROOMLIST_ROOMTYPE_CATEGORY,
-                                      _("Member Created"), NULL);
-        gaim_roomlist_room_add(gaym->roomlist, room);
-        gaim_roomlist_set_in_progress(gaym->roomlist, TRUE);
-        return;
-    }
-
-    /**
-     * The list of member created rooms
-     */
-    if (!strcmp(name, "322")) {
-        GaimRoomlistRoom *room;
-        char *field_start = NULL;
-        char *field_end = NULL;
-        size_t field_len = 0;
-        int i = 0;
-
-        if (!args[1]) {
-            return;
-        }
-
-        /**
-         * strip leading "#_" and trailing "=1"
-         */
-        field_start = strchr(args[1], '_');
-        field_end = strrchr(args[1], '=');
-
-        if (!field_start || !field_end) {
-            gaim_debug_error("gaym",
-                             "Member created room list parsing error");
-            return;
-        }
-        field_start++;
-        field_end = field_end + 2;
-
-        field_len = field_end - field_start;
-
-        char *field_name = g_strndup(field_start, field_len);
-
-        /**
-         * replace all remaining "_" with " "
-         */
-        for (i = 0; field_name[i] != '\0'; i++) {
-            if (field_name[i] == '_') {
-                field_name[i] = ' ';
-            }
-        }
-        /**
-         * replace '=' with ':'
-         */
-        field_name[i - 2] = ':';
-
-        gchar *lowercase = g_utf8_strdown(field_name, -1);
-        gchar *normalized =
-            g_utf8_normalize(lowercase, -1, G_NORMALIZE_ALL);
-        g_free(lowercase);
-        if (gaym->roomlist_filter == NULL ||
-            g_strstr_len(normalized, -1, gaym->roomlist_filter) != NULL) {
-
-            room = gaim_roomlist_room_new(GAIM_ROOMLIST_ROOMTYPE_ROOM,
-                                          field_name,
-                                          g_list_nth_data(gaym->roomlist->
-                                                          rooms, 0));
-            gaim_roomlist_room_add_field(gaym->roomlist, room, field_name);
-            gaim_roomlist_room_add_field(gaym->roomlist, room, args[1]);
-            gaim_roomlist_room_add(gaym->roomlist, room);
-        }
-        g_free(normalized);
-        g_free(field_name);
-    }
-
-    /**
-     * End result of member created room list
-     * This is our trigger to add the static rooms
-     */
-    if (!strcmp(name, "323")) {
-        build_roomlist_from_config(gaym->roomlist, gaym->confighash,
-                                   gaym->roomlist_filter);
-        if (gaym->roomlist_filter) {
-            g_free(gaym->roomlist_filter);
-            gaym->roomlist_filter = NULL;
-        }
-        return;
-    }
-}
-
-void gaym_msg_unknown(struct gaym_conn *gaym, const char *name,
-                      const char *from, char **args)
-{
-    GaimConnection *gc = gaim_account_get_connection(gaym->account);
-    char *buf;
-
-    if (!args || !args[1] || !gc)
-        return;
-
-    buf = g_strdup_printf(_("Unknown message '%s'"), args[1]);
-    gaim_notify_error(gc, _("Unknown message"), buf,
-                      _
-                      ("Gaim has sent a message the IRC server did not understand."));
-    g_free(buf);
-}
-
-void gaym_msg_names(struct gaym_conn *gaym, const char *name,
-                    const char *from, char **args)
-{
-    char *names, *cur, *end, *tmp, *msg;
-    GaimConversation *convo;
-
-    if (!strcmp(name, "366")) {
-        convo =
-            gaim_find_conversation_with_account(gaym->nameconv ? gaym->
-                                                nameconv : args[1],
-                                                gaym->account);
-        if (!convo) {
-            gaim_debug(GAIM_DEBUG_ERROR, "gaym",
-                       "Got a NAMES list for %s, which doesn't exist\n",
-                       args[2]);
-            g_string_free(gaym->names, TRUE);
-            gaym->names = NULL;
-            g_free(gaym->nameconv);
-            gaym->nameconv = NULL;
-            return;
-        }
-
-        names = cur = g_string_free(gaym->names, FALSE);
-        gaym->names = NULL;
-        if (gaym->nameconv) {
-            msg =
-                g_strdup_printf(_("Users on %s: %s"),
-                                args[1] ? args[1] : "",
-                                names ? names : "");
-            if (gaim_conversation_get_type(convo) == GAIM_CONV_CHAT)
-                gaim_conv_chat_write(GAIM_CONV_CHAT(convo), "", msg,
-                                     GAIM_MESSAGE_SYSTEM |
-                                     GAIM_MESSAGE_NO_LOG, time(NULL));
-            else
-                gaim_conv_im_write(GAIM_CONV_IM(convo), "", msg,
-                                   GAIM_MESSAGE_SYSTEM |
-                                   GAIM_MESSAGE_NO_LOG, time(NULL));
-            g_free(msg);
-            g_free(gaym->nameconv);
-            gaym->nameconv = NULL;
-        } else {
-            GList *users = NULL;
-
-            while (*cur) {
-                end = strchr(cur, ' ');
-                tmp = g_strndup(cur, end - cur);
-                gcom_nick_to_gaym(tmp);
-                users = g_list_prepend(users, tmp);
-                cur = end;
-                if (*cur)
-                    cur++;
-            }
-            users = g_list_reverse(users);
-
-            if (users != NULL) {
-                GList *l;
-
-                gaim_conv_chat_add_users(GAIM_CONV_CHAT(convo), users,
-                                         NULL);
-
-                for (l = users; l != NULL; l = l->next)
-                    g_free(l->data);
-
-                g_list_free(users);
-            }
-        }
-        g_free(names);
-    } else {
-        if (!gaym->names)
-            gaym->names = g_string_new("");
-
-        gaym->names = g_string_append(gaym->names, args[3]);
-    }
-}
-
-/**
- * Change this to WELCOME
- */
-
-void gaym_msg_endmotd(struct gaym_conn *gaym, const char *name,
-                      const char *from, char **args)
-{
-    GaimConnection *gc;
-
-    gaim_debug_misc("gaym", "Got motd\n");
-
-    gc = gaim_account_get_connection(gaym->account);
-    if (!gc) {
-        gaim_debug_misc("gaym", "!gc ???\n");
-        return;
-    }
-    gaim_connection_set_state(gc, GAIM_CONNECTED);
-    serv_finish_login(gc);
-
-    gaym_blist_timeout(gaym);
-    if (!gaym->timer)
-        gaym->timer =
-            gaim_timeout_add(BLIST_UPDATE_PERIOD,
-                             (GSourceFunc) gaym_blist_timeout,
-                             (gpointer) gaym);
-}
-
-void gaym_msg_nochan(struct gaym_conn *gaym, const char *name,
-                     const char *from, char **args)
-{
-    GaimConnection *gc = gaim_account_get_connection(gaym->account);
-
-    if (gc == NULL || args == NULL || args[1] == NULL)
-        return;
-
-    gaim_notify_error(gc, NULL, _("No such channel"), args[1]);
-}
-
-void gaym_msg_nonick_chan(struct gaym_conn *gaym, const char *name,
-                          const char *from, char **args)
-{
-    GaimConnection *gc = gaim_account_get_connection(gaym->account);
-
-    if (gc == NULL || args == NULL || args[1] == NULL)
-        return;
-
-    gaim_notify_error(gc, NULL, _("Not logged in:"), args[1]);
-}
-
-void gaym_msg_nonick(struct gaym_conn *gaym, const char *name,
-                     const char *from, char **args)
-{
-    GaimConnection *gc;
-    GaimConversation *convo;
-
-    convo = gaim_find_conversation_with_account(args[1], gaym->account);
-    if (convo) {
-        if (gaim_conversation_get_type(convo) == GAIM_CONV_CHAT) {
-            /* does this happen? */
-            gaim_conv_chat_write(GAIM_CONV_CHAT(convo), args[1],
-                                 _("no such channel"),
-                                 GAIM_MESSAGE_SYSTEM | GAIM_MESSAGE_NO_LOG,
-                                 time(NULL));
-        } else {
-            gaim_conv_im_write(GAIM_CONV_IM(convo), args[1],
-                               _("User is not logged in"),
-                               GAIM_MESSAGE_SYSTEM | GAIM_MESSAGE_NO_LOG,
-                               time(NULL));
-        }
-    } else {
-        if ((gc = gaim_account_get_connection(gaym->account)) == NULL)
-            return;
-        gaim_notify_error(gc, NULL, _("No such nick or channel"), args[1]);
-    }
-}
-
-void gaym_msg_nosend(struct gaym_conn *gaym, const char *name,
-                     const char *from, char **args)
-{
-    GaimConnection *gc;
-    GaimConversation *convo;
-
-    convo = gaim_find_conversation_with_account(args[1], gaym->account);
-    if (convo) {
-        gaim_conv_chat_write(GAIM_CONV_CHAT(convo), args[1], args[2],
-                             GAIM_MESSAGE_SYSTEM | GAIM_MESSAGE_NO_LOG,
-                             time(NULL));
-    } else {
-        if ((gc = gaim_account_get_connection(gaym->account)) == NULL)
-            return;
-        gaim_notify_error(gc, NULL, _("Could not send"), args[2]);
-    }
-}
-
-/**
- * Is this used?
- */
-void gaym_msg_notinchan(struct gaym_conn *gaym, const char *name,
-                        const char *from, char **args)
-{
-    GaimConversation *convo =
-        gaim_find_conversation_with_account(args[1], gaym->account);
-
-    gaim_debug(GAIM_DEBUG_INFO, "gaym",
-               "We're apparently not in %s, but tried to use it\n",
-               args[1]);
-    if (convo) {
-        /* g_slist_remove(gaym->gc->buddy_chats, convo);
-           gaim_conversation_set_account(convo, NULL); */
-        gaim_conv_chat_write(GAIM_CONV_CHAT(convo), args[1], args[2],
-                             GAIM_MESSAGE_SYSTEM | GAIM_MESSAGE_NO_LOG,
-                             time(NULL));
-    }
-}
-
-/**
- * Invite WORKS in gay.com!
- */
-void gaym_msg_invite(struct gaym_conn *gaym, const char *name,
-                     const char *from, char **args)
-{
-    GaimConnection *gc = gaim_account_get_connection(gaym->account);
-    char *nick = gaym_mask_nick(from);
-    GHashTable *components =
-        g_hash_table_new_full(g_str_hash, g_str_equal, g_free, g_free);
-
-    if (!args || !args[1] || !gc) {
-        g_free(nick);
-        g_hash_table_destroy(components);
-        return;
-    }
-
-    if (!gaym_privacy_check(gc, nick)) {
-        g_free(nick);
-        g_hash_table_destroy(components);
-        return;
-    }
-
-    g_hash_table_insert(components, strdup("channel"), strdup(args[1]));
-    gcom_nick_to_gaym(nick);
-    serv_got_chat_invite(gc, args[1], nick, NULL, components);
-
-    g_free(nick);
-}
-
-void gaym_msg_inviteonly(struct gaym_conn *gaym, const char *name,
-                         const char *from, char **args)
-{
-    GaimConnection *gc = gaim_account_get_connection(gaym->account);
-    char *buf;
-
-    if (!args || !args[1] || !gc)
-        return;
-
-    buf =
-        g_strdup_printf(_("Joining %s requires an invitation."), args[1]);
-    gaim_notify_error(gc, _("Invitation only"), _("Invitation only"), buf);
-    g_free(buf);
-}
-
-void gaym_msg_trace(struct gaym_conn *gaym, const char *name,
-                    const char *from, char **args)
-{
-    GaimConversation *conv =
-        gaim_find_conversation_with_account(gaym->traceconv ? gaym->
-                                            traceconv : args[1],
-                                            gaym->account);
-    gaim_conversation_write(conv, "TRACE", args[3],
-                            GAIM_MESSAGE_SYSTEM | GAIM_MESSAGE_NO_LOG,
-                            time(NULL));
-
-}
-
-void gaym_msg_join(struct gaym_conn *gaym, const char *name,
-                   const char *from, char **args)
-{
-    GaimConnection *gc = gaim_account_get_connection(gaym->account);
-    g_return_if_fail(gc != NULL);
-
-    char *nick = gaym_mask_nick(from);
-
-    GaimConversation *convo;
-    GaimConvChatBuddyFlags flags = GAIM_CBFLAGS_NONE;
-    char *bio = NULL;
-    char *bio_markedup = NULL;
-    static int id = 1;
-
-    gcom_nick_to_gaym(nick);
-    if (!gaim_utf8_strcasecmp(nick, gaim_connection_get_display_name(gc))) {
-        /* We are joining a channel for the first time */
-        if (gaym->persist_room && !strcmp(gaym->persist_room, args[0])) {
-            g_free(gaym->persist_room);
-            gaym->persist_room = NULL;
-            gaim_request_close(GAIM_REQUEST_ACTION,
-                               gaym->hammer_cancel_dialog);
-
-        }
-
-        serv_got_joined_chat(gc, id++, args[0]);
-
-        gint *entry = g_new(gint, 1);
-        *entry = MAX_CHANNEL_MEMBERS;
-        g_hash_table_insert(gaym->entry_order, g_strdup(args[0]), entry);
-
-        g_free(nick);
-        return;
-    }
-
-    convo = gaim_find_conversation_with_account(args[0], gaym->account);
-    if (convo == NULL) {
-        gaim_debug(GAIM_DEBUG_ERROR, "gaym", "JOIN for %s failed\n",
-                   args[0]);
-        g_free(nick);
-        return;
-    }
-
-    gint *entry = g_hash_table_lookup(gaym->entry_order, args[0]);
-    g_return_if_fail(entry != NULL);
-
-    gaym_buddy_status(gaym, nick, TRUE, args[1]);
-
-
-    gboolean gaym_botfilter_permit =
-        gaym_botfilter_check(gc, nick, bio, FALSE);
-
-    bio = gaym_bio_strdup(args[1]);
-    if (bio) {
-        bio_markedup = gaim_markup_linkify(bio);
-        g_free(bio);
-    }
-
-    if (*entry <= MAX_CHANNEL_MEMBERS) {
-        *entry = MAX_CHANNEL_MEMBERS + 1;
-    }
-
-    flags = chat_pecking_order(args[1]);
-    flags = include_chat_entry_order(flags, (*entry)++);
-
-    gboolean gaym_privacy_permit = gaym_privacy_check(gc, nick);
-    gboolean show_join =
-        gaim_prefs_get_bool("/plugins/prpl/gaym/show_join");
-
-    if (gaim_prefs_get_bool("/plugins/prpl/gaym/show_bio_with_join")) {
-        gaim_conv_chat_add_user(GAIM_CONV_CHAT(convo), nick, bio_markedup,
-                                flags, (gaym_privacy_permit
-                                        && gaym_botfilter_permit
-                                        && show_join));
-    } else {
-        gaim_conv_chat_add_user(GAIM_CONV_CHAT(convo), nick, NULL,
-                                flags, (gaym_privacy_permit
-                                        && gaym_botfilter_permit
-                                        && show_join));
-    }
-
-    /**
-     * Make the ignore.png icon appear next to the nick.
-     */
-    GaimConversationUiOps *ops = gaim_conversation_get_ui_ops(convo);
-    if (gaym_privacy_permit && gaym_botfilter_permit) {
-        gaim_conv_chat_unignore(GAIM_CONV_CHAT(convo), nick);
-    } else {
-        gaim_conv_chat_ignore(GAIM_CONV_CHAT(convo), nick);
-    }
-    ops->chat_update_user((convo), nick);
-
-    gaym_update_channel_member(gaym, nick, args[1]);
-    g_free(bio_markedup);
-    g_free(nick);
-}
-
-void gaym_msg_mode(struct gaym_conn *gaym, const char *name,
-                   const char *from, char **args)
-{
-    GaimConversation *convo;
-    char *nick = gaym_mask_nick(from), *buf;
-
-    if (*args[0] == '#' || *args[0] == '&') {   /* Channel */
-        convo =
-            gaim_find_conversation_with_account(args[0], gaym->account);
-        if (!convo) {
-            gaim_debug(GAIM_DEBUG_ERROR, "gaym",
-                       "MODE received for %s, which we are not in\n",
-                       args[0]);
-            g_free(nick);
-            return;
-        }
-        buf =
-            g_strdup_printf(_("mode (%s %s) by %s"), args[1],
-                            args[2] ? args[2] : "", nick);
-        gaim_conv_chat_write(GAIM_CONV_CHAT(convo), args[0], buf,
-                             GAIM_MESSAGE_SYSTEM | GAIM_MESSAGE_NO_LOG,
-                             time(NULL));
-        g_free(buf);
-        if (args[2]) {
-            GaimConvChatBuddyFlags newflag, flags;
-            char *mcur, *cur, *end, *user;
-            gboolean add = FALSE;
-            mcur = args[1];
-            cur = args[2];
-            while (*cur && *mcur) {
-                if ((*mcur == '+') || (*mcur == '-')) {
-                    add = (*mcur == '+') ? TRUE : FALSE;
-                    mcur++;
-                    continue;
-                }
-                end = strchr(cur, ' ');
-                if (!end)
-                    end = cur + strlen(cur);
-                user = g_strndup(cur, end - cur);
-                flags =
-                    gaim_conv_chat_user_get_flags(GAIM_CONV_CHAT(convo),
-                                                  user);
-                newflag = GAIM_CBFLAGS_NONE;
-                if (*mcur == 'o')
-                    newflag = GAIM_CBFLAGS_OP;
-                else if (*mcur == 'h')
-                    newflag = GAIM_CBFLAGS_HALFOP;
-                else if (*mcur == 'v')
-                    newflag = GAIM_CBFLAGS_VOICE;
-                if (newflag) {
-                    if (add)
-                        flags |= newflag;
-                    else
-                        flags &= ~newflag;
-                    gaim_conv_chat_user_set_flags(GAIM_CONV_CHAT(convo),
-                                                  user, flags);
-                }
-                g_free(user);
-                cur = end;
-                if (*cur)
-                    cur++;
-                if (*mcur)
-                    mcur++;
-            }
-        }
-    } else {                    /* User */
-    }
-    g_free(nick);
-}
-
-void gaym_msg_nick(struct gaym_conn *gaym, const char *name,
-                   const char *from, char **args)
-{
-    GSList *chats;
-
-    GaimConnection *gc = gaim_account_get_connection(gaym->account);
-    char *nick = gaym_mask_nick(from);
-
-    if (!gc) {
-        g_free(nick);
-        return;
-    }
-
-    chats = gc->buddy_chats;
-
-    if (!gaim_utf8_strcasecmp(nick, gaim_connection_get_display_name(gc))) {
-        gaim_connection_set_display_name(gc, args[0]);
-    }
-
-    while (chats) {
-        GaimConvChat *chat = GAIM_CONV_CHAT(chats->data);
-        /* This is ugly ... */
-        if (gaim_conv_chat_find_user(chat, nick))
-            gaim_conv_chat_rename_user(chat, nick, args[0]);
-        chats = chats->next;
-    }
-    g_free(nick);
-}
-
-void gaym_msg_notice(struct gaym_conn *gaym, const char *name,
-                     const char *from, char **args)
-{
-    GaimConnection *gc = gaim_account_get_connection(gaym->account);
-
-    if (!gc) {
-        return;
-    }
-
-    char *newargs[2];
-
-    newargs[0] = " notice ";    /* The spaces are magic, leave 'em in! */
-    newargs[1] = args[1];
-    gaym_msg_privmsg(gaym, name, from, newargs);
-}
-
-void gaym_msg_part(struct gaym_conn *gaym, const char *name,
-                   const char *from, char **args)
-{
-    GaimConversation *convo;
-    char *msg;
-
-    GaimConnection *gc = gaim_account_get_connection(gaym->account);
-    char *nick = gaym_mask_nick(from);
-
-    if (!args || !args[0] || !gc || !nick) {
-        g_free(nick);
-        return;
-    }
-
-    convo = gaim_find_conversation_with_account(args[0], gaym->account);
-    gboolean show_part =
-        gaim_prefs_get_bool("/plugins/prpl/gaym/show_part");
-
-    gcom_nick_to_gaym(nick);
-    if (!gaim_utf8_strcasecmp(nick, gaim_connection_get_display_name(gc))) {
-
-        g_hash_table_remove(gaym->entry_order, args[0]);
-        msg = g_strdup_printf(_("You have parted the channel"));
-
-        gaim_conv_chat_write(GAIM_CONV_CHAT(convo), args[0], msg,
-                             GAIM_MESSAGE_SYSTEM, time(NULL));
-        g_free(msg);
-        serv_got_chat_left(gc,
-                           gaim_conv_chat_get_id(GAIM_CONV_CHAT(convo)));
-    } else {
-        if (!gaim_conv_chat_is_user_ignored(GAIM_CONV_CHAT(convo), nick)
-            && show_part) {
-            gaim_conv_chat_remove_user(GAIM_CONV_CHAT(convo), nick, NULL);
-        } else {
-            GaimConversationUiOps *ops =
-                gaim_conversation_get_ui_ops(convo);
-            if (ops != NULL && ops->chat_remove_user != NULL) {
-                ops->chat_remove_user(convo, nick);
-            }
-            GaimConvChatBuddy *cb =
-                gaim_conv_chat_cb_find(GAIM_CONV_CHAT(convo), nick);
-            if (cb) {
-                gaim_conv_chat_set_users(GAIM_CONV_CHAT(convo),
-                                         g_list_remove
-                                         (gaim_conv_chat_get_users
-                                          (GAIM_CONV_CHAT(convo)), cb));
-                gaim_conv_chat_cb_destroy(cb);
-                if (!gaym_unreference_channel_member(gaym, nick))
-                    gaim_debug_error("gaym",
-                                     "channel_members reference counting bug.\n");
-            }
-        }
-    }
-
-    g_free(nick);
-}
-
-void gaym_msg_ping(struct gaym_conn *gaym, const char *name,
-                   const char *from, char **args)
-{
-    char *buf;
-    if (!args || !args[0])
-        return;
-
-    buf = gaym_format(gaym, "v:", "PONG", args[0]);
-    gaym_send(gaym, buf);
-    g_free(buf);
-}
-
-void gaym_msg_pong(struct gaym_conn *gaym, const char *name,
-                   const char *from, char **args)
-{
-    GaimConversation *convo;
-    GaimConnection *gc;
-    char **parts, *msg;
-    time_t oldstamp;
-
-    if (!args || !args[1])
-        return;
-
-    parts = g_strsplit(args[1], " ", 2);
-
-    if (!parts[0] || !parts[1]) {
-        g_strfreev(parts);
-        return;
-    }
-
-    if (sscanf(parts[1], "%lu", &oldstamp) != 1) {
-        msg = g_strdup(_("Error: invalid PONG from server"));
-    } else {
-        msg =
-            g_strdup_printf(_("PING reply -- Lag: %lu seconds"),
-                            time(NULL) - oldstamp);
-    }
-
-    convo = gaim_find_conversation_with_account(parts[0], gaym->account);
-    g_strfreev(parts);
-    if (convo) {
-        if (gaim_conversation_get_type(convo) == GAIM_CONV_CHAT)
-            gaim_conv_chat_write(GAIM_CONV_CHAT(convo), "PONG", msg,
-                                 GAIM_MESSAGE_SYSTEM | GAIM_MESSAGE_NO_LOG,
-                                 time(NULL));
-        else
-            gaim_conv_im_write(GAIM_CONV_IM(convo), "PONG", msg,
-                               GAIM_MESSAGE_SYSTEM | GAIM_MESSAGE_NO_LOG,
-                               time(NULL));
-    } else {
-        gc = gaim_account_get_connection(gaym->account);
-        if (!gc) {
-            g_free(msg);
-            return;
-        }
-        gaim_notify_info(gc, NULL, "PONG", msg);
-    }
-    g_free(msg);
-}
-
-void gaym_msg_privmsg(struct gaym_conn *gaym, const char *name,
-                      const char *from, char **args)
-{
-    GaimConversation *convo;
-    char *tmp, *msg;
-    int notice = 0;
-
-    GaimConnection *gc = gaim_account_get_connection(gaym->account);
-    char *nick = gaym_mask_nick(from);
-
-    if (!args || !args[0] || !args[1] || !gc) {
-        g_free(nick);
-        return;
-    }
-
-    /**
-     * Only nicks (sender/receiver) should use gcom_nick_to_gaym().
-     *
-     * Channels (which begin with either "#" or "&") should not be
-     * converted.
-     *
-     * Messages should also not be converted.
-     *
-     * CHAT ROOM:
-     * nick = the sender
-     * args[0] = the receiving channel
-     * args[1] = the message
-     *
-     * INSTANT MESSAGE:
-     * nick = the sender
-     * args[0] = the receiver (me)
-     * args[1] = the message
-     *
-     * NOTICE:
-     * nick = the sender
-     * args[0] = " notice "
-     * args[1] = the message
-     */
-    gcom_nick_to_gaym(nick);
-    if (args[0][0] != '#' && args[0][0] != '&') {
-        gcom_nick_to_gaym(args[0]);
-    }
-
-    convo = gaim_find_conversation_with_account(args[0], gaym->account);
-
-    notice = !strcmp(args[0], " notice ");
-    tmp = gaym_parse_ctcp(gaym, nick, args[0], args[1], notice);
-
-    if (!tmp) {
-        g_free(nick);
-        return;
-    }
-
-    if (!gaym_privacy_check(gc, nick)) {
-        g_free(nick);
-        return;
-    }
-
-    msg = gaim_escape_html(tmp);
-
-    g_free(tmp);
-
-    if (notice) {
-        tmp = g_strdup_printf("(notice) %s", msg);
-        g_free(msg);
-        msg = tmp;
-    }
-
-    if (!gaim_utf8_strcasecmp
-        (args[0], gaim_connection_get_display_name(gc))) {
-        serv_got_im(gc, nick, msg, 0, time(NULL));
-    } else if (notice) {
-        serv_got_im(gc, nick, msg, 0, time(NULL));
-    } else if (convo) {
-
-        serv_got_chat_in(gc, gaim_conv_chat_get_id(GAIM_CONV_CHAT(convo)),
-                         nick, 0, msg, time(NULL));
-    } else {
-        gaim_debug(GAIM_DEBUG_ERROR, "gaym",
-                   "Got a PRIVMSG on %s, which does not exist\n", args[0]);
-    }
-
-    g_free(msg);
-    g_free(nick);
-}
-
-void gaym_msg_regonly(struct gaym_conn *gaym, const char *name,
-                      const char *from, char **args)
-{
-    GaimConnection *gc = gaim_account_get_connection(gaym->account);
-    char *msg;
-
-    if (!args || !args[1] || !args[2] || !gc)
-        return;
-
-    msg = g_strdup_printf(_("Cannot join %s:"), args[1]);
-    gaim_notify_error(gc, _("Cannot join channel"), msg, args[2]);
-    g_free(msg);
-}
-
-/* I don't think gay.com ever sends this message */
-void gaym_msg_quit(struct gaym_conn *gaym, const char *name,
-                   const char *from, char **args)
-{
-    GaimConnection *gc = gaim_account_get_connection(gaym->account);
-    char *data[2];
-
-    if (!args || !args[0] || !gc)
-        return;
-
-    data[0] = gaym_mask_nick(from);
-    data[1] = args[0];
-    /* XXX this should have an API, I shouldn't grab this directly */
-    g_slist_foreach(gc->buddy_chats, (GFunc) gaym_chat_remove_buddy, data);
-
-    gaym_buddy_status(gaym, data[0], FALSE, NULL);
-
-    g_free(data[0]);
-
-    return;
-}
-
-void gaym_msg_who(struct gaym_conn *gaym, const char *name,
-                  const char *from, char **args)
-{
-}
-
-void hammer_stop_cb(gpointer data)
-{
-
-    struct gaym_conn *gaym = (struct gaym_conn *) data;
-
-    gaym->cancelling_persist = TRUE;
-    gaim_debug_misc("gaym", "Cancelling persist: %s\n",
-                    gaym->persist_room);
-}
-
-void hammer_cb(gpointer data)
-{
-
-    struct gaym_conn *gaym = (struct gaym_conn *) data;
-    const char *args[1];
-    char *msg;
-    gaim_debug_misc("gaym", "Persisting room %s\n", gaym->persist_room);
-    args[0] = gaym->persist_room;
-    gaym->cancelling_persist = FALSE;
-    msg = g_strdup_printf("Hammering into room %s", gaym->persist_room);
-    gaym->hammer_cancel_dialog =
-        gaim_request_action(gaym->account->gc, _("Cancel Hammer"), msg,
-                            NULL, 0, gaym, 1, ("Cancel"), hammer_stop_cb);
-
-    gaym_cmd_join(gaym, NULL, NULL, args);
-    if (msg)
-        g_free(msg);
-}
-
-void gaym_msg_chanfull(struct gaym_conn *gaym, const char *name,
-                       const char *from, char **args)
-{
-    GaimConnection *gc = gaim_account_get_connection(gaym->account);
-    char *buf;
-    const char *joinargs[1];
-
-    if (!args || !args[1] || !gc)
-        return;
-
-    joinargs[0] = args[1];
-
-    if (gaym->persist_room && !strcmp(gaym->persist_room, args[1]))
-        if (gaym->cancelling_persist) {
-            if (gaym->persist_room) {
-                g_free(gaym->persist_room);
-                gaym->persist_room = NULL;
-            }
-            gaym->cancelling_persist = FALSE;
-        } else {
-            gaim_debug_misc("gaym", "trying again\n");
-            gaym_cmd_join(gaym, NULL, NULL, joinargs);
-    } else {
-
-        gaym->persist_room = g_strdup(args[1]);
-        buf =
-            g_strdup_printf("%s is full. Do you want to keep trying?",
-                            args[1]);
-        gaim_request_yes_no(gc, _("Room Full"), _("Room Full"), buf, 0,
-                            gaym, hammer_cb, NULL);
-
-        g_free(buf);
-    }
-}
-
-void gaym_msg_create_pay_only(struct gaym_conn *gaym, const char *name,
-                              const char *from, char **args)
-{
-    GaimConnection *gc = gaim_account_get_connection(gaym->account);
-    char *buf;
-    if (!args || !args[1] || !gc) {
-        return;
-    }
-    buf = g_strdup_printf(_("%s"), args[2]);
-    gaim_notify_error(gc, _("Pay Only"), _("Pay Only"), buf);
-    /**
-     * FIXME
-     * by now the chatroom is already in the buddy list...need
-     * to remove it or something
-     */
-    g_free(buf);
-}
-
-void gaym_msg_pay_channel(struct gaym_conn *gaym, const char *name,
-                          const char *from, char **args)
-{
-    GaimConnection *gc = gaim_account_get_connection(gaym->account);
-    char *buf;
-
-    if (!args || !args[1] || !gc)
-        return;
-
-    buf =
-        g_strdup_printf(_("The channel %s is for paying members only."),
-                        args[1]);
-    gaim_notify_error(gc, _("Pay Only"), _("Pay Only"), buf);
-    g_free(buf);
-}
-
-void gaym_msg_toomany_channels(struct gaym_conn *gaym, const char *name,
-                               const char *from, char **args)
-{
-    GaimConnection *gc = gaim_account_get_connection(gaym->account);
-    char *buf;
-
-    if (!args || !args[1] || !gc)
-        return;
-
-    buf =
-        g_strdup_printf(_
-                        ("You have joined too many channels the maximum is (2). You cannot join channel %s. Part another channel first ."),
-                        args[1]);
-    gaim_notify_error(gc, _("Maximum ChannelsReached"),
-                      _("Maximum ChannelsReached"), buf);
-    g_free(buf);
-}
-
-void gaym_msg_list_busy(struct gaym_conn *gaym, const char *name,
-                        const char *from, char **args)
-{
-    GaimConnection *gc = gaim_account_get_connection(gaym->account);
-    char *buf;
-    if (!args || !args[1] || !gc) {
-        return;
-    }
-    buf = g_strdup_printf(_("%s"), args[1]);
-    gaim_notify_error(gc, _("Server Busy"), _("Server Busy"), buf);
-    // if (gaym->roomlist) {
-    // gaim_roomlist_cancel_get_list(gaym->roomlist);
-    // }
-    g_free(buf);
-    /**
-     * Can't get member created rooms right now.
-     * This is our trigger to add the static rooms
-     */
-    build_roomlist_from_config(gaym->roomlist, gaym->confighash,
-                               gaym->roomlist_filter);
-    if (gaym->roomlist_filter) {
-        g_free(gaym->roomlist_filter);
-        gaym->roomlist_filter = NULL;
-    }
-    return;
-
-}
-
-void gaym_msg_richnames_list(struct gaym_conn *gaym, const char *name,
-                             const char *from, char **args)
-{
-    GaimConnection *gc = gaim_account_get_connection(gaym->account);
-    GaimConversation *convo;
-    GaimConvChatBuddyFlags flags = GAIM_CBFLAGS_NONE;
-    char *channel = args[1];
-    char *nick = args[2];
-    char *extra = args[4];
-
-    if (!gc) {
-        return;
-    }
-
-    gcom_nick_to_gaym(nick);
-    gaim_debug(GAIM_DEBUG_INFO, "gaym",
-               "gaym_msg_richnames_list() Channel: %s Nick: %s Extra: %s\n",
-               channel, nick, extra);
-
-    convo = gaim_find_conversation_with_account(channel, gaym->account);
-
-    char *bio = gaym_bio_strdup(extra);
-    gboolean gaym_botfilter_permit =
-        gaym_botfilter_check(gc, nick, bio, FALSE);
-    g_free(bio);
-
-    gaym_buddy_status(gaym, nick, TRUE, extra);
-
-    if (convo == NULL) {
-        gaim_debug(GAIM_DEBUG_ERROR, "gaym", "690 for %s failed\n",
-                   args[1]);
-        return;
-    }
-
-    gint *entry = g_hash_table_lookup(gaym->entry_order, channel);
-    g_return_if_fail(entry != NULL);
-
-    flags = chat_pecking_order(extra);
-    flags = include_chat_entry_order(flags, (*entry)--);
-
-    gaim_conv_chat_add_user(GAIM_CONV_CHAT(convo), nick, NULL, flags,
-                            FALSE);
-
-    /**
-     * Make the ignore.png icon appear next to the nick.
-     */
-    GaimConversationUiOps *ops = gaim_conversation_get_ui_ops(convo);
-    if (gaym_privacy_check(gc, nick) && gaym_botfilter_permit) {
-        gaim_conv_chat_unignore(GAIM_CONV_CHAT(convo), nick);
-    } else {
-        gaim_conv_chat_ignore(GAIM_CONV_CHAT(convo), nick);
-    }
-    ops->chat_update_user((convo), nick);
-    gaym_update_channel_member(gaym, nick, extra);
-}
-
-/**
- * vim:tabstop=4:shiftwidth=4:expandtab:
- */

Copied: qrc/tags/release-0.9.5/gaym/src/msgs.c (from rev 267, qrc/trunk/gaym/src/msgs.c)

Deleted: qrc/tags/release-0.9.5/gaym/src/weblogin.c
===================================================================
--- qrc/trunk/gaym/src/weblogin.c	2005-07-30 22:19:23 UTC (rev 259)
+++ qrc/tags/release-0.9.5/gaym/src/weblogin.c	2005-08-02 06:44:24 UTC (rev 268)
@@ -1,642 +0,0 @@
-/* 
- * @file util.h Utility Functions
- * @ingroup core
- *
- * Gaim is the legal property of its developers, whose names are too numerous
- * to list here.  Please refer to the COPYRIGHT file distributed with this
- * source distribution.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
- */
-#include "internal.h"
-
-#include "conversation.h"
-#include "debug.h"
-#include "prpl.h"
-#include "prefs.h"
-#include "util.h"
-
-#include "gaym.h"
-
-#include "helpers.h"
-
-typedef struct {
-    void (*callback) (void *, const char *, size_t);
-    void *user_data;
-
-    struct {
-        char *user;
-        char *passwd;
-        char *address;
-        int port;
-        char *page;
-
-    } website;
-
-    char *url;
-    gboolean full;
-    char *user_agent;
-    gboolean http11;
-
-    int inpa;
-
-    gboolean sentreq;
-    gboolean newline;
-    gboolean startsaving;
-    gboolean has_explicit_data_len;
-    char *webdata;
-    unsigned long len;
-    unsigned long data_len;
-    GaimUrlSession *session;
-
-} GaimFetchUrlData;
-
-static void gaym_session_destroy(GaimUrlSession * session)
-{
-    if (session->cookies)
-        g_free(session->cookies);
-    if (session->username)
-        g_free(session->username);
-    if (session->password)
-        g_free(session->password);
-    gaim_debug_misc("gaym", "freeing session: %x\n", session);
-    g_free(session);
-}
-
-/* gaim_url_decode doesn't change pluses to spaces - edit in place */
-static const char *gaym_url_decode(const char *string)
-{
-    char *retval;
-
-    retval = (char *) (string = gaim_url_decode(string));
-    while (*retval != 0) {
-        if (*retval == '+')
-            *retval = ' ';
-        retval++;
-    }
-    gaim_debug_info("gaym", "Changed %s with gaym_url_decode\n", string);
-    return string;
-}
-
-static void destroy_fetch_url_data(GaimFetchUrlData * gfud)
-{
-    gaim_debug_misc("gaym", "destroy_fetch_url_data called\n");
-    if (gfud->webdata != NULL)
-        g_free(gfud->webdata);
-    if (gfud->url != NULL)
-        g_free(gfud->url);
-    if (gfud->user_agent != NULL)
-        g_free(gfud->user_agent);
-    if (gfud->website.address != NULL)
-        g_free(gfud->website.address);
-    if (gfud->website.page != NULL)
-        g_free(gfud->website.page);
-    if (gfud->website.user != NULL)
-        g_free(gfud->website.user);
-    if (gfud->website.passwd != NULL)
-        g_free(gfud->website.passwd);
-
-    g_free(gfud);
-}
-
-static gboolean
-parse_redirect(const char *data, size_t data_len, gint sock,
-               GaimFetchUrlData * gfud)
-{
-    gchar *s;
-
-    if ((s = g_strstr_len(data, data_len, "Location: ")) != NULL) {
-        gchar *new_url, *temp_url, *end;
-        gboolean full;
-        int len;
-
-        s += strlen("Location: ");
-        end = strchr(s, '\r');
-
-        /* Just in case :) */
-        if (end == NULL)
-            end = strchr(s, '\n');
-
-        len = end - s;
-
-        new_url = g_malloc(len + 1);
-        strncpy(new_url, s, len);
-        new_url[len] = '\0';
-
-        full = gfud->full;
-
-        if (*new_url == '/' || g_strstr_len(new_url, len, "://") == NULL) {
-            temp_url = new_url;
-
-            new_url = g_strdup_printf("%s:%d%s", gfud->website.address,
-                                      gfud->website.port, temp_url);
-
-            g_free(temp_url);
-
-            full = FALSE;
-        }
-
-        /* Close the existing stuff. */
-        gaim_input_remove(gfud->inpa);
-        close(sock);
-
-        gaim_debug_info("gaim_url_fetch", "Redirecting to %s\n", new_url);
-
-        /* Try again, with this new location. */
-        gaim_url_fetch(new_url, full, gfud->user_agent, gfud->http11,
-                       gfud->callback, gfud->user_data);
-
-        /* Free up. */
-        g_free(new_url);
-        destroy_fetch_url_data(gfud);
-
-        return TRUE;
-    }
-
-    return FALSE;
-}
-
-static size_t parse_content_len(const char *data, size_t data_len)
-{
-    size_t content_len = 0;
-    const char *p = NULL;
-
-    /* This is still technically wrong, since headers are case-insensitive
-       [RFC 2616, section 4.2], though this ought to catch the normal case.
-       Note: data is _not_ nul-terminated. */
-    if (data_len > 16) {
-        p = strncmp(data, "Content-Length: ", 16) == 0 ? data : NULL;
-        if (!p) {
-            p = g_strstr_len(data, data_len, "\nContent-Length: ");
-            if (p)
-                p += 1;
-        }
-    }
-
-    /* If we can find a Content-Length header at all, try to sscanf it.
-       Response headers should end with at least \r\n, so sscanf is safe,
-       if we make sure that there is indeed a \n in our header. */
-    if (p && g_strstr_len(p, data_len - (p - data), "\n")) {
-        sscanf(p, "Content-Length: %zu", &content_len);
-        gaim_debug_misc("parse_content_len", "parsed %u\n", content_len);
-    }
-
-    return content_len;
-}
-
-// This looks for Set-cookie: fields in headers, and adds those cookies
-// To the session struct.
-static void add_cookie(gpointer key, gpointer value, gpointer data)
-{
-    g_return_if_fail(key != NULL);
-    g_return_if_fail(value != NULL);
-    g_return_if_fail(data != NULL);
-    GaimUrlSession *session = (GaimUrlSession *) data;
-    gchar *cookies = session->cookies;
-    session->cookies =
-        g_strconcat(cookies ? cookies : "", key, "=", value, "; ", NULL);
-    g_free(cookies);
-
-}
-static void parse_cookies(const char *webdata, GaimUrlSession * session,
-                          size_t len)
-{
-    gchar **cookies = g_strsplit(webdata, "\n", -1);
-    gchar **cookie_parts;
-    char *cookie;
-    int index = 0;
-    while (cookies[index]) {
-        cookie =
-            return_string_between("Set-cookie: ", "; ", cookies[index]);
-        if (cookie) {
-            cookie_parts = g_strsplit(cookie, "=", 2);
-            if (cookie_parts[0] && cookie_parts[1])
-                g_hash_table_replace(session->cookie_table,
-                                     cookie_parts[0], cookie_parts[1]);
-        }
-        g_free(cookie);
-        index++;
-    }
-    g_strfreev(cookies);
-    g_hash_table_foreach(session->cookie_table, (GHFunc) add_cookie,
-                         session);
-
-}
-
-
-/* This is a modified version of gaim's url_fetched_cb function. It has
-   been modified to pass cookies during requests. The cookies are set in
-   user_data, cast as a GaimUrlSession item. Any cookies in the response
-   are added to this structure, as well. */
-static void
-session_fetched_cb(gpointer url_data, gint sock, GaimInputCondition cond)
-{
-
-    GaimFetchUrlData *gfud = url_data;
-    char data;
-    gboolean got_eof = FALSE;
-    if (sock == -1) {
-        gfud->callback(gfud->user_data, NULL, 0);
-
-        destroy_fetch_url_data(gfud);
-
-        return;
-    }
-
-    if (!gfud->sentreq) {
-        char buf[2048];
-
-        if (gfud->session->cookies == NULL)
-            gfud->session->cookies = g_strdup("");
-
-        if (gfud->user_agent) {
-            /* Host header is not forbidden in HTTP/1.0 requests, and
-               HTTP/1.1 clients must know how to handle the "chunked"
-               transfer encoding. Gaim doesn't know how to handle
-               "chunked", so should always send the Host header
-               regardless, to get around some observed problems */
-            g_snprintf(buf, sizeof(buf),
-                       "GET %s%s HTTP/%s\r\n" "User-Agent: %s\r\n"
-                       "Host: %s\r\n" "Cookie: %s\r\n",
-                       (gfud->full ? "" : "/"),
-                       (gfud->full ? gfud->url : gfud->website.page),
-                       (gfud->http11 ? "1.1" : "1.0"), gfud->user_agent,
-                       gfud->website.address, gfud->session->cookies);
-        } else {
-            g_snprintf(buf, sizeof(buf),
-                       "GET %s%s HTTP/%s\r\n" "Host: %s\r\n"
-                       "Accept-Encoding: identity\r\n" "Cookie: %s\r\n",
-                       (gfud->full ? "" : "/"),
-                       (gfud->full ? gfud->url : gfud->website.page),
-                       (gfud->http11 ? "1.1" : "1.0"),
-                       gfud->website.address, gfud->session->cookies);
-        }
-        if (gfud->session->hasFormData)
-            strcat(buf,
-                   "Content-Type: application/x-www-form-urlencoded\r\n\r\n");
-        else
-            strcat(buf, "\r\n");
-        gaim_debug_misc("gaim_url_fetch", "Request: %s\n", buf);
-
-        write(sock, buf, strlen(buf));
-        fcntl(sock, F_SETFL, O_NONBLOCK);
-        gfud->sentreq = TRUE;
-        gfud->inpa = gaim_input_add(sock, GAIM_INPUT_READ,
-                                    session_fetched_cb, url_data);
-        gfud->data_len = 4096;
-        gfud->webdata = g_malloc(gfud->data_len);
-
-        return;
-    }
-
-    if (read(sock, &data, 1) > 0 || errno == EWOULDBLOCK) {
-        if (errno == EWOULDBLOCK) {
-            errno = 0;
-
-            return;
-        }
-
-        gfud->len++;
-
-        if (gfud->len == gfud->data_len + 1) {
-            gfud->data_len += (gfud->data_len) / 2;
-
-            gfud->webdata = g_realloc(gfud->webdata, gfud->data_len);
-        }
-
-        gfud->webdata[gfud->len - 1] = data;
-
-        if (!gfud->startsaving) {
-            if (data == '\r')
-                return;
-
-            if (data == '\n') {
-                if (gfud->newline) {
-                    size_t content_len;
-                    gfud->startsaving = TRUE;
-
-                    gaim_debug_misc("gaim_url_fetch",
-                                    "Response headers: '%*.*s'\n",
-                                    gfud->len, gfud->len, gfud->webdata);
-
-                    // JBL 10-16-2004: Put cookies into session
-
-                    parse_cookies(gfud->webdata, gfud->session, gfud->len);
-
-                    /* See if we can find a redirect. */
-                    if (parse_redirect
-                        (gfud->webdata, gfud->len, sock, gfud))
-                        return;
-
-                    /* No redirect. See if we can find a content length. */
-                    content_len =
-                        parse_content_len(gfud->webdata, gfud->len);
-
-                    if (content_len == 0) {
-                        /* We'll stick with an initial 8192 */
-                        content_len = 8192;
-                    } else {
-                        gfud->has_explicit_data_len = TRUE;
-                    }
-
-                    /* Out with the old... */
-                    gfud->len = 0;
-                    g_free(gfud->webdata);
-                    gfud->webdata = NULL;
-
-                    /* In with the new. */
-                    gfud->data_len = content_len;
-                    gfud->webdata = g_try_malloc(gfud->data_len);
-                    if (gfud->webdata == NULL) {
-                        gaim_debug_error("gaim_url_fetch",
-                                         "Failed to allocate %u bytes: %s\n",
-                                         gfud->data_len, strerror(errno));
-                        gaim_input_remove(gfud->inpa);
-                        close(sock);
-                        gfud->callback(gfud->user_data, NULL, 0);
-                        destroy_fetch_url_data(gfud);
-                    }
-                } else
-                    gfud->newline = TRUE;
-
-                return;
-            }
-
-            gfud->newline = FALSE;
-        } else if (gfud->has_explicit_data_len
-                   && gfud->len == gfud->data_len) {
-            got_eof = TRUE;
-        }
-    } else if (errno != ETIMEDOUT) {
-        got_eof = TRUE;
-    } else {
-        gaim_input_remove(gfud->inpa);
-        close(sock);
-
-        gfud->callback(gfud->user_data, NULL, 0);
-
-        destroy_fetch_url_data(gfud);
-    }
-
-    if (got_eof) {
-        gfud->webdata = g_realloc(gfud->webdata, gfud->len + 1);
-        gfud->webdata[gfud->len] = 0;
-
-        gaim_input_remove(gfud->inpa);
-        close(sock);
-        gfud->callback(gfud->user_data, gfud->webdata, gfud->len);
-
-        destroy_fetch_url_data(gfud);
-    }
-}
-
-
-
-void
-gaim_session_fetch(const char *url, gboolean full,
-                   const char *user_agent, gboolean http11,
-                   void (*cb) (gpointer, const char *, size_t),
-                   void *user_data, GaimUrlSession * session)
-{
-    int sock;
-    GaimFetchUrlData *gfud;
-
-    g_return_if_fail(url != NULL);
-    g_return_if_fail(cb != NULL);
-
-    gaim_debug_info("gaim_session_fetch",
-                    "requested to fetch (%s), full=%d, user_agent=(%s), http11=%d\n",
-                    url, full, user_agent ? user_agent : "(null)", http11);
-
-    gfud = g_new0(GaimFetchUrlData, 1);
-
-    gfud->callback = cb;
-    gfud->user_data = user_data;
-    gfud->url = g_strdup(url);
-    gfud->user_agent = (user_agent != NULL ? g_strdup(user_agent) : NULL);
-    gfud->http11 = http11;
-    gfud->full = full;
-    gfud->session = session;
-    gaim_url_parse(url, &gfud->website.address, &gfud->website.port,
-                   &gfud->website.page, &gfud->website.user,
-                   &gfud->website.passwd);
-
-    if ((sock = gaim_proxy_connect(NULL, gfud->website.address,
-                                   gfud->website.port, session_fetched_cb,
-                                   gfud)) < 0) {
-        destroy_fetch_url_data(gfud);
-
-        cb(user_data, g_strdup(_("g003: Error opening connection.\n")), 0);
-    }
-}
-
-static void
-gaym_weblogin_step5(gpointer data, const char *text, size_t len)
-{
-
-    GaimUrlSession *session = (GaimUrlSession *) data;
-    struct gaym_conn *gaym = session->gaym;
-    // Get hash from text
-    if (session && GAIM_CONNECTION_IS_VALID(session->account->gc)) {
-        char *bio;
-        char *thumbnail;
-        char *temp = NULL;
-        char *temp2 = NULL;
-        const char *match;
-        const char *result;
-
-
-
-        gaym->server_stats = NULL;
-        gaym->chat_key = NULL;
-        gaym->server_bioline = NULL;
-        gaym->thumbnail = NULL;
-
-        // First, look for password
-        match = "password\" value=\"";
-        temp = strstr(text, match);
-        if (temp) {
-            temp += strlen(match);
-            temp2 = strstr(temp, "\" ");
-        }
-        if (!
-            (temp && temp2 && temp != temp2
-             && (gaym->chat_key =
-                 g_strndup(temp, (temp2 - temp) * sizeof(char))))) {
-            gaim_connection_error((session->account->gc),
-                                  _
-                                  ("Problem parsing password from web. Report a bug."));
-            return;
-        }
-
-        gaim_debug_misc("weblogin",
-                        "Got hash, temp=%x, temp2=%x, gaym->chat_key=%x\n",
-                        temp, temp2, gaym->chat_key);
-        // Next, loook for bio
-        match = "param name=\"bio\" value=\"";
-        temp = strstr(text, match);
-        if (temp) {
-            temp += strlen(match);
-            temp2 = strstr(temp, "%23");
-        }
-        if (temp && temp2) {
-            thumbnail = g_strndup(temp, (temp2 - temp) * sizeof(char));
-            result = gaym_url_decode(thumbnail);
-            (gaym->thumbnail = g_strdup(result))
-                || (gaym->thumbnail = g_strdup(" "));
-
-            g_free(thumbnail);
-            // Parse out non thumbnail part of bio.
-            temp = strstr(temp2, "\"");
-            if (temp) {
-                bio = g_strndup(temp2, (temp - temp2) * sizeof(char));
-                result = gaym_url_decode(bio);
-                gaim_debug_info("gaym", "Server BIO: %s Thumb: %s\n",
-                                result, gaym->thumbnail);
-                (gaym->server_bioline = g_strdup(result))
-                    || (gaym->server_bioline = NULL);
-                g_free(bio);
-
-                // Parse out stats part of bio.
-                temp2 = strchr(result, (char) 0x01);
-                if (temp2++) {
-                    gaim_debug_misc("gaym", "Stats: %s\n", temp2);
-                    gaym->server_stats = g_strdup(temp2);
-                }
-            }
-        } else {
-            // gaim_connection_error(
-            // gaim_account_get_connection(((struct
-            // gaym_conn*)((GaimUrlSession*)session)->account),
-            // _("Problem parsing password from web. Report a bug.")));
-        }
-        session->session_cb(gaym->account);
-
-    } else {
-        gaim_debug_misc("gaym", "Connection was cancelled before step5\n");
-        gaim_debug_misc("gaym", "gaym->session: %x\n", session);
-    }
-
-    // We don't need the session info anymore.
-    gaym_session_destroy(session);
-
-}
-
-static void
-gaym_weblogin_step4(gpointer data, const char *text, size_t len)
-{
-
-    GaimUrlSession *session = (GaimUrlSession *) data;
-    gaim_debug_misc("gaym", "Step 4: session: %x\n", session);
-    if (session && GAIM_CONNECTION_IS_VALID(session->account->gc)) {
-        // The fourth step is to parse a rand=# value out of the message
-        // text from
-        // The previous step.
-        // We then connect to messenger/applet.html
-        char url[512];
-        int nonce;
-        char *buf = g_strdup_printf(_("Signon: %s"),
-                                    (session->account->username));
-        gaim_connection_update_progress(session->account->gc, buf, 3, 6);
-        sscanf(text, "?rand=%d", &nonce);
-        snprintf(url, 512,
-                 "http://www.gay.com/messenger/applet.html?rand=%d",
-                 nonce);
-
-        session->hasFormData = TRUE;
-        gaim_session_fetch(url, FALSE, NULL, FALSE, gaym_weblogin_step5,
-                           session, session);
-    } else {
-        gaim_debug_misc("gaym", "Connection was cancelled before step4\n");
-        gaim_debug_misc("gaym", "session: %x\n", session);
-        gaym_session_destroy(session);
-
-        // g_free(gaym->session);
-    }
-}
-
-void
-gaym_get_chat_key_from_weblogin(GaimAccount * account,
-                                void (*callback) (GaimAccount * account))
-{
-
-    struct gaym_conn *gaym = account->gc->proto_data;
-    if (GAIM_CONNECTION_IS_VALID(account->gc)) {
-
-        GaimUrlSession *session = g_new0(GaimUrlSession, 1);
-        session->session_cb = callback;
-        session->cookies = NULL;
-        session->account = account;
-        session->username = g_strdup(account->username);
-        session->password = g_strdup(account->password);
-        session->gaym = gaym;
-        session->cookie_table =
-            g_hash_table_new_full(g_str_hash, g_str_equal, g_free, g_free);
-
-        gaim_debug_misc("gaym", "Made session: %x\n", session);
-        if (GAIM_CONNECTION_IS_VALID
-            (((GaimUrlSession *) session)->account->gc)) {
-            // The first step is to establish the initial sesion
-            // We connect to index.html, and get a few cookie values.
-            char *url =
-                g_strdup_printf
-                ("http://www.gay.com/misc/dologin.html?__login_haveForm=1&__login_save=1&__login_member=%s&redir=%%2Findex.html&__login_basepage=%%2Fmisc%%2Fdologin.html&__login_password=%s",
-                 session->username, session->password);
-
-            session->hasFormData = TRUE;
-            gaim_session_fetch(url, FALSE, NULL, FALSE,
-                               gaym_weblogin_step4, session, session);
-        } else {
-            gaim_debug_misc("gaym", "cancelled before step1\n");
-            gaim_debug_misc("gaym", "gaym->sessoin: %x\n", session);
-            gaym_session_destroy(session);
-        }
-
-    }
-}
-
-void gaym_try_cached_password(GaimAccount * account,
-                              void (*callback) (GaimAccount * account))
-{
-
-    const char *pw;
-    pw = gaim_account_get_string(account, "chat_key", NULL);
-    if (pw == NULL) {
-        gaym_get_chat_key_from_weblogin(account, callback);
-        return;
-    }
-    // All in one shot:
-    // 1. Login to the irc server <--- blocks serv_login
-    // 2. grab the applet <--- blocks serv_login
-    // 3. spamlist update <--- does not block serv_login
-    // 4. get config.txt <--- does not block serv_login
-    // 
-    // Note: if the chat key happens to be invalid, 2 and 4 will fail.
-
-    // 1
-    // callback(gaym->account);
-
-    // 2
-
-    // 3
-
-
-    // 4
-
-}
-
-/**
- * vim:tabstop=4:shiftwidth=4:expandtab:
- */

Copied: qrc/tags/release-0.9.5/gaym/src/weblogin.c (from rev 265, qrc/trunk/gaym/src/weblogin.c)

Deleted: qrc/tags/release-0.9.5/gaym-extras/src/Makefile.am
===================================================================
--- qrc/trunk/gaym-extras/src/Makefile.am	2005-07-30 22:19:23 UTC (rev 259)
+++ qrc/tags/release-0.9.5/gaym-extras/src/Makefile.am	2005-08-02 06:44:24 UTC (rev 268)
@@ -1,27 +0,0 @@
-pkgdir = \
-	$(GAIM_LIBDIR)/gaim
-
-GAYMSOURCES = \
-	gaym-extras.c chatsort.c bio-popups.c chaticon.c gaym-extras.h
-
-AM_CFLAGS = \
-	$(st)
-
-libgaym_extras_la_LDFLAGS = \
-	-module \
-	-avoid-version \
-	$(GTK_LIBS) \
-	$(GAIM_LIBS)
-
-pkg_LTLIBRARIES = \
-	libgaym-extras.la
-
-libgaym_extras_la_SOURCES = \
-	$(GAYMSOURCES)
-
-AM_CPPFLAGS = \
-	$(DEBUG_CFLAGS) \
-	$(GTK_CFLAGS) \
-	-DGAIM_DATADIR=\"$(datadir)\" \
-	$(GAIM_CFLAGS)
-	

Copied: qrc/tags/release-0.9.5/gaym-extras/src/Makefile.am (from rev 265, qrc/trunk/gaym-extras/src/Makefile.am)

Deleted: qrc/tags/release-0.9.5/gaym-extras/src/bio-popups.c
===================================================================
--- qrc/trunk/gaym-extras/src/bio-popups.c	2005-07-30 22:19:23 UTC (rev 259)
+++ qrc/tags/release-0.9.5/gaym-extras/src/bio-popups.c	2005-08-02 06:44:24 UTC (rev 268)
@@ -1,459 +0,0 @@
-#include "gaym-extras.h"
-// Consider combining into one popup hash...
-GHashTable *popup_rects;
-GHashTable *popup_timeouts;
-GHashTable *popups;
-void clean_popup_stuff(GaimConversation * c)
-{
-
-    if (!g_strrstr(gaim_account_get_protocol_id(c->account), "prpl-gaym"))
-        return;
-    GaimGtkConversation *gtkconv = GAIM_GTK_CONVERSATION(c);
-    if (c->type == GAIM_CONV_IM) {
-        g_hash_table_remove(popup_timeouts, gtkconv->tab_label);
-        g_hash_table_remove(popups, gtkconv->tab_label);
-    } else if (c->type == GAIM_CONV_CHAT) {
-        GaimGtkChatPane *gtkchat = gtkconv->u.chat;
-        g_hash_table_remove(popup_timeouts, gtkchat->list);
-        g_hash_table_remove(popup_rects, gtkchat->list);
-        g_hash_table_remove(popups, gtkchat->list);
-    }
-
-}
-
-static void namelist_leave_cb(GtkWidget * tv, GdkEventCrossing * e,
-                              gpointer n)
-{
-    // This prevent clicks from demloishing popups.
-    if (e->mode != GDK_CROSSING_NORMAL)
-        return;
-
-    guint *timeout = g_hash_table_lookup(popup_timeouts, tv);
-    g_hash_table_remove(popups, tv);
-
-    if (*timeout) {
-        g_source_remove(*timeout);
-        *timeout = 0;
-    }
-}
-
-static void namelist_paint_tip(GtkWidget * tipwindow,
-                               GdkEventExpose * event, gpointer data)
-{
-    g_return_if_fail(data);
-
-    char *tooltiptext = ((struct paint_data *) data)->tooltiptext;
-    GdkPixbuf *pixbuf = ((struct paint_data *) data)->pixbuf;
-    GtkStyle *style = NULL;
-
-    PangoLayout *layout;
-
-    layout = gtk_widget_create_pango_layout(tipwindow, NULL);
-    pango_layout_set_markup(layout, tooltiptext, strlen(tooltiptext));
-    pango_layout_set_wrap(layout, PANGO_WRAP_WORD);
-    pango_layout_set_width(layout, 300000);
-    style = tipwindow->style;
-
-    gtk_paint_flat_box(style, tipwindow->window, GTK_STATE_NORMAL,
-                       GTK_SHADOW_OUT, NULL, tipwindow, "tooltip", 0, 0,
-                       -1, -1);
-
-#if GTK_CHECK_VERSION(2,2,0)
-    gdk_draw_pixbuf(GDK_DRAWABLE(tipwindow->window), NULL, pixbuf,
-                    0, 0, 4, 4, -1, -1, GDK_RGB_DITHER_NONE, 0, 0);
-#else
-    gdk_pixbuf_render_to_drawable(pixbuf,
-                                  GDK_DRAWABLE(tipwindow->window), NULL, 0,
-                                  0, 4, 4, -1, -1, GDK_RGB_DITHER_NONE, 0,
-                                  0);
-#endif
-
-    gtk_paint_layout(style, tipwindow->window, GTK_STATE_NORMAL, TRUE,
-                     NULL, tipwindow, "tooltip",
-                     gdk_pixbuf_get_width(pixbuf) + 9, 4, layout);
-
-    g_object_unref(pixbuf);
-    g_object_unref(layout);
-    g_free(tooltiptext);
-    g_free(data);
-
-    return;
-}
-
-GdkPixbuf *lookup_cached_thumbnail(GaimAccount * account,
-                                   const char *fullname)
-{
-    GDir *gdir = NULL;
-    GError *err = NULL;
-    GdkPixbuf *pixbuf = NULL;
-    const char *filename = NULL;
-    char *dirname = NULL;
-    char *path = NULL;
-    const char *name = gaim_normalize(account, fullname);
-    dirname =
-        g_build_filename(gaim_user_dir(), "icons", "gaym", name, NULL);
-    if (dirname) {
-        gdir = g_dir_open(dirname, 0, &err);
-        if (gdir) {
-            filename = g_dir_read_name(gdir);   // don't free filename:
-                                                // owned by glib.
-            if (filename) {
-                path = g_build_filename(dirname, filename, NULL);
-                if (path)
-                    pixbuf = gdk_pixbuf_new_from_file(path, &err);
-                g_free(path);
-            }
-            g_free(gdir);
-        }
-        g_free(dirname);
-    }
-    return pixbuf;
-}
-
-static gboolean tooltip_timeout(struct timeout_cb_data *data)
-{
-    const gchar *name;
-    int scr_w, scr_h, w, h, x, y;
-#if GTK_CHECK_VERSION(2,2,0)
-    int mon_num;
-    GdkScreen *screen = NULL;
-#endif
-    PangoLayout *layout;
-    gboolean tooltip_top = FALSE;
-    char *tooltiptext = NULL;
-    GdkRectangle mon_size;
-    guint *timeout;
-    GtkWidget *tipwindow;
-    GtkWidget *tv = data->tv;
-
-    GaymTooltipType type = data->type;
-    GaimAccount *account = data->account;
-    GaimPluginProtocolInfo *prpl_info =
-        GAIM_PLUGIN_PROTOCOL_INFO(gaim_find_prpl
-                                  (gaim_account_get_protocol_id(account)));
-
-
-    timeout = (guint *) g_hash_table_lookup(popup_timeouts, tv);
-    /* we check to see if we're still supposed to be moving, now that gtk
-       events have happened, and the mouse might not still be in the buddy 
-       list */
-    while (gtk_events_pending())
-        gtk_main_iteration();
-    if (!(*timeout)) {
-        return FALSE;
-    }
-
-    if (type == TOOLTIP_CHAT) {
-        GtkTreePath *path;
-        GtkTreeIter iter;
-        GtkTreeModel *model;
-        GdkRectangle *rect;
-
-        rect = g_hash_table_lookup(popup_rects, tv);
-        if (!gtk_tree_view_get_path_at_pos
-            (GTK_TREE_VIEW(tv), rect->x, rect->y, &path, NULL, NULL, NULL))
-            return FALSE;
-        model = gtk_tree_view_get_model(GTK_TREE_VIEW(tv));
-        gtk_tree_model_get_iter(model, &iter, path);
-        gtk_tree_model_get(model, &iter, CHAT_USERS_NAME_COLUMN, &name,
-                           -1);
-        gtk_tree_path_free(path);
-    } else if (type == TOOLTIP_IM) {
-        name = gtk_label_get_text(GTK_LABEL(tv));
-    } else
-        return FALSE;
-
-
-
-
-    GaimBuddy *gb = g_new0(GaimBuddy, 1);
-    gb->name = g_strdup(name);
-    gb->account = account;
-    tooltiptext = prpl_info->tooltip_text(gb);
-    g_free(gb->name);
-    g_free(gb);
-
-    if (!tooltiptext)
-        return FALSE;
-
-
-    g_return_val_if_fail(tooltiptext != NULL, FALSE);
-
-    tipwindow = g_hash_table_lookup(popups, tv);
-    if (tipwindow) {
-        g_hash_table_remove(popups, tv);
-    }
-    tipwindow = gtk_window_new(GTK_WINDOW_POPUP);
-    g_hash_table_insert(popups, tv, tipwindow);
-
-    gtk_widget_set_app_paintable(tipwindow, TRUE);
-    gtk_window_set_resizable(GTK_WINDOW(tipwindow), FALSE);
-    gtk_widget_set_name(tipwindow, "gtk-tooltips");
-
-    struct paint_data *pdata = g_new0(struct paint_data, 1);
-    pdata->tooltiptext = tooltiptext;
-    pdata->pixbuf = lookup_cached_thumbnail(account, name);
-    g_signal_connect(G_OBJECT(tipwindow), "expose_event",
-                     G_CALLBACK(namelist_paint_tip), pdata);
-    gtk_widget_ensure_style(tipwindow);
-    layout = gtk_widget_create_pango_layout(tipwindow, NULL);
-    pango_layout_set_wrap(layout, PANGO_WRAP_WORD);
-    pango_layout_set_width(layout, 300000);
-    pango_layout_set_markup(layout, tooltiptext, strlen(tooltiptext));
-    pango_layout_get_size(layout, &w, &h);
-
-#if GTK_CHECK_VERSION(2,2,0)
-    gdk_display_get_pointer(gdk_display_get_default(), &screen, &x, &y,
-                            NULL);
-    mon_num = gdk_screen_get_monitor_at_point(screen, x, y);
-    gdk_screen_get_monitor_geometry(screen, mon_num, &mon_size);
-
-    scr_w = mon_size.width + mon_size.x;
-    scr_h = mon_size.height + mon_size.y;
-#else
-    scr_w = gdk_screen_width();
-    scr_h = gdk_screen_height();
-    gdk_window_get_pointer(NULL, &x, &y, NULL);
-    mon_size.x = 0;
-    mon_size.y = 0;
-#endif
-
-
-    w = PANGO_PIXELS(w) + 8;
-    h = PANGO_PIXELS(h) + 8;
-
-    /* For the width, set it to the text width, plus 13 for 4 pixels on
-       each side and 5 between icon/text. For height, the greater of the
-       text height and the icon height, plus 8 (4 for each buffer on top
-       and bottom). */
-    w = w + gdk_pixbuf_get_width(pdata->pixbuf) + 4;
-    h = MAX(h, gdk_pixbuf_get_height(pdata->pixbuf) + 8);
-
-#if GTK_CHECK_VERSION(2,2,0)
-    if (w > mon_size.width)
-        w = mon_size.width - 10;
-
-    if (h > mon_size.height)
-        h = mon_size.height - 10;
-#endif
-
-    // Find the conversation window here....
-    // if (GTK_WIDGET_NO_WINDOW(window))
-    // y+=window->allocation.y;
-
-    x -= ((w >> 1) + 4);
-
-    if ((y + h + 4) > scr_h || tooltip_top)
-        y = y - h - 5;
-    else
-        y = y + 6;
-
-    if (y < mon_size.y)
-        y = mon_size.y;
-
-    if (y != mon_size.y) {
-        if ((x + w) > scr_w)
-            x -= (x + w + 5) - scr_w;
-        else if (x < mon_size.x)
-            x = mon_size.x;
-    } else {
-        x -= (w / 2 + 10);
-        if (x < mon_size.x)
-            x = mon_size.x;
-    }
-
-    g_object_unref(layout);
-    gtk_widget_set_size_request(tipwindow, w, h);
-    gtk_window_move(GTK_WINDOW(tipwindow), x, y);
-    gtk_widget_show(tipwindow);
-
-    return FALSE;
-}
-
-
-static gboolean namelist_motion_cb(GtkWidget * tv, GdkEventMotion * event,
-                                   gpointer account)
-{
-    GtkTreeModel *ls = NULL;
-    GtkTreePath *path = NULL;
-    GtkTreeIter iter;
-    char *name;
-    static int count = 0;
-    gboolean tf;
-    GdkRectangle *rect;
-    guint *timeout;
-    count++;
-    guint delay;
-    rect = g_hash_table_lookup(popup_rects, tv);
-    g_return_val_if_fail(rect != NULL, FALSE);
-
-    timeout = g_hash_table_lookup(popup_timeouts, tv);
-
-    delay = gaim_prefs_get_int("/gaim/gtk/blist/tooltip_delay");
-
-    if (delay == 0)
-        return FALSE;
-
-    if (*timeout) {
-        if ((event->y > rect->y) && ((event->y - rect->height) < rect->y))
-            return FALSE;
-        /* We've left the cell.  Remove the timeout and create a new one
-           below */
-
-        g_hash_table_remove(popups, tv);
-        g_source_remove(*timeout);
-    }
-
-    gtk_tree_view_get_path_at_pos(GTK_TREE_VIEW(tv), event->x, event->y,
-                                  &path, NULL, NULL, NULL);
-    if (G_UNLIKELY(path == NULL))
-        return FALSE;
-    struct timeout_cb_data *timeout_data =
-        g_new0(struct timeout_cb_data, 1);
-    timeout_data->tv = tv;
-    timeout_data->account = account;
-    timeout_data->type = TOOLTIP_CHAT;
-    *timeout =
-        g_timeout_add(delay, (GSourceFunc) tooltip_timeout, timeout_data);
-
-    gtk_tree_view_get_cell_area(GTK_TREE_VIEW(tv), path, NULL, rect);
-
-    ls = gtk_tree_view_get_model(GTK_TREE_VIEW(tv));
-    tf = gtk_tree_model_get_iter(ls, &iter, path);
-    gtk_tree_model_get(ls, &iter, CHAT_USERS_NAME_COLUMN, &name, -1);
-    gtk_tree_view_get_cell_area(GTK_TREE_VIEW(tv), path, NULL, rect);
-
-    return TRUE;
-}
-
-static void tab_leave_cb(GtkWidget * event, GdkEventCrossing * e,
-                         gpointer conv)
-{
-
-    GaimConversation *c = (GaimConversation *) conv;
-
-    GaimGtkConversation *gtkconv = GAIM_GTK_CONVERSATION(c);
-    // Prevent clicks from demolishing popup.
-    if (e->mode != GDK_CROSSING_NORMAL)
-        return;
-    GtkWidget *tab = gtkconv->tab_label;
-
-    guint *timeout = g_hash_table_lookup(popup_timeouts, tab);
-    g_hash_table_remove(popups, tab);
-
-
-    if (timeout && *timeout) {
-        g_source_remove(*timeout);
-        *timeout = 0;
-    }
-}
-
-
-static gboolean tab_entry_cb(GtkWidget * event,
-                             GdkEventCrossing * crossing, gpointer conv)
-{
-
-    guint *timeout;
-    guint delay;
-    GaimConversation *c = (GaimConversation *) conv;
-    GaimAccount *account = gaim_conversation_get_account(c);
-    GaimGtkConversation *gtkconv = GAIM_GTK_CONVERSATION(c);
-
-    GtkWidget *tab = gtkconv->tab_label;
-    timeout = g_hash_table_lookup(popup_timeouts, tab);
-
-    delay = gaim_prefs_get_int("/gaim/gtk/blist/tooltip_delay");
-
-    if (delay == 0)
-        return FALSE;
-
-    if (timeout && *timeout)
-        return FALSE;
-
-    // g_hash_table_remove(popups, tab);
-    // g_source_remove(*timeout);
-
-
-
-    struct timeout_cb_data *timeout_data =
-        g_new0(struct timeout_cb_data, 1);
-    timeout_data->tv = tab;
-    timeout_data->account = account;
-    timeout_data->type = TOOLTIP_IM;
-    *timeout =
-        g_timeout_add(delay, (GSourceFunc) tooltip_timeout, timeout_data);
-
-    return TRUE;
-}
-
-void add_chat_popup_stuff(GaimConversation * c)
-{
-
-    GaimGtkConversation *gtkconv = GAIM_GTK_CONVERSATION(c);
-    GaimGtkChatPane *gtkchat = gtkconv->u.chat;
-    GaimAccount *account = gaim_conversation_get_account(c);
-
-    g_signal_connect(G_OBJECT(gtkchat->list), "motion-notify-event",
-                     G_CALLBACK(namelist_motion_cb), account);
-    g_signal_connect(G_OBJECT(gtkchat->list), "leave-notify-event",
-                     G_CALLBACK(namelist_leave_cb), NULL);
-
-
-    g_hash_table_insert(popup_rects, gtkchat->list,
-                        g_new0(GdkRectangle, 1));
-    g_hash_table_insert(popup_timeouts, gtkchat->list, g_new0(guint, 1));
-
-
-}
-
-void add_im_popup_stuff(GaimConversation * c)
-{
-    GaimGtkConversation *gtkconv = GAIM_GTK_CONVERSATION(c);
-    GtkWidget *event = gtk_event_box_new();
-    GtkWidget *hbox = gtk_hbox_new(FALSE, 6);
-
-    gtk_widget_ref(gtkconv->icon);
-    gtk_container_remove(GTK_CONTAINER(gtkconv->tabby),
-                         GTK_WIDGET(gtkconv->icon));
-    gtk_box_pack_start(GTK_BOX(hbox), GTK_WIDGET(gtkconv->icon), FALSE,
-                       FALSE, 0);
-    gtk_widget_ref(gtkconv->icon);
-    gtk_widget_unref(gtkconv->icon);
-
-    gtk_widget_ref(gtkconv->tab_label);
-    gtk_container_remove(GTK_CONTAINER(gtkconv->tabby),
-                         GTK_WIDGET(gtkconv->tab_label));
-    gtk_box_pack_start(GTK_BOX(hbox), GTK_WIDGET(gtkconv->tab_label), TRUE,
-                       TRUE, 0);
-    gtk_widget_unref(gtkconv->tab_label);
-
-
-    gtk_widget_add_events(event,
-                          GDK_ENTER_NOTIFY_MASK | GDK_LEAVE_NOTIFY_MASK);
-    g_signal_connect(G_OBJECT(event), "enter-notify-event",
-                     G_CALLBACK(tab_entry_cb), c);
-    g_signal_connect(G_OBJECT(event), "leave-notify-event",
-                     G_CALLBACK(tab_leave_cb), c);
-    gtk_box_pack_start(GTK_BOX(gtkconv->tabby), GTK_WIDGET(event), TRUE,
-                       TRUE, 0);
-    gtk_box_reorder_child(GTK_BOX(gtkconv->tabby), GTK_WIDGET(event), 0);
-    gtk_widget_show(GTK_WIDGET(event));
-    gtk_widget_show(GTK_WIDGET(hbox));
-    gtk_event_box_set_visible_window(GTK_EVENT_BOX(event), FALSE);
-    gtk_container_add(GTK_CONTAINER(event), GTK_WIDGET(hbox));
-    g_hash_table_insert(popup_timeouts, gtkconv->tab_label,
-                        g_new0(guint, 1));
-}
-
-void init_popups()
-{
-    popup_rects =
-        g_hash_table_new_full(g_direct_hash, g_direct_equal, NULL, g_free);
-
-    popup_timeouts =
-        g_hash_table_new_full(g_direct_hash, g_direct_equal, NULL, g_free);
-
-    popups =
-        g_hash_table_new_full(g_direct_hash, g_direct_equal, NULL,
-                              (GDestroyNotify) gtk_widget_destroy);
-}

Copied: qrc/tags/release-0.9.5/gaym-extras/src/bio-popups.c (from rev 267, qrc/trunk/gaym-extras/src/bio-popups.c)

Deleted: qrc/tags/release-0.9.5/gaym-extras/src/chaticon.c
===================================================================
--- qrc/trunk/gaym-extras/src/chaticon.c	2005-07-30 22:19:23 UTC (rev 259)
+++ qrc/tags/release-0.9.5/gaym-extras/src/chaticon.c	2005-08-02 06:44:24 UTC (rev 268)
@@ -1,201 +0,0 @@
-#include "gaym-extras.h"
-GHashTable *icons;
-void get_icon_scale_size(GdkPixbuf * icon, GaimBuddyIconSpec * spec,
-                         int *width, int *height)
-{
-    *width = gdk_pixbuf_get_width(icon);
-    *height = gdk_pixbuf_get_height(icon);
-    gaim_debug_misc("popups", "current: w: %i, h: %i\n", *width, *height);
-    /* this should eventually get smarter about preserving the aspect
-       ratio when scaling, but gimmie a break, I just woke up */
-    if (spec && spec->scale_rules & GAIM_ICON_SCALE_DISPLAY) {
-        if (*width < spec->min_width)
-            *width = spec->min_width;
-        else if (*width > spec->max_width)
-            *width = spec->max_width;
-
-        if (*height < spec->min_height)
-            *height = spec->min_height;
-        else if (*height > spec->max_height)
-            *height = spec->max_height;
-    }
-
-    /* and now for some arbitrary sanity checks */
-    if (*width > 100)
-        *width = 100;
-    if (*height > 100)
-        *height = 100;
-    gaim_debug_misc("popups", "scaled: w: %i, h: %i\n", *width, *height);
-}
-
-void gaym_update_thumbnail(GaimConversation * conv, GdkPixbuf * pixbuf)
-{
-    GaimGtkConversation *gtkconv;
-
-    GdkPixbuf *scale;
-    GdkPixmap *pm = NULL;
-    GdkBitmap *bm = NULL;
-    int scale_width = 0, scale_height = 0;
-
-
-    GaimAccount *account;
-    GaimPluginProtocolInfo *prpl_info = NULL;
-    g_return_if_fail(conv != NULL);
-    g_return_if_fail(GAIM_IS_GTK_CONVERSATION(conv));
-    g_return_if_fail(gaim_conversation_get_type(conv) == GAIM_CONV_CHAT);
-
-    gtkconv = GAIM_GTK_CONVERSATION(conv);
-
-    GaymChatIcon *icon_data = g_hash_table_lookup(icons, conv);
-
-    if (!icon_data->show_icon)
-        return;
-
-    account = gaim_conversation_get_account(conv);
-    if (account && account->gc)
-        prpl_info = GAIM_PLUGIN_PROTOCOL_INFO(account->gc->prpl);
-
-    if (!gaim_prefs_get_bool
-        ("/gaim/gtk/conversations/im/show_buddy_icons"))
-        return;
-
-    if (gaim_conversation_get_gc(conv) == NULL)
-        return;
-
-
-
-    get_icon_scale_size(pixbuf,
-                        prpl_info ? &prpl_info->icon_spec : NULL,
-                        &scale_width, &scale_height);
-    // double
-    // aspect=(double)gdk_pixbuf_get_width(pixbuf)/(double)gdk_pixbuf_get_height(pixbuf); 
-    // 
-
-    scale =
-        gdk_pixbuf_scale_simple(pixbuf,
-                                scale_width,
-                                scale_height, GDK_INTERP_BILINEAR);
-
-    gdk_pixbuf_render_pixmap_and_mask(scale, &pm, &bm, 100);
-    g_object_unref(G_OBJECT(scale));
-
-
-    icon_data->event = gtk_event_box_new();
-    gtk_container_add(GTK_CONTAINER(icon_data->frame), icon_data->event);
-    gtk_widget_set_size_request(GTK_WIDGET(icon_data->frame), 57, 77);
-
-    // g_signal_connect(G_OBJECT(icon_data->event), "button-press-event",
-    // G_CALLBACK(icon_menu), conv);
-    gtk_widget_show(icon_data->event);
-    icon_data->icon = gtk_image_new_from_pixmap(pm, bm);
-    gtk_container_add(GTK_CONTAINER(icon_data->event), icon_data->icon);
-    gtk_widget_show(icon_data->icon);
-
-    if (pm)
-        g_object_unref(G_OBJECT(pm));
-
-    if (bm)
-        g_object_unref(G_OBJECT(bm));
-
-
-}
-
-
-static void changed_cb(GtkTreeSelection * selection, gpointer conv)
-{
-
-    g_return_if_fail(selection != NULL);
-    g_return_if_fail(conv != NULL);
-
-    GaimConversation *c = (GaimConversation *) conv;
-
-    GtkTreeIter iter;
-    GtkTreeModel *model = NULL;
-    GdkPixbuf *pixbuf = NULL;
-    gchar *name;
-
-    if (!gtk_tree_selection_get_selected(selection, &model, &iter))
-        return;
-
-    gtk_tree_model_get(model, &iter, CHAT_USERS_NAME_COLUMN, &name, -1);
-
-    /* Remove the current icon stuff */
-    GaymChatIcon *icon_data = g_hash_table_lookup(icons, c);
-    if (icon_data->event != NULL)
-        gtk_widget_destroy(icon_data->event);
-    icon_data->event = NULL;
-
-    gtk_widget_grab_focus(GTK_WIDGET(model)->parent);
-
-    pixbuf = lookup_cached_thumbnail(c->account, name);
-
-    if (pixbuf)
-        gaym_update_thumbnail(c, pixbuf);
-
-    g_object_unref(pixbuf);
-    return;
-
-}
-
-void add_chat_icon_stuff(GaimConversation * c)
-{
-
-    GtkTreeModel *ls;
-
-    GaimGtkConversation *gtkconv = GAIM_GTK_CONVERSATION(c);
-    GaimGtkChatPane *gtkchat = gtkconv->u.chat;
-    GaimPluginProtocolInfo *prpl_info = NULL;
-    GaimAccount *account = gaim_conversation_get_account(c);
-    GaymChatIcon *icon_data = g_new0(GaymChatIcon, 1);
-
-    if (account && account->gc)
-        prpl_info = GAIM_PLUGIN_PROTOCOL_INFO(account->gc->prpl);
-    GtkTreeSelection *select =
-        gtk_tree_view_get_selection(GTK_TREE_VIEW(gtkchat->list));
-
-    gtk_tree_selection_set_mode(select, GTK_SELECTION_SINGLE);
-
-    ls = gtk_tree_view_get_model(GTK_TREE_VIEW(gtkchat->list));
-
-    GtkBox *hbox = GTK_BOX(gtkconv->lower_hbox);
-
-    g_signal_connect(G_OBJECT(select), "changed", G_CALLBACK(changed_cb),
-                     c);
-
-    icon_data->icon_container_parent = GTK_WIDGET(hbox);
-    icon_data->icon_container = NULL;
-    icon_data->icon = NULL;
-    icon_data->show_icon = TRUE;
-    icon_data->icon_container = gtk_vbox_new(FALSE, 0);
-
-    gtk_widget_set_size_request(GTK_WIDGET(icon_data->icon_container), 57, 77); // prpl_info->icon_spec.max_width,
-    // prpl_info->icon_spec.max_height);
-
-
-    icon_data->frame = gtk_frame_new(NULL);
-    gtk_frame_set_shadow_type(GTK_FRAME(icon_data->frame),
-                              (GTK_SHADOW_IN));
-    gtk_box_pack_start(GTK_BOX(icon_data->icon_container),
-                       icon_data->frame, FALSE, FALSE, 0);
-    gtk_widget_show(icon_data->icon_container);
-    gtk_widget_show(icon_data->frame);
-    gtk_box_pack_end(GTK_BOX(icon_data->icon_container_parent),
-                     icon_data->icon_container, FALSE, FALSE, 0);
-
-    icon_data->event = gtk_event_box_new();
-    gtk_container_add(GTK_CONTAINER(icon_data->frame), icon_data->event);
-
-    // Maybe add menu functionality later.
-    // g_signal_connect(G_OBJECT(icon_data->event), "button-press-event",
-    // G_CALLBACK(icon_menu), conv);
-    gtk_widget_show(icon_data->event);
-    g_hash_table_insert(icons, c, icon_data);
-
-
-}
-
-void init_chat_icons()
-{
-
-    icons = g_hash_table_new(g_direct_hash, g_direct_equal);
-}

Copied: qrc/tags/release-0.9.5/gaym-extras/src/chaticon.c (from rev 267, qrc/trunk/gaym-extras/src/chaticon.c)

Deleted: qrc/tags/release-0.9.5/gaym-extras/src/chatsort.c
===================================================================
--- qrc/trunk/gaym-extras/src/chatsort.c	2005-07-30 22:19:23 UTC (rev 259)
+++ qrc/tags/release-0.9.5/gaym-extras/src/chatsort.c	2005-08-02 06:44:24 UTC (rev 268)
@@ -1,147 +0,0 @@
-#include "gaym-extras.h"
-
-static gint
-sort_chat_users_by_entry(GtkTreeModel * model, GtkTreeIter * a,
-                         GtkTreeIter * b, gpointer userdata)
-{
-    GaimConvChatBuddyFlags f1 = 0, f2 = 0;
-    char *user1 = NULL, *user2 = NULL;
-    gint ret = 0;
-
-    gtk_tree_model_get(model, a, CHAT_USERS_NAME_COLUMN, &user1,
-                       CHAT_USERS_FLAGS_COLUMN, &f1, -1);
-    gtk_tree_model_get(model, b, CHAT_USERS_NAME_COLUMN, &user2,
-                       CHAT_USERS_FLAGS_COLUMN, &f2, -1);
-
-    if (user1 == NULL || user2 == NULL) {
-        if (!(user1 == NULL && user2 == NULL))
-            ret = (user1 == NULL) ? -1 : 1;
-    } else if (f1 != f2) {
-        /* sort more important users first */
-        ret = (f1 > f2) ? -1 : 1;
-    } else {
-        ret = g_utf8_collate(user1, user2);
-    }
-
-    g_free(user1);
-    g_free(user2);
-    return ret;
-}
-
-static gint
-sort_chat_users_by_alpha(GtkTreeModel * model, GtkTreeIter * a,
-                         GtkTreeIter * b, gpointer userdata)
-{
-    char *user1 = NULL, *user2 = NULL;
-    gint ret = 0;
-
-    gtk_tree_model_get(model, a, CHAT_USERS_NAME_COLUMN, &user1, -1);
-    gtk_tree_model_get(model, b, CHAT_USERS_NAME_COLUMN, &user2, -1);
-
-    if (user1 == NULL || user2 == NULL) {
-        if (!(user1 == NULL && user2 == NULL))
-            ret = (user1 == NULL) ? -1 : 1;
-    } else {
-        ret = g_utf8_collate(user1, user2);
-    }
-
-    g_free(user1);
-    g_free(user2);
-    return ret;
-}
-
-
-static gint
-sort_chat_users_by_pic(GtkTreeModel * model, GtkTreeIter * a,
-                       GtkTreeIter * b, gpointer userdata)
-{
-    GaimConvChatBuddyFlags f1 = 0, f2 = 0;
-    gint flag_mask = 0x000F;
-    char *user1 = NULL, *user2 = NULL;
-    gint ret = 0;
-
-    gtk_tree_model_get(model, a, CHAT_USERS_NAME_COLUMN, &user1,
-                       CHAT_USERS_FLAGS_COLUMN, &f1, -1);
-    gtk_tree_model_get(model, b, CHAT_USERS_NAME_COLUMN, &user2,
-                       CHAT_USERS_FLAGS_COLUMN, &f2, -1);
-
-    f1 = f1 & flag_mask;
-    f2 = f2 & flag_mask;
-
-    if (user1 == NULL || user2 == NULL) {
-        if (!(user1 == NULL && user2 == NULL))
-            ret = (user1 == NULL) ? -1 : 1;
-    } else if (f1 != f2) {
-        /* sort more important users first */
-        ret = (f1 > f2) ? -1 : 1;
-    } else {
-        ret = g_utf8_collate(user1, user2);
-    }
-
-    g_free(user1);
-    g_free(user2);
-    return ret;
-}
-
-
-static struct gaym_sort_orders {
-    const char *icon;
-    void *sort_funcion;
-    const char *tooltip;
-} const order[] = {
-    {GAYM_STOCK_ENTRY, sort_chat_users_by_entry,
-     _("Current sorting by entry")},
-    {GAYM_STOCK_ALPHA, sort_chat_users_by_alpha,
-     _("Current sorting by alpha")},
-    {GAYM_STOCK_PIC, sort_chat_users_by_pic, _("Current sorting by pic")}
-};
-
-
-void change_sort_order(GtkWidget * button, void *data)
-{
-
-    static int current = 0;
-    current = (current + 1) % G_N_ELEMENTS(order);
-    GaimGtkConversation *gtkconv = (GaimGtkConversation *) data;
-    GaimGtkChatPane *gtkchat = gtkconv->u.chat;
-    GtkTreeModel *model =
-        gtk_tree_view_get_model(GTK_TREE_VIEW(gtkchat->list));
-
-    GtkBox *buttonbox = GTK_BOX(button->parent);
-    gtk_widget_destroy(button);
-    button = GTK_WIDGET(gaim_gtkconv_button_new(order[current].icon, NULL,      // _("E"), 
-                                                                                // 
-                                                order[current].tooltip,
-                                                gtkconv->tooltips,
-                                                change_sort_order,
-                                                gtkconv));
-    gtk_box_pack_end(buttonbox, button, FALSE, FALSE, 0);
-    gtk_widget_show(button);
-    gtk_tree_sortable_set_sort_func(GTK_TREE_SORTABLE(model),
-                                    CHAT_USERS_NAME_COLUMN,
-                                    order[current].sort_funcion, NULL,
-                                    NULL);
-
-
-
-}
-
-void add_chat_sort_functions(GaimConversation * c)
-{
-
-    GaimGtkConversation *gtkconv = GAIM_GTK_CONVERSATION(c);
-
-    GtkBox *iconbox = (GtkBox *) gtkconv->info->parent;
-    // GtkWidget *button = gtk_button_new_with_label("E");
-    GtkWidget *button = gaim_gtkconv_button_new(GAYM_STOCK_ENTRY,
-                                                NULL,   // _("E"), 
-                                                _
-                                                ("Currently sorting by entry"),
-                                                gtkconv->tooltips,
-                                                change_sort_order,
-                                                gtkconv);
-    gtk_box_pack_end(iconbox, button, FALSE, FALSE, 0);
-    gtk_widget_show(button);
-
-
-}

Copied: qrc/tags/release-0.9.5/gaym-extras/src/chatsort.c (from rev 267, qrc/trunk/gaym-extras/src/chatsort.c)

Deleted: qrc/tags/release-0.9.5/gaym-extras/src/gaym-extras.c
===================================================================
--- qrc/trunk/gaym-extras/src/gaym-extras.c	2005-07-30 22:19:23 UTC (rev 259)
+++ qrc/tags/release-0.9.5/gaym-extras/src/gaym-extras.c	2005-08-02 06:44:24 UTC (rev 268)
@@ -1,140 +0,0 @@
-/* Show icons in chat room windows */
-
-
-#include "gaym-extras.h"
-// Adds motion handlers to IM tab labels.
-static void redo_im_window(GaimConversation * c)
-{
-    if (!g_strrstr(gaim_account_get_protocol_id(c->account), "prpl-gaym"))
-        return;
-    if (c && c->type == GAIM_CONV_IM)
-        add_im_popup_stuff(c);
-}
-
-
-static void update_info_cb(GaimAccount * account, char *name)
-{
-    if (!g_strrstr(gaim_account_get_protocol_id(account), "prpl-gaym"))
-        return;
-    gaim_debug_misc("gaym-extras", "info update\n");
-}
-
-static void redochatwindow(GaimConversation * c)
-{
-    if (!g_strrstr(gaim_account_get_protocol_id(c->account), "prpl-gaym"))
-        return;
-    add_chat_sort_functions(c);
-    add_chat_popup_stuff(c);
-    add_chat_icon_stuff(c);
-}
-static gchar *find_file(const char *dir, const char *base)
-{
-    char *filename;
-
-    if (base == NULL)
-        return NULL;
-
-    if (!strcmp(dir, "gaim"))
-        filename =
-            g_build_filename(GAIM_DATADIR, "pixmaps", "gaim", base, NULL);
-    else {
-        filename = g_build_filename(GAIM_DATADIR, "pixmaps", "gaim", dir,
-                                    base, NULL);
-    }
-
-    if (!g_file_test(filename, G_FILE_TEST_EXISTS)) {
-        g_critical("Unable to load stock pixmap %s\n", filename);
-
-        g_free(filename);
-
-        return NULL;
-    }
-
-    return filename;
-
-}
-
-void extras_register_stock()
-{
-
-    static gboolean stock_is_init = FALSE;
-    GtkIconFactory *icon_factory = NULL;
-    int i;
-    if (stock_is_init)
-        return;
-    stock_is_init = TRUE;
-    icon_factory = gtk_icon_factory_new();
-
-    gtk_icon_factory_add_default(icon_factory);
-
-    for (i = 0; i < G_N_ELEMENTS(stock_icons); i++) {
-        GdkPixbuf *pixbuf;
-        GtkIconSet *iconset;
-        gchar *filename;
-        filename = find_file(stock_icons[i].dir, stock_icons[i].filename);
-        if (filename == NULL)
-            continue;
-
-        pixbuf = gdk_pixbuf_new_from_file(filename, NULL);
-        g_free(filename);
-        iconset = gtk_icon_set_new_from_pixbuf(pixbuf);
-
-        g_object_unref(pixbuf);
-        gtk_icon_factory_add(icon_factory, stock_icons[i].name, iconset);
-        gtk_icon_set_unref(iconset);
-    }
-
-
-}
-static gboolean plugin_load(GaimPlugin * plugin)
-{
-    init_chat_icons();
-    init_popups();
-
-    gaim_signal_connect(gaim_conversations_get_handle(), "chat-joined",
-                        plugin, GAIM_CALLBACK(redochatwindow), NULL);
-
-    gaim_signal_connect(gaim_conversations_get_handle(),
-                        "conversation-created", plugin,
-                        GAIM_CALLBACK(redo_im_window), NULL);
-
-    gaim_signal_connect(gaim_accounts_get_handle(), "info-updated", plugin,
-                        GAIM_CALLBACK(update_info_cb), NULL);
-
-    gaim_signal_connect(gaim_conversations_get_handle(),
-                        "deleting-conversation", plugin,
-                        GAIM_CALLBACK(clean_popup_stuff), NULL);
-
-    extras_register_stock();
-    return TRUE;
-}
-
-static GaimPluginInfo info = {
-    GAIM_PLUGIN_MAGIC,
-    GAIM_MAJOR_VERSION,
-    GAIM_MINOR_VERSION,
-    GAIM_PLUGIN_STANDARD,
-    GAIM_GTK_PLUGIN_TYPE,
-    0,
-    NULL,
-    GAIM_PRIORITY_DEFAULT,
-    GAYM_EXTRAS_PLUGIN_ID,
-    N_("Gaym Extras"),
-    VERSION,
-    N_("GUI-related additions for the gaym protocol plugin."),
-    N_("Current functionality provided by this plugin:\n1. Allows namelist sort order in rooms to be changed.\n2. Shows thumbnails for currently selected user in rooms.\n3. Popup displays bio when you hover over a name in the namelist.\n4. Popup shows bio when you hover over an IM tab."),
-    "Jason LeBrun gaym at jasonlebrun.info",
-    GAIM_WEBSITE,
-    plugin_load,
-    NULL,
-    NULL,
-    NULL,
-    NULL,
-    NULL
-};
-
-static void init_plugin(GaimPlugin * plugin)
-{
-}
-
-GAIM_INIT_PLUGIN(history, init_plugin, info)

Copied: qrc/tags/release-0.9.5/gaym-extras/src/gaym-extras.c (from rev 267, qrc/trunk/gaym-extras/src/gaym-extras.c)

Deleted: qrc/tags/release-0.9.5/gaym-extras/src/gaym-extras.h
===================================================================
--- qrc/trunk/gaym-extras/src/gaym-extras.h	2005-07-30 22:19:23 UTC (rev 259)
+++ qrc/tags/release-0.9.5/gaym-extras/src/gaym-extras.h	2005-08-02 06:44:24 UTC (rev 268)
@@ -1,89 +0,0 @@
-#include "internal.h"
-#include "gtkgaim.h"
-
-#include "conversation.h"
-#include "debug.h"
-#include "prefs.h"
-#include "signals.h"
-#include "util.h"
-#include "version.h"
-#include "buddyicon.h"
-#include "prpl.h"
-
-#include "gtkconv.h"
-#include "gtkplugin.h"
-
-#ifndef GAYM_EXTRAS_H
-#define GAYM_EXTRAS_H
-
-#define GAYM_EXTRAS_PLUGIN_ID "gtk-gaym-extras"
-
-#define GAYM_STOCK_ALPHA "alpha"
-#define GAYM_STOCK_ENTRY "entry"
-#define GAYM_STOCK_PIC "pic"
-
-
-struct fetch_thumbnail_data {
-    const char *who;
-    char *pic_data;
-    gint pic_data_len;
-    gboolean from_file;
-};
-
-struct paint_data {
-    char *tooltiptext;
-    GdkPixbuf *pixbuf;
-};
-
-// Additional UI info for a conversation.
-// We may be able to clean this up, some.
-typedef struct _GaymChatIcon {
-
-    GaimConversation *conv;
-    GtkWidget *icon_container_parent;
-    GtkWidget *icon_container;
-    GtkWidget *frame;
-    GtkWidget *icon;
-    GtkWidget *event;
-    gboolean show_icon;
-
-} GaymChatIcon;
-
-
-typedef enum {
-    TOOLTIP_CHAT,
-    TOOLTIP_IM,
-} GaymTooltipType;
-
-struct timeout_cb_data {
-    GaymTooltipType type;
-    GtkWidget *tv;
-    GaimAccount *account;
-};
-
-
-GdkPixbuf *lookup_cached_thumbnail(GaimAccount * account,
-                                   const char *fullname);
-void get_icon_scale_size(GdkPixbuf * icon, GaimBuddyIconSpec * spec,
-                         int *width, int *height);
-void clean_popup_stuff(GaimConversation * c);
-void add_chat_icon_stuff(GaimConversation * c);
-void add_chat_popup_stuff(GaimConversation * c);
-void add_chat_sort_functions(GaimConversation * c);
-void add_im_popup_stuff(GaimConversation * c);
-void init_chat_icons();
-void init_popups();
-
-
-static struct StockIcon {
-    const char *name;
-    const char *dir;
-    const char *filename;
-
-} const stock_icons[] = {
-    {GAYM_STOCK_ALPHA, "gaym", "alpha.png"},
-    {GAYM_STOCK_ENTRY, "gaym", "entry.png"},
-    {GAYM_STOCK_PIC, "gaym", "pic.png"}
-};
-
-#endif                          // GAYM_EXTRAS_H

Copied: qrc/tags/release-0.9.5/gaym-extras/src/gaym-extras.h (from rev 267, qrc/trunk/gaym-extras/src/gaym-extras.h)

Deleted: qrc/tags/release-0.9.5/gaym-extras/src/roombrowse.c
===================================================================
--- qrc/trunk/gaym-extras/src/roombrowse.c	2005-07-30 22:19:23 UTC (rev 259)
+++ qrc/tags/release-0.9.5/gaym-extras/src/roombrowse.c	2005-08-02 06:44:24 UTC (rev 268)
@@ -1,435 +0,0 @@
-/* Puts last 4k of log in new conversations a la Everybuddy (and then
-   stolen by Trillian "Pro") */
-
-#include "internal.h"
-#include "gtkgaim.h"
-
-#include "conversation.h"
-#include "debug.h"
-#include "log.h"
-#include "prefs.h"
-#include "signals.h"
-#include "util.h"
-#include "version.h"
-#include "prpl.h"
-
-#include "gtkconv.h"
-#include "gtkimhtml.h"
-#include "gtkplugin.h"
-#include "gtkdialogs.h"
-#include "gtkutils.h"
-#include "gtkblist.h"
-#include "gtkimhtmltoolbar.h"
-#include <gdk/gdkkeysyms.h>
-
-#define CHATSORT_PLUGIN_ID "gtk-chatsort"
-#define CHATSORT_USERS_COLUMNS 4
-#define CHATSORT_USERS_ENTRY_COLUMN 3
-
-/**
- * Unused variables:
- *
- * static GList *browsers = NULL;
- */
-
-struct RoomBrowseInfo {
-
-    GaimAccount *account;
-    GaimConnection *gc;
-};
-
-static GtkWidget *setup_roombrowse_pane(GaimConversation * conv)
-{
-    GaimGtkConversation *gtkconv;
-    GaimGtkChatPane *gtkchat;
-    GaimConnection *gc;
-    GtkWidget *vpaned, *hpaned;
-    GtkWidget *vbox;
-
-        /**
-	 * Unused variables:
-	 *
-	 * GaimPluginProtocolInfo *prpl_info = NULL;
-	 * GtkWidget *hbox;
-	 * GtkWidget *lbox, *bbox;
-	 * GtkWidget *label;
-	 * GtkWidget *list;
-	 * GtkWidget *button;
-	 * GtkWidget *sw;
-	 * GtkListStore *ls;
-	 * GtkCellRenderer *rend;
-	 * GtkTreeViewColumn *col;
-	 * GList *focus_chain = NULL;
-	 */
-
-    gtkconv = GAIM_GTK_CONVERSATION(conv);
-    gtkchat = gtkconv->u.chat;
-    gc = gaim_conversation_get_gc(conv);
-
-    /* Setup the outer pane. */
-    vpaned = gtk_vpaned_new();
-    gtk_widget_show(vpaned);
-    /* Setup the top part of the pane. */
-    vbox = gtk_vbox_new(FALSE, 6);
-    gtk_paned_pack1(GTK_PANED(vpaned), vbox, TRUE, TRUE);
-    gtk_widget_show(vbox);
-
-    /* Setup the horizontal pane. */
-    hpaned = gtk_hpaned_new();
-    gtk_box_pack_start(GTK_BOX(vbox), hpaned, TRUE, TRUE, 0);
-    gtk_widget_show(hpaned);
-
-    /* Setup the scrolled window to put gtkimhtml in. */
-    gtkconv->sw = gtk_scrolled_window_new(NULL, NULL);
-    gtk_scrolled_window_set_policy(GTK_SCROLLED_WINDOW(gtkconv->sw),
-                                   GTK_POLICY_AUTOMATIC,
-                                   GTK_POLICY_ALWAYS);
-    gtk_scrolled_window_set_shadow_type(GTK_SCROLLED_WINDOW(gtkconv->sw),
-                                        GTK_SHADOW_IN);
-    gtk_paned_pack1(GTK_PANED(hpaned), gtkconv->sw, TRUE, TRUE);
-
-    gtk_widget_set_size_request(gtkconv->sw,
-                                gaim_prefs_get_int
-                                ("/gaim/gtk/conversations/chat/default_width"),
-                                gaim_prefs_get_int
-                                ("/gaim/gtk/conversations/chat/default_height"));
-
-    // g_signal_connect(G_OBJECT(gtkconv->sw), "size-allocate",
-    // G_CALLBACK(size_allocate_cb), conv);
-
-    gtk_widget_show(gtkconv->sw);
-
-    return vpaned;
-}
-
-static gint close_conv_cb(GtkWidget * w, gpointer d)
-{
-    GaimConversation *conv = (GaimConversation *) d;
-
-    gaim_conversation_destroy(conv);
-
-    return TRUE;
-}
-
-GdkPixbuf *get_tab_icon(GaimConversation * conv, gboolean small_icon)
-{
-    GaimAccount *account = NULL;
-    const char *name = NULL;
-    GdkPixbuf *status = NULL;
-
-    g_return_val_if_fail(conv != NULL, NULL);
-
-    account = gaim_conversation_get_account(conv);
-    name = gaim_conversation_get_name(conv);
-
-    g_return_val_if_fail(account != NULL, NULL);
-    g_return_val_if_fail(name != NULL, NULL);
-
-
-    if (gaim_conversation_get_type(conv) == GAIM_CONV_IM) {
-        GaimBuddy *b = gaim_find_buddy(account, name);
-        if (b != NULL) {
-            status = gaim_gtk_blist_get_status_icon((GaimBlistNode *) b,
-                                                    (small_icon ?
-                                                     GAIM_STATUS_ICON_SMALL
-                                                     :
-                                                     GAIM_STATUS_ICON_LARGE));
-        }
-    }
-
-    if (!status) {
-        GdkPixbuf *pixbuf;
-        pixbuf = create_prpl_icon(account);
-
-        if (small_icon && pixbuf != NULL) {
-            status = gdk_pixbuf_scale_simple(pixbuf, 15, 15,
-                                             GDK_INTERP_BILINEAR);
-            g_object_unref(pixbuf);
-        } else
-            status = pixbuf;
-    }
-    return status;
-}
-
-/**
- * Unused function
- */
-#if 0
-static void update_tab_icon(GaimConversation * conv)
-{
-    GaimGtkConversation *gtkconv;
-    GaimConvWindow *win = gaim_conversation_get_window(conv);
-    GaimAccount *account;
-    const char *name;
-    GdkPixbuf *status = NULL;
-
-    g_return_if_fail(conv != NULL);
-
-    gtkconv = GAIM_GTK_CONVERSATION(conv);
-    name = gaim_conversation_get_name(conv);
-    account = gaim_conversation_get_account(conv);
-
-    status = get_tab_icon(conv, TRUE);
-
-    g_return_if_fail(status != NULL);
-
-    gtk_image_set_from_pixbuf(GTK_IMAGE(gtkconv->icon), status);
-    gtk_image_set_from_pixbuf(GTK_IMAGE(gtkconv->menu_icon), status);
-
-    if (status != NULL)
-        g_object_unref(status);
-
-    if (gaim_conv_window_get_active_conversation(win) == conv &&
-        gtkconv->u.im->anim == NULL) {
-        status = get_tab_icon(conv, FALSE);
-
-        gtk_window_set_icon(GTK_WINDOW(GAIM_GTK_WINDOW(win)->window),
-                            status);
-
-        if (status != NULL)
-            g_object_unref(status);
-    }
-}
-#endif
-
-/* Courtesy of Galeon! */
-static void
-tab_close_button_state_changed_cb(GtkWidget * widget,
-                                  GtkStateType prev_state)
-{
-    if (GTK_WIDGET_STATE(widget) == GTK_STATE_ACTIVE)
-        gtk_widget_set_state(widget, GTK_STATE_NORMAL);
-}
-
-static void
-roombrowse_gtk_add_conversation(GaimConvWindow * win,
-                                GaimConversation * conv)
-{
-    GaimGtkWindow *gtkwin;
-    GaimGtkConversation *gtkconv, *focus_gtkconv;
-    GaimConversation *focus_conv;
-    GtkWidget *pane = NULL;
-    GtkWidget *tab_cont;
-    GtkWidget *tabby, *menu_tabby;
-    GtkWidget *close_image;
-    gboolean new_ui;
-    GaimConversationType conv_type;
-    const char *name;
-
-    name = gaim_conversation_get_name(conv);
-    conv_type = gaim_conversation_get_type(conv);
-    gtkwin = GAIM_GTK_WINDOW(win);
-
-    if (conv->ui_data != NULL) {
-        gtkconv = (GaimGtkConversation *) conv->ui_data;
-
-        tab_cont = gtkconv->tab_cont;
-
-        new_ui = FALSE;
-    } else {
-        gtkconv = g_malloc0(sizeof(GaimGtkConversation));
-        conv->ui_data = gtkconv;
-
-        /* Setup some initial variables. */
-        gtkconv->sg = gtk_size_group_new(GTK_SIZE_GROUP_BOTH);
-        gtkconv->tooltips = gtk_tooltips_new();
-
-        gaim_debug_misc("roombrowse", "setting up pane\n");
-        pane = setup_roombrowse_pane(conv);
-
-        gaim_debug_misc("roombrowse", "set up pane\n");
-
-        if (pane == NULL) {
-            g_free(gtkconv);
-            conv->ui_data = NULL;
-
-            return;
-        }
-
-
-
-        /* Setup the container for the tab. */
-        gtkconv->tab_cont = tab_cont = gtk_vbox_new(FALSE, 6);
-        gtk_container_set_border_width(GTK_CONTAINER(tab_cont), 6);
-        gtk_container_add(GTK_CONTAINER(tab_cont), pane);
-        gtk_widget_show(pane);
-
-        new_ui = TRUE;
-
-        gtkconv->make_sound = FALSE;
-        gtkconv->show_formatting_toolbar = FALSE;
-        gtkconv->show_timestamps = FALSE;
-
-        g_signal_connect_swapped(G_OBJECT(pane), "focus",
-                                 G_CALLBACK(gtk_widget_grab_focus),
-                                 gtkconv->entry);
-    }
-
-    gaim_debug_misc("roombrowse", "Setting up tabs\n");
-    gtkconv->tabby = tabby = gtk_hbox_new(FALSE, 6);
-    gtkconv->menu_tabby = menu_tabby = gtk_hbox_new(FALSE, 6);
-    gtkconv->entry = gtk_imhtml_new(NULL, NULL);
-    gtkconv->toolbar = gtk_imhtmltoolbar_new();
-
-    gaim_debug_misc("roombrowse", "Setting up close button\n");
-    /* Close button. */
-    gtkconv->close = gtk_button_new();
-    gtk_widget_set_size_request(GTK_WIDGET(gtkconv->close), 16, 16);
-    gtk_button_set_relief(GTK_BUTTON(gtkconv->close), GTK_RELIEF_NONE);
-    close_image =
-        gtk_image_new_from_stock(GTK_STOCK_CLOSE, GTK_ICON_SIZE_MENU);
-    gtk_widget_show(close_image);
-    gtk_container_add(GTK_CONTAINER(gtkconv->close), close_image);
-    gtk_tooltips_set_tip(gtkconv->tooltips, gtkconv->close,
-                         _("Close conversation"), NULL);
-
-    g_signal_connect(G_OBJECT(gtkconv->close), "clicked",
-                     G_CALLBACK(close_conv_cb), conv);
-
-    /* 
-     * I love Galeon. They have a fix for that stupid annoying visible
-     * border bug. I love you guys! -- ChipX86
-     */
-    g_signal_connect(G_OBJECT(gtkconv->close), "state_changed",
-                     G_CALLBACK(tab_close_button_state_changed_cb), NULL);
-
-    /* Status icon. */
-    gtkconv->icon = gtk_image_new();
-    gtkconv->menu_icon = gtk_image_new();
-    // update_tab_icon(conv);
-
-    /* Tab label. */
-    gtkconv->tab_label = gtk_label_new(gaim_conversation_get_title(conv));
-    gtkconv->menu_label = gtk_label_new(gaim_conversation_get_title(conv));
-#if 0
-    gtk_misc_set_alignment(GTK_MISC(gtkconv->tab_label), 0.00, 0.5);
-    gtk_misc_set_padding(GTK_MISC(gtkconv->tab_label), 4, 0);
-#endif
-
-    gaim_debug_misc("roombrowse", "Packing\n");
-    /* Pack it all together. */
-    gtk_box_pack_start(GTK_BOX(tabby), gtkconv->icon, FALSE, FALSE, 0);
-    gtk_box_pack_start(GTK_BOX(menu_tabby), gtkconv->menu_icon,
-                       FALSE, FALSE, 0);
-
-    gtk_widget_show_all(gtkconv->icon);
-    gtk_widget_show_all(gtkconv->menu_icon);
-
-    gtk_box_pack_start(GTK_BOX(tabby), gtkconv->tab_label, TRUE, TRUE, 0);
-    gtk_box_pack_start(GTK_BOX(menu_tabby), gtkconv->menu_label, TRUE,
-                       TRUE, 0);
-    gtk_widget_show(gtkconv->tab_label);
-    gtk_widget_show(gtkconv->menu_label);
-    gtk_misc_set_alignment(GTK_MISC(gtkconv->menu_label), 0, 0);
-
-    gtk_box_pack_start(GTK_BOX(tabby), gtkconv->close, FALSE, FALSE, 0);
-    if (gaim_prefs_get_bool("/gaim/gtk/conversations/close_on_tabs"))
-        gtk_widget_show(gtkconv->close);
-
-    gtk_widget_show(tabby);
-    gtk_widget_show(menu_tabby);
-
-    if (gaim_conversation_get_type(conv) == GAIM_CONV_IM)
-        gaim_gtkconv_update_buddy_icon(conv);
-
-    gaim_debug_misc("roombrowse", "Adding to notebook\n");
-    gaim_debug_misc("roombrowse", "gtkwin->notebook=%x\n",
-                    gtkwin->notebook);
-    gaim_debug_misc("roombrowse", "gtkwin=%x\n", gtkwin);
-    gaim_debug_misc("roombrowse", "tabby=%x\n", tabby);
-    gaim_debug_misc("roombrowse", "menu_tabby=%x\n", menu_tabby);
-    gaim_debug_misc("roombrowse", "tab_cont=%x\n", tab_cont);
-
-    /* Add this pane to the conversation's notebook. */
-    int n = gtk_notebook_get_n_pages(GTK_NOTEBOOK(gtkwin->notebook));
-    gaim_debug_misc("roombrowse:", "Notebook has %d pages\n", n);
-    gtk_notebook_append_page_menu(GTK_NOTEBOOK(gtkwin->notebook), tab_cont,
-                                  tabby, menu_tabby);
-    gaim_debug_misc("roombrowse", "Got through append_page_menu\n");
-    gtk_widget_show(tab_cont);
-
-    if (gaim_conv_window_get_conversation_count(win) == 1) {
-        /* Er, bug in notebooks? Switch to the page manually. */
-        gtk_notebook_set_current_page(GTK_NOTEBOOK(gtkwin->notebook), 0);
-
-        gtk_notebook_set_show_tabs(GTK_NOTEBOOK(gtkwin->notebook),
-                                   gaim_prefs_get_bool
-                                   ("/gaim/gtk/conversations/tabs"));
-    } else
-        gtk_notebook_set_show_tabs(GTK_NOTEBOOK(gtkwin->notebook), TRUE);
-    gaim_debug_misc("roombrowse", "FOcus stuff\n");
-    focus_conv = g_list_nth_data(gaim_conv_window_get_conversations(win),
-                                 gtk_notebook_get_current_page(GTK_NOTEBOOK
-                                                               (gtkwin->
-                                                                notebook)));
-    focus_gtkconv = GAIM_GTK_CONVERSATION(focus_conv);
-    gtk_widget_grab_focus(focus_gtkconv->entry);
-
-    if (!new_ui)
-        g_object_unref(gtkconv->tab_cont);
-}
-
-
-static void roombrowse_menu_cb(GaimBlistNode * node, gpointer data)
-{
-    GaimConvWindow *win = gaim_get_first_window_with_type(GAIM_CONV_MISC);
-    GaimConversation *conv = g_new0(GaimConversation, 1);
-
-    GaimAccount *account = ((GaimChat *) node)->account;
-    if (!win)
-        win = gaim_conv_window_new();
-    GaimChat *chat = ((GaimChat *) node);
-    char *room = g_strdup(g_hash_table_lookup(chat->components, "name"));
-
-
-    gaim_debug_misc("roombrowser", "In cb with node=%x, account=%x\n",
-                    node, account);
-    conv = gaim_conversation_new(GAIM_CONV_MISC, account, room);
-
-    gaim_conversation_set_logging(conv, FALSE);
-
-    roombrowse_gtk_add_conversation(conv->window, conv);
-    gaim_conv_window_show(conv->window);
-
-    g_free(room);
-
-}
-static void roombrowse_menu_create(GaimBlistNode * node, GList ** menu)
-{
-
-    char *label, *room;
-
-    struct gaym_conn *gaym;
-    GaimChat *chat = (GaimChat *) node;
-
-    gaim_debug_misc("roombrowse", "In callback\n");
-    if (node->type != GAIM_BLIST_CHAT_NODE)
-        return;
-
-    gaym = chat->account->gc->proto_data;
-
-    room = g_strdup(g_hash_table_lookup(chat->components, "name"));
-    gaim_debug_misc("roombrowse", "Room name: %s\n", room);
-    if (!room)
-        return;
-
-
-    label = g_strdup_printf("Lurk in %s", room);
-    GaimBlistNodeAction *act = gaim_blist_node_action_new(label,
-                                                          roombrowse_menu_cb,
-                                                          chat->account);
-
-    *menu = g_list_append(*menu, act);
-    // g_free(label);
-}
-static gboolean roombrowse_load(GaimPlugin * plugin)
-{
-    gaim_signal_connect(gaim_blist_get_handle(),
-                        "blist-node-extended-menu",
-                        plugin, GAIM_CALLBACK(roombrowse_menu_create),
-                        NULL);
-
-
-    gaim_debug_misc("roombrowse", "Callback registered!\n");
-    return TRUE;
-}

Copied: qrc/tags/release-0.9.5/gaym-extras/src/roombrowse.c (from rev 267, qrc/trunk/gaym-extras/src/roombrowse.c)

Deleted: qrc/tags/release-0.9.5/nsis/installer.nsi
===================================================================
--- qrc/trunk/nsis/installer.nsi	2005-07-30 22:19:23 UTC (rev 259)
+++ qrc/tags/release-0.9.5/nsis/installer.nsi	2005-08-02 06:44:24 UTC (rev 268)
@@ -1,346 +0,0 @@
-; NSIS Script for the Gaim-QRC Plugins
-; Uses NSIS v2.0
-
-Name "Gaim-QRC ${QRC_VERSION}"
-
-; Registry keys:
-!define QRC_REG_KEY        "SOFTWARE\gaim-qrc"
-!define QRC_UNINSTALL_KEY  "SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\gaim-qrc"
-!define QRC_UNINST_EXE     "gaim-qrc-uninst.exe"
-!define GAYM_DLL           "libgaym.dll"
-!define BOT_CHALLENGER_DLL "libbot-challenger.dll"
-!define GAYM_EXTRAS_DLL	   "libgaym-extras.dll"
-!define GAYM_PNG           "gaym.png"
-!define QRC_UNINSTALL_LNK  "Gaim-QRC Uninstall.lnk"
-!define	ALPHA_PNG	   "alpha.png"
-!define	ENTRY_PNG	   "entry.png"
-!define	PIC_PNG		    "pic.png"
-!include "MUI.nsh"
-
-;Do A CRC Check
-CRCCheck On
-
-;Output File Name
-OutFile "..\gaim-${GAIM_VERSION}-qrc-${QRC_VERSION}.exe"
-
-ShowInstDetails show
-ShowUnInstDetails show
-SetCompressor lzma
-
-; Translations
-!include "locale\english.nsh"
-
-; Gaim Plugin installer helper stuff
-
-!addincludedir "${GAIM_TOP}\src\win32\nsis"
-!include "${GAIM_TOP}\src\win32\nsis\gaim-plugin.nsh"
-
-; Modern UI Configuration
-!define MUI_HEADERIMAGE
-
-; Pages
-!define MUI_WELCOMEPAGE_TITLE $(WELCOME_TITLE)
-!define MUI_WELCOMEPAGE_TEXT $(WELCOME_TEXT)
-!insertmacro MUI_PAGE_WELCOME
-
-!insertmacro MUI_PAGE_LICENSE  "..\COPYING"
-
-!define MUI_DIRECTORYPAGE_TEXT_TOP $(DIR_SUBTITLE)
-!define MUI_DIRECTORYPAGE_TEXT_DESTINATION $(DIR_INNERTEXT)
-!insertmacro MUI_PAGE_DIRECTORY
-
-!define MUI_FINISHPAGE_NOAUTOCLOSE
-!insertmacro MUI_PAGE_INSTFILES
-
-!define MUI_FINISHPAGE_TITLE $(FINISH_TITLE)
-!define MUI_FINISHPAGE_TEXT $(FINISH_TEXT)
-!insertmacro MUI_PAGE_FINISH
-
-; MUI Config
-
-!define MUI_CUSTOMFUNCTION_GUIINIT qrc_checkGaimVersion
-!define MUI_ABORTWARNING
-!define MUI_UNINSTALLER
-!define MUI_PROGRESSBAR smooth
-!define MUI_INSTALLCOLORS /windows
-
-!insertmacro MUI_LANGUAGE "English"
-
-!define MUI_LICENSEPAGE_RADIOBUTTONS
-
-
-;The Default Installation Directory
-InstallDir "$PROGRAMFILES\gaim"
-InstallDirRegKey HKLM SOFTWARE\gaim ""
-
-Section -SecUninstallOldPlugin
-  ; Check install rights..
-  Call CheckUserInstallRights
-  Pop $R0
-
-  StrCmp $R0 "HKLM" rights_hklm
-  StrCmp $R0 "HKCU" rights_hkcu done
-
-  rights_hkcu:
-      ReadRegStr $R1 HKCU "${QRC_REG_KEY}" ""
-      ReadRegStr $R2 HKCU "${QRC_REG_KEY}" "Version"
-      ReadRegStr $R3 HKCU "${QRC_UNINSTALL_KEY}" "UninstallString"
-      Goto try_uninstall
-
-  rights_hklm:
-      ReadRegStr $R1 HKLM "${QRC_REG_KEY}" ""
-      ReadRegStr $R2 HKLM "${QRC_REG_KEY}" "Version"
-      ReadRegStr $R3 HKLM "${QRC_UNINSTALL_KEY}" "UninstallString"
-
-  ; If previous version exists .. remove
-  try_uninstall:
-    StrCmp $R1 "" done
-      StrCmp $R2 "" uninstall_problem
-        IfFileExists $R3 0 uninstall_problem
-          ; Have uninstall string.. go ahead and uninstall.
-          SetOverwrite on
-          ; Need to copy uninstaller outside of the install dir
-          ClearErrors
-          CopyFiles /SILENT $R3 "$TEMP\${QRC_UNINST_EXE}"
-          SetOverwrite off
-          IfErrors uninstall_problem
-            ; Ready to uninstall..
-            ClearErrors
-            ExecWait '"$TEMP\${QRC_UNINST_EXE}" /S _?=$R1'
-            IfErrors exec_error
-              Delete "$TEMP\${QRC_UNINST_EXE}"
-              Goto done
-
-            exec_error:
-              Delete "$TEMP\${QRC_UNINST_EXE}"
-              Goto uninstall_problem
-
-        uninstall_problem:
-            ; Just delete the plugin and uninstaller, and remove Registry key
-             MessageBox MB_YESNO $(QRC_PROMPT_WIPEOUT) IDYES do_wipeout IDNO cancel_install
-          cancel_install:
-            Quit
-
-          do_wipeout:
-            StrCmp $R0 "HKLM" del_lm_reg del_cu_reg
-            del_cu_reg:
-              DeleteRegKey HKCU ${QRC_REG_KEY}
-              Goto uninstall_prob_cont
-            del_lm_reg:
-              DeleteRegKey HKLM ${QRC_REG_KEY}
-
-            uninstall_prob_cont:
-              ; plugin DLL
-              Delete "$R1\plugins\${GAYM_DLL}"
-              Delete "$R1\plugins\${BOT_CHALLENGER_DLL}"
-              Delete "$R1\plugins\${GAYM_EXTRAS_DLL}"
-              ; pixmaps
-	      Delete "$R1\pixmaps\${ALPHA_PNG}"
-	      Delete "$R1\pixmaps\${ENTRY_PNG}"
-	      Delete "$R1\pixmaps\${PIC_PNG}"
-              Delete "$R1\pixmaps\gaim\status\default\${GAYM_PNG}"
-              Delete "$R3"
-
-  done:
-
-SectionEnd
-
-
-Section "Install"
-  Call CheckUserInstallRights
-  Pop $R0
-
-  StrCmp $R0 "NONE" instrights_none
-  StrCmp $R0 "HKLM" instrights_hklm instrights_hkcu
-
-  instrights_hklm:
-    ; Write the version registry keys:
-    WriteRegStr HKLM ${QRC_REG_KEY} "" "$INSTDIR"
-    WriteRegStr HKLM ${QRC_REG_KEY} "Version" "${QRC_VERSION}"
-
-    ; Write the uninstall keys for Windows
-    WriteRegStr HKLM ${QRC_UNINSTALL_KEY} "DisplayName" "$(QRC_UNINSTALL_DESC)"
-    WriteRegStr HKLM ${QRC_UNINSTALL_KEY} "UninstallString" "$INSTDIR\${QRC_UNINST_EXE}"
-    SetShellVarContext "all"
-    Goto install_files
-
-  instrights_hkcu:
-    ; Write the version registry keys:
-    WriteRegStr HKCU ${QRC_REG_KEY} "" "$INSTDIR"
-    WriteRegStr HKCU ${QRC_REG_KEY} "Version" "${QRC_VERSION}"
-
-    ; Write the uninstall keys for Windows
-    WriteRegStr HKCU ${QRC_UNINSTALL_KEY} "DisplayName" "$(QRC_UNINSTALL_DESC)"
-    WriteRegStr HKCU ${QRC_UNINSTALL_KEY} "UninstallString" "$INSTDIR\${QRC_UNINST_EXE}"
-    Goto install_files
-  
-  instrights_none:
-    ; No registry keys for us...
-    
-  install_files:
-    SetOutPath "$INSTDIR\plugins"
-    SetCompress Auto
-    SetOverwrite on
-    File "..\gaym\src\.libs\${GAYM_DLL}"
-    File "..\gaym-extras\src\.libs\${GAYM_EXTRAS_DLL}"
-    File "..\bot-challenger\.libs\${BOT_CHALLENGER_DLL}"
-    
-    SetOutPath "$INSTDIR\pixmaps\gaim\status\default"
-    File "..\gaym\pixmaps\${GAYM_PNG}"
-    	
-    SetOutPath "$INSTDIR\pixmaps"
-    File "..\gaym-extras\pixmaps\${ALPHA_PNG}"
-    File "..\gaym-extras\pixmaps\${ENTRY_PNG}"
-    File "..\gaym-extras\pixmaps\${PIC_PNG}"
-    StrCmp $R0 "NONE" done
-    CreateShortCut "$SMPROGRAMS\Gaim\${QRC_UNINSTALL_LNK}" "$INSTDIR\${QRC_UNINST_EXE}"
-    WriteUninstaller "$INSTDIR\${QRC_UNINST_EXE}"
-    SetOverWrite off
-
-  done:
-SectionEnd
-
-Section Uninstall
-  Call un.CheckUserInstallRights
-  Pop $R0
-  StrCmp $R0 "NONE" no_rights
-  StrCmp $R0 "HKCU" try_hkcu try_hklm
-
-  try_hkcu:
-    ReadRegStr $R0 HKCU "${QRC_REG_KEY}" ""
-    StrCmp $R0 $INSTDIR 0 cant_uninstall
-      ; HKCU install path matches our INSTDIR.. so uninstall
-      DeleteRegKey HKCU "${QRC_REG_KEY}"
-      DeleteRegKey HKCU "${QRC_UNINSTALL_KEY}"
-      Goto cont_uninstall
-
-  try_hklm:
-    ReadRegStr $R0 HKLM "${QRC_REG_KEY}" ""
-    StrCmp $R0 $INSTDIR 0 try_hkcu
-      ; HKLM install path matches our INSTDIR.. so uninstall
-      DeleteRegKey HKLM "${QRC_REG_KEY}"
-      DeleteRegKey HKLM "${QRC_UNINSTALL_KEY}"
-      ; Sets start menu and desktop scope to all users..
-      SetShellVarContext "all"
-
-  cont_uninstall:
-    ; plugin 
-    Delete "$INSTDIR\plugins\${GAYM_DLL}"
-    Delete "$INSTDIR\plugins\${BOT_CHALLENGER_DLL}"
-    ; pixmaps
-    Delete "$INSTDIR\pixmaps\gaim\status\default\${GAYM_PNG}"
-    Delete "$INSTDIR\pixmaps\${ALPHA_PNG}"
-    Delete "$INSTDIR\pixmaps\${ENTRY_PNG}"
-    Delete "$INSTDIR\pixmaps\${PIC_PNG}"
-    ; uninstaller
-    Delete "$INSTDIR\${QRC_UNINST_EXE}"
-    ; uninstaller shortcut
-    Delete "$SMPROGRAMS\Gaim\${QRC_UNINSTALL_LNK}"
-    
-    ; try to delete the Gaim directories, in case it has already uninstalled
-    RMDir "$INSTDIR\plugins"
-    RMDir "$INSTDIR"
-    RMDir "$SMPROGRAMS\Gaim"
-
-    Goto done
-
-  cant_uninstall:
-    MessageBox MB_OK $(un.QRC_UNINSTALL_ERROR_1) IDOK
-    Quit
-
-  no_rights:
-    MessageBox MB_OK $(un.QRC_UNINSTALL_ERROR_2) IDOK
-    Quit
-
-  done:
-SectionEnd
-
-Function .onVerifyInstDir
-  IfFileExists $INSTDIR\gaim.exe Good1
-    Abort
-  Good1:
-FunctionEnd
-
-Function qrc_checkGaimVersion
-  Push $R0
-
-  Push ${GAIM_VERSION}
-  Call CheckGaimVersion
-  Pop $R0
-
-  StrCmp $R0 ${GAIM_VERSION_OK} qrc_checkGaimVersion_OK
-  StrCmp $R0 ${GAIM_VERSION_INCOMPATIBLE} +1 +6
-    Call GetGaimVersion
-    IfErrors +3
-    Pop $R0
-    MessageBox MB_OK|MB_ICONSTOP "$(BAD_GAIM_VERSION_1) $R0 $(BAD_GAIM_VERSION_2)"
-    goto +2
-    MessageBox MB_OK|MB_ICONSTOP "$(NO_GAIM_VERSION)"
-    Quit
-
-  qrc_checkGaimVersion_OK:
-  Pop $R0
-FunctionEnd
-
-Function CheckUserInstallRights
-        ClearErrors
-        UserInfo::GetName
-        IfErrors Win9x
-        Pop $0
-        UserInfo::GetAccountType
-        Pop $1
-
-        StrCmp $1 "Admin" 0 +3
-                StrCpy $1 "HKLM"
-                Goto done
-        StrCmp $1 "Power" 0 +3
-                StrCpy $1 "HKLM"
-                Goto done
-        StrCmp $1 "User" 0 +3
-                StrCpy $1 "HKCU"
-                Goto done
-        StrCmp $1 "Guest" 0 +3
-                StrCpy $1 "NONE"
-                Goto done
-        ; Unknown error
-        StrCpy $1 "NONE"
-        Goto done
-
-        Win9x:
-                StrCpy $1 "HKLM"
-
-        done:
-        Push $1
-FunctionEnd
-
-Function un.CheckUserInstallRights
-        ClearErrors
-        UserInfo::GetName
-        IfErrors Win9x
-        Pop $0
-        UserInfo::GetAccountType
-        Pop $1
-        StrCmp $1 "Admin" 0 +3
-                StrCpy $1 "HKLM"
-                Goto done
-        StrCmp $1 "Power" 0 +3
-                StrCpy $1 "HKLM"
-                Goto done
-        StrCmp $1 "User" 0 +3
-                StrCpy $1 "HKCU"
-                Goto done
-        StrCmp $1 "Guest" 0 +3
-                StrCpy $1 "NONE"
-                Goto done
-        ; Unknown error
-        StrCpy $1 "NONE"
-        Goto done
-
-        Win9x:
-                StrCpy $1 "HKLM"
-
-        done:
-        Push $1
-FunctionEnd
-
-

Copied: qrc/tags/release-0.9.5/nsis/installer.nsi (from rev 260, qrc/trunk/nsis/installer.nsi)



From jblebrun at berlios.de  Tue Aug  2 08:47:36 2005
From: jblebrun at berlios.de (Jason LeBrun at BerliOS)
Date: Tue, 2 Aug 2005 08:47:36 +0200
Subject: [Qrc-svn] r269 - qrc/trunk
Message-ID: <200508020647.j726lafT005007@sheep.berlios.de>

Author: jblebrun
Date: 2005-08-02 08:47:23 +0200 (Tue, 02 Aug 2005)
New Revision: 269

Modified:
   qrc/trunk/ChangeLog
Log:


Modified: qrc/trunk/ChangeLog
===================================================================
--- qrc/trunk/ChangeLog	2005-08-02 06:44:24 UTC (rev 268)
+++ qrc/trunk/ChangeLog	2005-08-02 06:47:23 UTC (rev 269)
@@ -1,5 +1,19 @@
-0.8-pre:
+0.9.5:
+	Bug Fixes:
+	- Can handle room browsing of rooms you are currently in.
+	- Strip markup from bio set as away message
+	
+	Known Bugs:
+	- Don't try and update a bunch of room browsers too quickly.
+	- Problem in win32 when you try and get info from right-click menu. 
+
+0.9:
 	New Features:
+	-Room browser!
+	
+	
+0.8:
+	New Features:
 	- Bio displays in chat list as popups over the namelist.
 	- Pvt IM windows display bios as popups over the tab.
 	- Rooms are now sortable by entry order, alpha, or pic type.



From jblebrun at berlios.de  Wed Aug  3 09:24:28 2005
From: jblebrun at berlios.de (Jason LeBrun at BerliOS)
Date: Wed, 3 Aug 2005 09:24:28 +0200
Subject: [Qrc-svn] r270 - in qrc/trunk: gaym/src gaym-extras/src
Message-ID: <200508030724.j737OSAt014412@sheep.berlios.de>

Author: jblebrun
Date: 2005-08-03 09:24:01 +0200 (Wed, 03 Aug 2005)
New Revision: 270

Modified:
   qrc/trunk/gaym-extras/src/chaticon.c
   qrc/trunk/gaym-extras/src/chatsort.c
   qrc/trunk/gaym-extras/src/gaym-extras.c
   qrc/trunk/gaym-extras/src/gaym-extras.h
   qrc/trunk/gaym-extras/src/roombrowse.c
   qrc/trunk/gaym/src/gaym.c
   qrc/trunk/gaym/src/gaym.h
   qrc/trunk/gaym/src/gayminfo.c
   qrc/trunk/gaym/src/gayminfo.h
   qrc/trunk/gaym/src/msgs.c
Log:
*Further updates and bugfixes
*Roombrowser will update thumbnails on demand now.
*Popup thumbnails are probably mostly broken now, but will be fixed soon.
*No more HTTP GET storms on channel joins.


msgs.c:
    *Stop loading of every single thumbnail on channel entrance.
    *Done by adding a gboolean parameter to gaym_buddy_status to indicate whether or not to fetch thumbnail.

gayminfo.c:
    *Bugfix: emits correct signal for info updates now
    *Check in channel member table for buddies too, before deciding to fetch

gayminfo.h:
    *Add gboolean fetch_thumbnail parameter to dec.

gaym.c:
    *Add get-info-quietly signal
    *Add handler for the signal gaym_get_info_quietly
    *Like get info, without the popup.

roombrowse.c:
    *Implement handler for info-updated callback
    *based on changed signal of gtk_tree_selection
    *If a user has no thumbnail, show gaym icon
    *Make prefix and sync columns only show up in debug

gaym-extras.c/h:
    *Move DATADIR define to header instead of .c file
    


Modified: qrc/trunk/gaym/src/gaym.c
===================================================================
--- qrc/trunk/gaym/src/gaym.c	2005-08-02 06:47:23 UTC (rev 269)
+++ qrc/trunk/gaym/src/gaym.c	2005-08-03 07:24:01 UTC (rev 270)
@@ -235,9 +235,11 @@
         return NULL;
     }
 
-    struct gaym_buddy *ib =
-        g_hash_table_lookup(gaym->channel_members,
-                            gaim_normalize(gaym->account, buddy->name));
+    struct gaym_buddy *ib = g_hash_table_lookup(gaym->channel_members,
+                                                gaim_normalize(gaym->
+                                                               account,
+                                                               buddy->
+                                                               name));
     if (!ib)
         ib = g_hash_table_lookup(gaym->buddies,
                                  gaim_normalize(gaym->account,
@@ -768,6 +770,15 @@
     return 1;
 }
 
+static void gaym_get_info_quietly(GaimConnection * gc, const char *who)
+{
+    gaim_debug_misc("gaym", "request info quietly\n");
+    struct gaym_conn *gaym = gc->proto_data;
+    const char *args[1];
+    args[0] = who;
+
+    gaym_cmd_whois(gaym, "whois", NULL, args);
+}
 static void gaym_get_info(GaimConnection * gc, const char *who)
 {
     struct gaym_conn *gaym = gc->proto_data;
@@ -1672,12 +1683,24 @@
                                         GAIM_SUBTYPE_ACCOUNT),
                          gaim_value_new(GAIM_TYPE_POINTER,
                                         GAIM_TYPE_CHAR));
+    gaim_signal_register(gaim_accounts_get_handle(),
+                         "request-info-quietly",
+                         gaim_marshal_VOID__POINTER_POINTER, NULL, 2,
+                         gaim_value_new(GAIM_TYPE_SUBTYPE,
+                                        GAIM_SUBTYPE_ACCOUNT),
+                         gaim_value_new(GAIM_TYPE_POINTER,
+                                        GAIM_TYPE_CHAR));
+
     gaim_signal_connect(gaim_accounts_get_handle(), "request-namelist",
                         plugin, GAIM_CALLBACK(gaym_get_room_namelist),
                         NULL);
+    gaim_signal_connect(gaim_accounts_get_handle(), "request-info-quietly",
+                        plugin, GAIM_CALLBACK(gaym_get_info_quietly),
+                        NULL);
 
 
 
+
     gaim_prefs_add_none("/plugins/prpl/gaym");
     gaim_prefs_add_int("/plugins/prpl/gaym/chat_room_instances", 4);
     gaim_prefs_add_bool("/plugins/prpl/gaym/show_join", TRUE);

Modified: qrc/trunk/gaym/src/gaym.h
===================================================================
--- qrc/trunk/gaym/src/gaym.h	2005-08-02 06:47:23 UTC (rev 269)
+++ qrc/trunk/gaym/src/gaym.h	2005-08-03 07:24:01 UTC (rev 270)
@@ -245,7 +245,8 @@
     GSList *members;            // List of GaymBuddies;
     int num_rooms;
     GSList *current;            // Pointer to gaymbuddy to be updated next 
-                                // (during names pass)
+                                // 
+    // (during names pass)
 } GaymNamelist;
 void gaym_dccsend_send_file(GaimConnection * gc, const char *who,
                             const char *file);

Modified: qrc/trunk/gaym/src/gayminfo.c
===================================================================
--- qrc/trunk/gaym/src/gayminfo.c	2005-08-02 06:47:23 UTC (rev 269)
+++ qrc/trunk/gaym/src/gayminfo.c	2005-08-03 07:24:01 UTC (rev 270)
@@ -167,7 +167,7 @@
     }
     if (GAIM_CONNECTION_IS_VALID(d->gc) && len) {
         gaim_signal_emit(gaim_accounts_get_handle(), "info-updated",
-                         d->gc, NULL, d->who);
+                         d->gc, d->who);
         if (gaim_find_conversation_with_account(d->who, d->gc->account)) {
             // gaim_buddy_icons_set_for_user(gaim_connection_get_account
             // (d->gc), d->who,
@@ -183,7 +183,8 @@
 }
 
 void gaym_buddy_status(struct gaym_conn *gaym, char *name,
-                       gboolean online, char *info)
+                       gboolean online, char *info,
+                       gboolean fetch_thumbnail)
 {
     char *bio = NULL;
     char *thumbnail = NULL;
@@ -225,10 +226,12 @@
     }
 
     struct gaym_buddy *ib = g_hash_table_lookup(gaym->buddies, name);
+    if (!ib)
+        ib = g_hash_table_lookup(gaym->channel_members, name);
 
     char *normalized = g_strdup(gaim_normalize(gaym->account, name));
 
-    if (thumbnail) {
+    if (thumbnail && fetch_thumbnail) {
         gboolean do_fetch = 1;
         GError *err = NULL;
         if (!ib || gaim_utf8_strcasecmp(thumbnail, ib->thumbnail)) {
@@ -258,13 +261,6 @@
                 g_dir_close(gdir);
             }
             if (do_fetch) {
-
-                gaim_debug_misc("gaym",
-                                "********************************************\n");
-                gaim_debug_misc("gaym",
-                                "*****************FETCH**********************\n");
-                gaim_debug_misc("gaym",
-                                "********************************************\n");
                 char *hashurl = NULL;
                 hashurl =
                     g_hash_table_lookup(gaym->confighash,

Modified: qrc/trunk/gaym/src/gayminfo.h
===================================================================
--- qrc/trunk/gaym/src/gayminfo.h	2005-08-02 06:47:23 UTC (rev 269)
+++ qrc/trunk/gaym/src/gayminfo.h	2005-08-03 07:24:01 UTC (rev 270)
@@ -89,9 +89,11 @@
  * @param name The buddy name
  * @param online Is the buddy on line.
  * @param info The extra IRC info string about the buddy, if any.
+ * @param fetch_thumbnail Whether or not to trigger a url fetch of thumbnail photo.
  */
 void gaym_buddy_status(struct gaym_conn *gaym, char *name,
-                       gboolean online, char *info);
+                       gboolean online, char *info,
+                       gboolean fetch_thumbnail);
 
 
 void gaym_update_channel_member(struct gaym_conn *gaym, const char *nick,

Modified: qrc/trunk/gaym/src/msgs.c
===================================================================
--- qrc/trunk/gaym/src/msgs.c	2005-08-02 06:47:23 UTC (rev 269)
+++ qrc/trunk/gaym/src/msgs.c	2005-08-03 07:24:01 UTC (rev 270)
@@ -209,7 +209,7 @@
 
     gcom_nick_to_gaym(args[1]);
 
-    gaym_buddy_status(gaym, args[1], FALSE, NULL);
+    gaym_buddy_status(gaym, args[1], FALSE, NULL, FALSE);
 
     char *normalized = g_strdup(gaim_normalize(gaym->account, args[1]));
 
@@ -247,7 +247,7 @@
 
     gcom_nick_to_gaym(args[1]);
 
-    gaym_buddy_status(gaym, args[1], TRUE, args[5]);
+    gaym_buddy_status(gaym, args[1], TRUE, args[5], TRUE);
 
     char *normalized = g_strdup(gaim_normalize(gaym->account, args[1]));
 
@@ -257,6 +257,7 @@
     // during conversation-created.
     gaym_update_channel_member(gaym, normalized, args[5]);
     gaym_unreference_channel_member(gaym, normalized);
+    gaim_debug_misc("gaym", "signalling info update for %s\n", args[1]);
     gaim_signal_emit(gaim_accounts_get_handle(), "info-updated",
                      gaym->account, args[1]);
 
@@ -785,7 +786,7 @@
     gint *entry = g_hash_table_lookup(gaym->entry_order, args[0]);
     g_return_if_fail(entry != NULL);
 
-    gaym_buddy_status(gaym, nick, TRUE, args[1]);
+    gaym_buddy_status(gaym, nick, TRUE, args[1], TRUE);
 
 
     gboolean gaym_botfilter_permit =
@@ -1183,7 +1184,7 @@
     /* XXX this should have an API, I shouldn't grab this directly */
     g_slist_foreach(gc->buddy_chats, (GFunc) gaym_chat_remove_buddy, data);
 
-    gaym_buddy_status(gaym, data[0], FALSE, NULL);
+    gaym_buddy_status(gaym, data[0], FALSE, NULL, FALSE);
 
     g_free(data[0]);
 
@@ -1262,8 +1263,8 @@
         }
     }
 
-
     // Use the who msgs cross-referenced with the NAMES list to figure out 
+    // 
     // who is who. Resolve conflicts.
 
 }
@@ -1465,7 +1466,7 @@
         gaym_botfilter_check(gc, nick, bio, FALSE);
     g_free(bio);
 
-    gaym_buddy_status(gaym, nick, TRUE, extra);
+    gaym_buddy_status(gaym, nick, TRUE, extra, FALSE);
 
     if (convo == NULL) {
         gaim_debug(GAIM_DEBUG_ERROR, "gaym", "690 for %s failed\n",

Modified: qrc/trunk/gaym-extras/src/chaticon.c
===================================================================
--- qrc/trunk/gaym-extras/src/chaticon.c	2005-08-02 06:47:23 UTC (rev 269)
+++ qrc/trunk/gaym-extras/src/chaticon.c	2005-08-03 07:24:01 UTC (rev 270)
@@ -44,6 +44,7 @@
     // aspect=(double)gdk_pixbuf_get_width(pixbuf)/(double)gdk_pixbuf_get_height(pixbuf); 
     // 
     // 
+    // 
 
     scale =
         gdk_pixbuf_scale_simple(pixbuf,
@@ -194,10 +195,10 @@
         g_print("Row %d: (%s)(%s)\n", row_count, str_data, name);
 
         if (!strcmp(str_data, name)) {
-            GdkPixbuf *pixbuf =
-                lookup_cached_thumbnail(conv->account,
-                                        gaim_normalize(conv->account,
-                                                       name));
+            GdkPixbuf *pixbuf = lookup_cached_thumbnail(conv->account,
+                                                        gaim_normalize
+                                                        (conv->account,
+                                                         name));
             gaim_debug_misc("chaticon", "Got pixbuf: %x\n");
             GtkTreePath *path = gtk_tree_model_get_path(list_store, &iter);
             gtk_list_store_set(GTK_LIST_STORE(list_store), &iter, 0,

Modified: qrc/trunk/gaym-extras/src/chatsort.c
===================================================================
--- qrc/trunk/gaym-extras/src/chatsort.c	2005-08-02 06:47:23 UTC (rev 269)
+++ qrc/trunk/gaym-extras/src/chatsort.c	2005-08-03 07:24:01 UTC (rev 270)
@@ -112,6 +112,7 @@
     button = GTK_WIDGET(gaim_gtkconv_button_new(order[current].icon, NULL,      // _("E"), 
                                                                                 // 
                                                 // 
+                                                // 
                                                 order[current].tooltip,
                                                 gtkconv->tooltips,
                                                 change_sort_order,

Modified: qrc/trunk/gaym-extras/src/gaym-extras.c
===================================================================
--- qrc/trunk/gaym-extras/src/gaym-extras.c	2005-08-02 06:47:23 UTC (rev 269)
+++ qrc/trunk/gaym-extras/src/gaym-extras.c	2005-08-03 07:24:01 UTC (rev 270)
@@ -1,12 +1,7 @@
-/* Show icons in chat room windows */
 
-// Messy.
 #include "gaym-extras.h"
-#ifdef _WIN32
-#include "win32/win32dep.h"
-#else
-#define DATADIR GAIM_DATADIR
-#endif
+/* Show icons in chat room windows */
+
 void get_icon_scale_size(GdkPixbuf * icon, GaimBuddyIconSpec * spec,
                          int *width, int *height)
 {

Modified: qrc/trunk/gaym-extras/src/gaym-extras.h
===================================================================
--- qrc/trunk/gaym-extras/src/gaym-extras.h	2005-08-02 06:47:23 UTC (rev 269)
+++ qrc/trunk/gaym-extras/src/gaym-extras.h	2005-08-03 07:24:01 UTC (rev 270)
@@ -22,6 +22,12 @@
 #define GAYM_STOCK_ENTRY "entry"
 #define GAYM_STOCK_PIC "pic"
 
+// Messy.
+#ifdef _WIN32
+#include "win32/win32dep.h"
+#else
+#define DATADIR GAIM_DATADIR
+#endif
 
 struct fetch_thumbnail_data {
     const char *who;

Modified: qrc/trunk/gaym-extras/src/roombrowse.c
===================================================================
--- qrc/trunk/gaym-extras/src/roombrowse.c	2005-08-02 06:47:23 UTC (rev 269)
+++ qrc/trunk/gaym-extras/src/roombrowse.c	2005-08-03 07:24:01 UTC (rev 270)
@@ -59,6 +59,80 @@
     GaimConnection *gc;
 } RoomBrowseGui;
 
+
+void update_photos(const char *room, const RoomBrowseGui * browser,
+                   const char *name)
+{
+
+    GaimPlugin *prpl = NULL;
+    GaimPluginProtocolInfo *prpl_info = NULL;
+    prpl =
+        gaim_find_prpl(gaim_account_get_protocol_id(browser->gc->account));
+    if (prpl)
+        prpl_info = GAIM_PLUGIN_PROTOCOL_INFO(prpl);
+
+    int scale_width = 0, scale_height = 0;
+    gboolean valid;
+    GtkTreeIter iter;
+    int row_count = 0;
+    GtkTreeModel *list_store =
+        gtk_tree_view_get_model(GTK_TREE_VIEW(browser->list));
+    /* Get the first iter in the list */
+    valid = gtk_tree_model_get_iter_first(list_store, &iter);
+
+    while (valid) {
+        /* Walk through the list, reading each row */
+        gchar *str_data;
+
+        /* Make sure you terminate calls to gtk_tree_model_get() with a
+           '-1' value */
+        gtk_tree_model_get(list_store, &iter, COLUMN_NAME, &str_data, -1);
+
+
+        if (!strcmp(str_data, name)) {
+            gaim_debug_misc("roombrowse", "Update user %s in %s\n", name,
+                            room);
+            GdkPixbuf *pixbuf =
+                lookup_cached_thumbnail(browser->gc->account,
+                                        gaim_normalize(browser->gc->
+                                                       account,
+                                                       name));
+            gaim_debug_misc("chaticon", "Got pixbuf: %x\n", pixbuf);
+            get_icon_scale_size(pixbuf,
+                                prpl_info ? &prpl_info->icon_spec : NULL,
+                                &scale_width, &scale_height);
+
+            GdkPixbuf *scale = gdk_pixbuf_scale_simple(pixbuf,
+                                                       scale_width,
+                                                       scale_height,
+                                                       GDK_INTERP_BILINEAR);
+
+            GtkTreePath *path = gtk_tree_model_get_path(list_store, &iter);
+            gtk_list_store_set(GTK_LIST_STORE(list_store), &iter,
+                               COLUMN_PHOTO, scale, -1);
+
+            gtk_tree_model_row_changed(list_store, path, &iter);
+            // g_free(pixbuf);
+            break;
+        }
+        row_count++;
+        valid = gtk_tree_model_iter_next(list_store, &iter);
+        g_free(str_data);
+    }
+
+
+}
+
+void roombrowse_update_list_row(GaimConnection * gc, const char *who)
+{
+
+    gaim_debug_misc("roombrowse",
+                    "in callback for info-updated signal, with who=%s\n",
+                    who);
+    g_hash_table_foreach(browsers, (GHFunc) update_photos, (char *) who);
+
+}
+
 void roombrowse_add_info(gpointer data, RoomBrowseGui * browser)
 {
     /* Add a new row to the model */
@@ -83,33 +157,54 @@
     g_string_erase(info, 0, 1);
     char *infoc = g_string_free(info, FALSE);
     gtk_list_store_append(GTK_LIST_STORE(browser->model), &browser->iter);
+    GdkPixbuf *pixbuf = NULL;
     if (member->thumbnail) {
 
-        GdkPixbuf *pixbuf = lookup_cached_thumbnail(browser->gc->account,
-                                                    gaim_normalize
-                                                    (browser->gc->account,
-                                                     member->name));
+        pixbuf = lookup_cached_thumbnail(browser->gc->account,
+                                         gaim_normalize
+                                         (browser->gc->account,
+                                          member->name));
 
         if (browser->gc)
             prpl_info = GAIM_PLUGIN_PROTOCOL_INFO(browser->gc->prpl);
-        get_icon_scale_size(pixbuf,
-                            prpl_info ? &prpl_info->icon_spec : NULL,
-                            &scale_width, &scale_height);
 
-        GdkPixbuf *scale = gdk_pixbuf_scale_simple(pixbuf,
-                                                   scale_width,
-                                                   scale_height,
-                                                   GDK_INTERP_BILINEAR);
-        g_object_unref(pixbuf);
-        gtk_list_store_set(GTK_LIST_STORE(browser->model), &browser->iter,
-                           COLUMN_PHOTO, scale, -1);
 
+    } else {
+        GaimPlugin *prpl = NULL;
+        GaimPluginProtocolInfo *prpl_info = NULL;
+        prpl =
+            gaim_find_prpl(gaim_account_get_protocol_id
+                           (browser->gc->account));
+        if (prpl)
+            prpl_info = GAIM_PLUGIN_PROTOCOL_INFO(prpl);
+        if (prpl_info && prpl_info->list_icon) {
+            const char *protoname =
+                prpl_info->list_icon(browser->gc->account, NULL);
+
+            char *image = g_strdup_printf("%s.png", protoname);
+            char *filename =
+                g_build_filename(DATADIR, "pixmaps", "gaim", "status",
+                                 "default", image, NULL);
+
+            pixbuf = gdk_pixbuf_new_from_file(filename, NULL);
+        }
     }
+    get_icon_scale_size(pixbuf,
+                        prpl_info ? &prpl_info->icon_spec : NULL,
+                        &scale_width, &scale_height);
+
+    GdkPixbuf *scale = gdk_pixbuf_scale_simple(pixbuf,
+                                               scale_width,
+                                               scale_height,
+                                               GDK_INTERP_BILINEAR);
+    g_object_unref(pixbuf);
+
     gtk_list_store_set(GTK_LIST_STORE(browser->model), &browser->iter,
-                       COLUMN_SYNC, sync,
-                       COLUMN_NAME, member->name,
-                       COLUMN_PREFIX, member->prefix,
-                       COLUMN_INFO, infoc, -1);
+                       COLUMN_PHOTO, scale,
+#if DEBUG
+                       COLUMN_SYNC, sync, COLUMN_PREFIX, member->prefix,
+#endif
+                       COLUMN_NAME, member->name, COLUMN_INFO, infoc, -1);
 
 
 }
@@ -133,7 +228,7 @@
 
 }
 
-gboolean update_list(GtkWidget * button, gpointer data)
+static gboolean update_list(GtkWidget * button, gpointer data)
 {
 
     gaim_debug_misc("roombrowse", "Doing list update!\n");
@@ -268,7 +363,29 @@
 
     return TRUE;
 }
+static void changed_cb(GtkTreeSelection * selection, gpointer gc)
+{
 
+    g_return_if_fail(selection != NULL);
+
+    gaim_debug_misc("roombrowse", "Changed_cb\n");
+    GtkTreeIter iter;
+    GtkTreeModel *model = NULL;
+    gchar *name;
+    if (!gtk_tree_selection_get_selected(selection, &model, &iter))
+        return;
+
+    gtk_tree_model_get(model, &iter, COLUMN_NAME, &name, -1);
+
+    gaim_debug_misc("roombrowse",
+                    "emit request-info-quietly signal for %s\n", name);
+    gaim_signal_emit(gaim_accounts_get_handle(), "request-info-quietly",
+                     gc, name);
+
+    return;
+
+}
+
 // Right out of gtkconv.c
 static gint
 click_cb(GtkWidget * widget, GdkEventButton * event,
@@ -312,7 +429,6 @@
         gtk_menu_popup(GTK_MENU(menu), NULL, NULL, NULL, NULL,
                        event->button, event->time);
     }
-
     g_free(who);
     gtk_tree_path_free(path);
 
@@ -373,21 +489,14 @@
                                                  COLUMN_PHOTO, NULL);
     gtk_tree_view_append_column(GTK_TREE_VIEW(browser->list), col);
 
-    rend = gtk_cell_renderer_text_new();
-    gtk_cell_renderer_set_fixed_size(rend, -1, 80);
-    col =
-        gtk_tree_view_column_new_with_attributes("?", rend, "text",
-                                                 COLUMN_SYNC, NULL);
-    gtk_tree_view_append_column(GTK_TREE_VIEW(browser->list), col);
 
-
     rend = gtk_cell_renderer_text_new();
     gtk_cell_renderer_set_fixed_size(rend, -1, 80);
     col =
         gtk_tree_view_column_new_with_attributes("Name", rend, "text",
                                                  COLUMN_NAME, NULL);
     gtk_tree_view_append_column(GTK_TREE_VIEW(browser->list), col);
-
+#if DEBUG
     rend = gtk_cell_renderer_text_new();
     gtk_cell_renderer_set_fixed_size(rend, -1, 80);
     col =
@@ -395,6 +504,13 @@
                                                  COLUMN_PREFIX, NULL);
     gtk_tree_view_append_column(GTK_TREE_VIEW(browser->list), col);
 
+    rend = gtk_cell_renderer_text_new();
+    gtk_cell_renderer_set_fixed_size(rend, -1, 80);
+    col =
+        gtk_tree_view_column_new_with_attributes("?", rend, "text",
+                                                 COLUMN_SYNC, NULL);
+    gtk_tree_view_append_column(GTK_TREE_VIEW(browser->list), col);
+#endif
 
     rend = gtk_cell_renderer_text_new();
     gtk_cell_renderer_set_fixed_size(rend, -1, 80);
@@ -408,7 +524,13 @@
     g_signal_connect(G_OBJECT(browser->list), "popup-menu",
                      G_CALLBACK(chat_popup_menu_cb), browser);
 
+    GtkTreeSelection *select =
+        gtk_tree_view_get_selection(GTK_TREE_VIEW(browser->list));
 
+    gtk_tree_selection_set_mode(select, GTK_SELECTION_SINGLE);
+
+    g_signal_connect(G_OBJECT(select), "changed",
+                     G_CALLBACK(changed_cb), gc);
     gtk_container_add(GTK_CONTAINER(sw), browser->list);
     gtk_widget_show(browser->list);
 
@@ -470,6 +592,11 @@
                         plugin, GAIM_CALLBACK(roombrowse_update_list),
                         NULL);
 
+    gaim_signal_connect(gaim_accounts_get_handle(),
+                        "info-updated",
+                        plugin, GAIM_CALLBACK(roombrowse_update_list_row),
+                        NULL);
+
     browsers =
         g_hash_table_new_full(g_str_hash, g_str_equal, g_free, NULL);
 



From jblebrun at berlios.de  Wed Aug  3 16:27:22 2005
From: jblebrun at berlios.de (Jason LeBrun at BerliOS)
Date: Wed, 3 Aug 2005 16:27:22 +0200
Subject: [Qrc-svn] r271 - qrc/trunk/gaym/src
Message-ID: <200508031427.j73ERMRg006731@sheep.berlios.de>

Author: jblebrun
Date: 2005-08-03 16:27:20 +0200 (Wed, 03 Aug 2005)
New Revision: 271

Modified:
   qrc/trunk/gaym/src/gaym.c
Log:
A gaym signal handler was being triggered by other prpls
Fixed.



Modified: qrc/trunk/gaym/src/gaym.c
===================================================================
--- qrc/trunk/gaym/src/gaym.c	2005-08-03 07:24:01 UTC (rev 270)
+++ qrc/trunk/gaym/src/gaym.c	2005-08-03 14:27:20 UTC (rev 271)
@@ -1434,9 +1434,11 @@
 }
 static void gaym_clean_channel_members(GaimConversation * conv)
 {
+    if(strncmp(conv->account->protocol_id, "prpl-gaym", 9))
+        return;
 
     g_return_if_fail(conv != NULL);
-
+    
     if (conv->type == GAIM_CONV_CHAT) {
         GaimConvChat *chat = gaim_conversation_get_chat_data(conv);
         GaimConnection *gc = gaim_conversation_get_gc(conv);



From jblebrun at berlios.de  Thu Aug  4 07:20:03 2005
From: jblebrun at berlios.de (Jason LeBrun at BerliOS)
Date: Thu, 4 Aug 2005 07:20:03 +0200
Subject: [Qrc-svn] r272 - in qrc/trunk: gaym/src gaym-extras/src
Message-ID: <200508040520.j745K3Gb020962@sheep.berlios.de>

Author: jblebrun
Date: 2005-08-04 07:19:15 +0200 (Thu, 04 Aug 2005)
New Revision: 272

Modified:
   qrc/trunk/gaym-extras/src/bio-popups.c
   qrc/trunk/gaym-extras/src/chaticon.c
   qrc/trunk/gaym-extras/src/gaym-extras.c
   qrc/trunk/gaym-extras/src/gaym-extras.h
   qrc/trunk/gaym-extras/src/roombrowse.c
   qrc/trunk/gaym/src/gayminfo.c
   qrc/trunk/gaym/src/msgs.c
Log:
Send in those crash reports!


Some minor fixes:

gayminfo.c:
    *pvt/IM windows no longer use the buddy_icon system, but our own.

roombrowse.c:
    *Remove some extraneous debug msgs
    *Add markup to info
    *destroy roombrowser data with window close
    *Roombrowser click triggers info fetch 
    *roombrowser responds to info update

chaticon.c:
    *Handles icons in conversation windows now, too.
	Why?? Because otherwise you will have two copies of icons.
	If I can get EVERYTHING working with the buddy icon system,
	I will go back to that.

*bio-popups.c:
    *Just moved the icon cache lookup function to gaym-extras.c



Known bugs:
*Plugin will not behave nicely if you load or unload it after conversations have been started. Just don't, for now, k?

*Disconnects will produce odd icon behavior on reconnect.

*The tooltip name sometimes ends up in all lowercase. I'm sure it's a rogue gaim_normalize call.

*Away messages are truncated.

*Some code re-factoring would be nice.

*Rapidly updating lots of roombrowsers makes baby Jesus cry.









Modified: qrc/trunk/gaym/src/gayminfo.c
===================================================================
--- qrc/trunk/gaym/src/gayminfo.c	2005-08-03 14:27:20 UTC (rev 271)
+++ qrc/trunk/gaym/src/gayminfo.c	2005-08-04 05:19:15 UTC (rev 272)
@@ -167,12 +167,14 @@
     }
     if (GAIM_CONNECTION_IS_VALID(d->gc) && len) {
         gaim_signal_emit(gaim_accounts_get_handle(), "info-updated",
-                         d->gc, d->who);
-        if (gaim_find_conversation_with_account(d->who, d->gc->account)) {
-            // gaim_buddy_icons_set_for_user(gaim_connection_get_account
-            // (d->gc), d->who,
-            // (void *) pic_data, len);
-        }
+                         d->gc->account, d->who);
+      /*  if (gaim_find_conversation_with_account(d->who, d->gc->account)) {
+	    
+	    gaim_debug_misc("fetch_thumbnail_cb","setting buddy icon\n");
+            gaim_buddy_icons_set_for_user(gaim_connection_get_account
+             (d->gc), d->who,
+             (void *) pic_data, len);
+        }*/
 
     } else {
         gaim_debug_error("gaym", "Fetching buddy icon failed.\n");

Modified: qrc/trunk/gaym/src/msgs.c
===================================================================
--- qrc/trunk/gaym/src/msgs.c	2005-08-03 14:27:20 UTC (rev 271)
+++ qrc/trunk/gaym/src/msgs.c	2005-08-04 05:19:15 UTC (rev 272)
@@ -213,8 +213,9 @@
 
     char *normalized = g_strdup(gaim_normalize(gaym->account, args[1]));
 
-    if (g_hash_table_lookup(gaym->info_window_needed, normalized)) {
-        g_hash_table_remove(gaym->info_window_needed, normalized);
+    if (g_hash_table_lookup(gaym->info_window_needed, normalized)) 
+    {
+	g_hash_table_remove(gaym->info_window_needed, normalized);
 
         char *hashurl =
             g_hash_table_lookup(gaym->confighash, "view-profile-url");

Modified: qrc/trunk/gaym-extras/src/bio-popups.c
===================================================================
--- qrc/trunk/gaym-extras/src/bio-popups.c	2005-08-03 14:27:20 UTC (rev 271)
+++ qrc/trunk/gaym-extras/src/bio-popups.c	2005-08-04 05:19:15 UTC (rev 272)
@@ -1,13 +1,19 @@
 #include "gaym-extras.h"
 // Consider combining into one popup hash...
-GHashTable *popup_rects;
-GHashTable *popup_timeouts;
-GHashTable *popups;
+// All three indexed by a widget (treeview, or tab_label)
+GHashTable *popup_rects; /* */
+GHashTable *popup_timeouts; /* contains *int */ 
+GHashTable *popups; /* contains *GtkWidget for popup window*/
+
+
+/*Called when a conversation is closed
+ * or on plugin unload*/
 void clean_popup_stuff(GaimConversation * c)
 {
 
     if (!g_strrstr(gaim_account_get_protocol_id(c->account), "prpl-gaym"))
         return;
+    
     GaimGtkConversation *gtkconv = GAIM_GTK_CONVERSATION(c);
     if (c->type == GAIM_CONV_IM) {
         g_hash_table_remove(popup_timeouts, gtkconv->tab_label);
@@ -25,6 +31,9 @@
                               gpointer n)
 {
     // This prevent clicks from demloishing popups.
+    // However, right clicks *should* demolish the tooltip
+    // Otherwise, it crashes.
+    // I dunno why.
     if (e->mode != GDK_CROSSING_NORMAL && (e->state & GDK_BUTTON1_MASK))
         return;
 
@@ -80,36 +89,6 @@
     return;
 }
 
-GdkPixbuf *lookup_cached_thumbnail(GaimAccount * account,
-                                   const char *fullname)
-{
-    GDir *gdir = NULL;
-    GError *err = NULL;
-    GdkPixbuf *pixbuf = NULL;
-    const char *filename = NULL;
-    char *dirname = NULL;
-    char *path = NULL;
-    const char *name = gaim_normalize(account, fullname);
-    dirname =
-        g_build_filename(gaim_user_dir(), "icons", "gaym", name, NULL);
-    if (dirname) {
-        gdir = g_dir_open(dirname, 0, &err);
-        if (gdir) {
-            filename = g_dir_read_name(gdir);   // don't free filename:
-            // owned by glib.
-            if (filename) {
-                path = g_build_filename(dirname, filename, NULL);
-                if (path)
-                    pixbuf = gdk_pixbuf_new_from_file(path, &err);
-                g_free(path);
-            }
-            g_dir_close(gdir);
-        }
-        g_free(dirname);
-    }
-    return pixbuf;
-}
-
 static gboolean tooltip_timeout(struct timeout_cb_data *data)
 {
     const gchar *name;

Modified: qrc/trunk/gaym-extras/src/chaticon.c
===================================================================
--- qrc/trunk/gaym-extras/src/chaticon.c	2005-08-03 14:27:20 UTC (rev 271)
+++ qrc/trunk/gaym-extras/src/chaticon.c	2005-08-04 05:19:15 UTC (rev 272)
@@ -168,12 +168,110 @@
 
 
 }
+void im_set_icon(GaimAccount* account, const char* name) {
 
+    gaim_debug_misc("chaticon","im_set_icon %x %x\n",account,name);
+    GaimPluginProtocolInfo *prpl_info = NULL;
+    GtkRequisition requisition;
+    
+    GdkPixmap *pm=NULL;
+    GdkBitmap *bm=NULL;
+
+
+
+    int scale_width, scale_height;
+    GaimConversation* conv=gaim_find_conversation_with_account(name,account);
+    if(!conv)
+	return;
+
+    gaim_debug_misc("chaticons","attempting to set icon for %s\n",name);
+    GaimGtkWindow *gtkwin = GAIM_GTK_WINDOW(gaim_conversation_get_window(conv));
+    GaimGtkConversation *gtkconv= GAIM_GTK_CONVERSATION(conv);
+
+    /* Remove the current icon stuff */
+	if (gtkconv->u.im->icon_container != NULL)
+		gtk_widget_destroy(gtkconv->u.im->icon_container);
+	gtkconv->u.im->icon_container = NULL;
+	if (gtkconv->u.im->anim != NULL)
+		g_object_unref(G_OBJECT(gtkconv->u.im->anim));
+
+	gtkconv->u.im->anim = NULL;
+
+	if (gtkconv->u.im->icon_timer != 0)
+		g_source_remove(gtkconv->u.im->icon_timer);
+
+	gtkconv->u.im->icon_timer = 0;
+
+	if (gtkconv->u.im->iter != NULL)
+		g_object_unref(G_OBJECT(gtkconv->u.im->iter));
+
+	gtkconv->u.im->iter = NULL;
+
+	GdkPixbuf *buf=lookup_cached_thumbnail(account, name);
+
+	gaim_debug_misc("chaticon","found cached thumbnail %x\n",buf);	
+	get_icon_scale_size(buf, prpl_info ? &prpl_info->icon_spec :
+			NULL, &scale_width, &scale_height);
+	GdkPixbuf* scale = gdk_pixbuf_scale_simple(buf, scale_width, scale_height,
+				GDK_INTERP_HYPER);
+
+	gdk_pixbuf_render_pixmap_and_mask(scale, &pm, &bm, 100);
+	g_object_unref(G_OBJECT(scale));
+
+
+	gtkconv->u.im->icon_container = gtk_vbox_new(FALSE, 0);
+
+	GtkWidget* frame = gtk_frame_new(NULL);
+	gtk_frame_set_shadow_type(GTK_FRAME(frame),
+							  (bm ? GTK_SHADOW_NONE : GTK_SHADOW_IN));
+	gtk_box_pack_start(GTK_BOX(gtkconv->u.im->icon_container), frame,
+					   FALSE, FALSE, 0);
+
+	GtkWidget* event = gtk_event_box_new();
+	gtk_container_add(GTK_CONTAINER(frame), event);
+	//g_signal_connect(G_OBJECT(event), "button-press-event",
+					 //G_CALLBACK(icon_menu), conv);
+	gtk_widget_show(event);
+
+	gtkconv->u.im->icon = gtk_image_new_from_pixmap(pm, bm);
+	gtk_widget_set_size_request(gtkconv->u.im->icon, scale_width, scale_height);
+	gtk_container_add(GTK_CONTAINER(event), gtkconv->u.im->icon);
+	gtk_widget_show(gtkconv->u.im->icon);
+
+	g_object_unref(G_OBJECT(pm));
+
+	if (bm)
+		g_object_unref(G_OBJECT(bm));
+
+	GaimButtonStyle button_type = gaim_prefs_get_int("/gaim/gtk/conversations/button_type");
+	/* the button seems to get its size before the box, so... */
+	gtk_widget_size_request(gtkconv->send, &requisition);
+	if (button_type == GAIM_BUTTON_NONE || requisition.height * 1.5 < scale_height) {
+		gtk_box_pack_start(GTK_BOX(gtkconv->lower_hbox),
+						   gtkconv->u.im->icon_container, FALSE, FALSE, 0);
+/*		gtk_box_reorder_child(GTK_BOX(gtkconv->lower_hbox), vbox, 0); */
+	} else {
+		gtk_box_pack_start(GTK_BOX(gtkconv->bbox),
+						   gtkconv->u.im->icon_container, FALSE, FALSE, 0);
+		gtk_box_reorder_child(GTK_BOX(gtkconv->bbox),
+							  gtkconv->u.im->icon_container, 0);
+	}
+
+	gtk_widget_show(gtkconv->u.im->icon_container);
+	gtk_widget_show(frame);
+
+	/* The buddy icon code needs badly to be fixed. */
+	buf = gdk_pixbuf_animation_get_static_image(gtkconv->u.im->anim);
+	if(conv == gaim_conv_window_get_active_conversation(gaim_conversation_get_window(conv)))
+		gtk_window_set_icon(GTK_WINDOW(gtkwin->window), buf);
+	
+}
 void chaticon_replace(GaimConversation * conv, const char *name,
                       GaimConvChatBuddyFlags flags)
 {
     GaimGtkConversation *gtkconv = GAIM_GTK_CONVERSATION(conv);
     GaimGtkChatPane *gtkchat = gtkconv->u.chat;
+
     gboolean valid;
     GtkTreeIter iter;
     int row_count = 0;
@@ -217,9 +315,9 @@
 void init_chat_icons(GaimPlugin * plugin)
 {
 
-    // gaim_signal_connect(gaim_conversations_get_handle(),
-    // "chat-buddy-joined",
-    // plugin, GAIM_CALLBACK(chaticon_replace), NULL);
+    gaim_signal_connect(gaim_accounts_get_handle(),
+     "info-updated",
+     plugin, GAIM_CALLBACK(im_set_icon), NULL);
 
     icons = g_hash_table_new(g_direct_hash, g_direct_equal);
 }

Modified: qrc/trunk/gaym-extras/src/gaym-extras.c
===================================================================
--- qrc/trunk/gaym-extras/src/gaym-extras.c	2005-08-03 14:27:20 UTC (rev 271)
+++ qrc/trunk/gaym-extras/src/gaym-extras.c	2005-08-04 05:19:15 UTC (rev 272)
@@ -126,6 +126,49 @@
 
 
 }
+
+GdkPixbuf *lookup_cached_thumbnail(GaimAccount * account,
+                                   const char *fullname)
+{
+    GDir *gdir = NULL;
+    GError *err = NULL;
+    GdkPixbuf *pixbuf = NULL;
+    const char *filename = NULL;
+    char *dirname = NULL;
+    char *path = NULL;
+    const char *name = gaim_normalize(account, fullname);
+    dirname =
+        g_build_filename(gaim_user_dir(), "icons", "gaym", name, NULL);
+    if (dirname) {
+        gdir = g_dir_open(dirname, 0, &err);
+        if (gdir) {
+            filename = g_dir_read_name(gdir);   // don't free filename:
+            // owned by glib.
+            if (filename) {
+                path = g_build_filename(dirname, filename, NULL);
+                if (path)
+                    pixbuf = gdk_pixbuf_new_from_file(path, &err);
+                g_free(path);
+            }
+            g_dir_close(gdir);
+        }
+        g_free(dirname);
+    }
+    return pixbuf;
+}
+
+static gboolean plugin_unload(GaimPlugin * plugin) {
+
+    /* Ok, this is hell. I need to:
+     * Remove any icons from the IM windows.
+     * Disconnect signals
+     * Close and destroy roombrowsers/memory associated with
+     * Destroy all popups
+     * Remove chaticon buttons
+     */
+
+
+}
 static gboolean plugin_load(GaimPlugin * plugin)
 {
     init_chat_icons(plugin);
@@ -188,9 +231,9 @@
     "Jason LeBrun gaym at jasonlebrun.info",
     GAIM_WEBSITE,
     plugin_load,
+    plugin_unload,
     NULL,
     NULL,
-    NULL,
     &prefs_info,
     NULL
 };

Modified: qrc/trunk/gaym-extras/src/gaym-extras.h
===================================================================
--- qrc/trunk/gaym-extras/src/gaym-extras.h	2005-08-03 14:27:20 UTC (rev 271)
+++ qrc/trunk/gaym-extras/src/gaym-extras.h	2005-08-04 05:19:15 UTC (rev 272)
@@ -12,7 +12,7 @@
 
 #include "gtkconv.h"
 #include "gtkplugin.h"
-
+#include "gtkutils.h"
 #ifndef GAYM_EXTRAS_H
 #define GAYM_EXTRAS_H
 

Modified: qrc/trunk/gaym-extras/src/roombrowse.c
===================================================================
--- qrc/trunk/gaym-extras/src/roombrowse.c	2005-08-03 14:27:20 UTC (rev 271)
+++ qrc/trunk/gaym-extras/src/roombrowse.c	2005-08-04 05:19:15 UTC (rev 272)
@@ -90,14 +90,11 @@
 
 
         if (!strcmp(str_data, name)) {
-            gaim_debug_misc("roombrowse", "Update user %s in %s\n", name,
-                            room);
             GdkPixbuf *pixbuf =
                 lookup_cached_thumbnail(browser->gc->account,
                                         gaim_normalize(browser->gc->
                                                        account,
                                                        name));
-            gaim_debug_misc("chaticon", "Got pixbuf: %x\n", pixbuf);
             get_icon_scale_size(pixbuf,
                                 prpl_info ? &prpl_info->icon_spec : NULL,
                                 &scale_width, &scale_height);
@@ -126,9 +123,6 @@
 void roombrowse_update_list_row(GaimConnection * gc, const char *who)
 {
 
-    gaim_debug_misc("roombrowse",
-                    "in callback for info-updated signal, with who=%s\n",
-                    who);
     g_hash_table_foreach(browsers, (GHFunc) update_photos, (char *) who);
 
 }
@@ -147,16 +141,19 @@
          (MIN(strlen(member->name), strlen(member->prefix)) - 1))) {
         sync = "N";
     }
+    
     GString *info = g_string_new("");
     if (member->age)
-        g_string_append_printf(info, "\nAge: %s", member->age);
+        g_string_append_printf(info, "\n<b>Age:</b> %s", member->age);
     if (member->location)
-        g_string_append_printf(info, "\nLocation: %s", member->location);
+        g_string_append_printf(info, "\n<b>Location:</b> %s", member->location);
     if (member->bio)
-        g_string_append_printf(info, "\nInfo: %s", member->bio);
+        g_string_append_printf(info, "\n<b>Info</b>: %s", member->bio);
     g_string_erase(info, 0, 1);
     char *infoc = g_string_free(info, FALSE);
-    gtk_list_store_append(GTK_LIST_STORE(browser->model), &browser->iter);
+
+
+        gtk_list_store_append(GTK_LIST_STORE(browser->model), &browser->iter);
     GdkPixbuf *pixbuf = NULL;
     if (member->thumbnail) {
 
@@ -221,6 +218,8 @@
     if (!browser && namelist->roomname) {
         gaim_debug_misc("roombrowse", "No browser found for %s\n",
                         namelist->roomname);
+	return;
+
     }
     gtk_list_store_clear(GTK_LIST_STORE(browser->model));
     g_slist_foreach(namelist->members, (GFunc) roombrowse_add_info,
@@ -368,7 +367,6 @@
 
     g_return_if_fail(selection != NULL);
 
-    gaim_debug_misc("roombrowse", "Changed_cb\n");
     GtkTreeIter iter;
     GtkTreeModel *model = NULL;
     gchar *name;
@@ -377,8 +375,6 @@
 
     gtk_tree_model_get(model, &iter, COLUMN_NAME, &name, -1);
 
-    gaim_debug_misc("roombrowse",
-                    "emit request-info-quietly signal for %s\n", name);
     gaim_signal_emit(gaim_accounts_get_handle(), "request-info-quietly",
                      gc, name);
 
@@ -435,7 +431,12 @@
     return TRUE;
 }
 
-
+static gboolean browser_window_destroyed(GtkWidget* window, GdkEvent* event, gpointer name) {
+    gaim_debug_misc("roombrowser","remove browser entry for %s\n",name);
+    g_hash_table_remove(browsers, name);
+    g_free(name);
+    return FALSE;
+}
 static void roombrowse_menu_cb(GaimBlistNode * node, gpointer data)
 {
     RoomBrowseGui *browser = g_new0(RoomBrowseGui, 1);
@@ -453,7 +454,8 @@
     gaim_debug_misc("roombrowse", "chat name: %s\n", room);
     gaim_debug_misc("roombrowse", "channel name: %s\n", channel);
     gtk_window_set_title(GTK_WINDOW(browser->window), room);
-
+    
+    g_signal_connect(browser->window, "delete-event", G_CALLBACK(browser_window_destroyed), g_strdup(channel));
     GtkWidget *vbox = gtk_vbox_new(FALSE, 6);
     gtk_container_add(GTK_CONTAINER(browser->window), vbox);
     gtk_widget_show(vbox);
@@ -491,6 +493,7 @@
 
 
     rend = gtk_cell_renderer_text_new();
+    g_object_set(rend, "wrap-mode", PANGO_WRAP_WORD, "wrap-width", 20);
     gtk_cell_renderer_set_fixed_size(rend, -1, 80);
     col =
         gtk_tree_view_column_new_with_attributes("Name", rend, "text",
@@ -515,7 +518,7 @@
     rend = gtk_cell_renderer_text_new();
     gtk_cell_renderer_set_fixed_size(rend, -1, 80);
     col =
-        gtk_tree_view_column_new_with_attributes("Info", rend, "text",
+        gtk_tree_view_column_new_with_attributes("Info", rend, "markup",
                                                  COLUMN_INFO, NULL);
     gtk_tree_view_append_column(GTK_TREE_VIEW(browser->list), col);
 
@@ -564,10 +567,6 @@
 
     gaym = chat->account->gc->proto_data;
 
-    // char* room = g_strdup(g_hash_table_lookup(chat->components,
-    // "alias"));
-    gaim_debug_misc("roombrowse", "chat: %xRoom name: %s\n", chat,
-                    gaim_chat_get_name(chat));
 
     label =
         g_strdup_printf("Browse users in %s", gaim_chat_get_name(chat));
@@ -598,7 +597,7 @@
                         NULL);
 
     browsers =
-        g_hash_table_new_full(g_str_hash, g_str_equal, g_free, NULL);
+        g_hash_table_new_full(g_str_hash, g_str_equal, g_free, g_free);
 
     return;
 }



From jblebrun at berlios.de  Thu Aug 18 16:36:37 2005
From: jblebrun at berlios.de (Jason LeBrun at BerliOS)
Date: Thu, 18 Aug 2005 16:36:37 +0200
Subject: [Qrc-svn] r273 - in qrc/trunk: . gaym/src gaym-extras/src
Message-ID: <200508181436.j7IEabFj022813@sheep.berlios.de>

Author: jblebrun
Date: 2005-08-18 16:36:32 +0200 (Thu, 18 Aug 2005)
New Revision: 273

Modified:
   qrc/trunk/Makefile.am
   qrc/trunk/configure.ac
   qrc/trunk/gaym-extras/src/bio-popups.c
   qrc/trunk/gaym-extras/src/gaym-extras.c
   qrc/trunk/gaym-extras/src/gaym-extras.h
   qrc/trunk/gaym/src/gaym.c
   qrc/trunk/gaym/src/helpers.c
   qrc/trunk/gaym/src/msgs.c
Log:
helpers.c:
*Took the name out of the tooltiptext returned here

msgs.c:
*Added handling for mid-op notification window for info requests.

gaym.c:
*Added creation of a window letting user know that info is being fetched.

gaym-extras:
*Fixed display of popup so name is not normalized.

configure.ac:
*Build display plugin









Modified: qrc/trunk/Makefile.am
===================================================================
--- qrc/trunk/Makefile.am	2005-08-04 05:19:15 UTC (rev 272)
+++ qrc/trunk/Makefile.am	2005-08-18 14:36:32 UTC (rev 273)
@@ -19,4 +19,5 @@
 	$(MAYBE_BOT_CHALLENGER) \
 	$(MAYBE_CHATICON) \
 	$(MAYBE_GAYM) \
-	$(MAYBE_GAYM_EXTRAS)
+	$(MAYBE_GAYM_EXTRAS) \
+	display-options

Modified: qrc/trunk/configure.ac
===================================================================
--- qrc/trunk/configure.ac	2005-08-04 05:19:15 UTC (rev 272)
+++ qrc/trunk/configure.ac	2005-08-18 14:36:32 UTC (rev 273)
@@ -36,6 +36,10 @@
 # Build preferences
 
 
+AC_ARG_ENABLE([display-options],
+	[AS_HELP_STRING(--enable-display_options,build the bot-challenger plugin @<:@default=yes@:>@)],,
+	[enable_display_options="yes"])
+	
 AC_ARG_ENABLE([bot-challenger],
 	[AS_HELP_STRING(--enable-bot-challenger,build the bot-challenger plugin @<:@default=yes@:>@)],,
 	[enable_bot_challenger="yes"])
@@ -49,6 +53,7 @@
 	[enable_gaym_extras="yes"])
 
 AM_CONDITIONAL([COND_BOT_CHALLENGER], [test "$enable_bot_challenger" = "yes"])
+AM_CONDITIONAL([COND_DISPLAY_OPTIONS], [test "$enable_display_options" = "yes"])
 AM_CONDITIONAL([COND_GAYM], [test "$enable_gaym" = "yes"])
 AM_CONDITIONAL([COND_GAYM_EXTRAS], [test "$enable_gaym_extras" = "yes"])
 
@@ -56,6 +61,9 @@
 	enable_bot_challenger="no"
 fi
 
+if test "$enable_display_options" != "yes" ; then
+	enable_display_options="no"
+fi
 if test "$enable_gaym" != "yes" ; then
 	enable_gaym="no"
 fi
@@ -79,6 +87,14 @@
 		]
 	)
 fi
+if test "$enable_display_options" = "yes" ; then
+	PKG_CHECK_MODULES([GTK], [$REQUIRED_GTK],
+		[
+		AC_SUBST(GTK_CFLAGS)
+		AC_SUBST(GTK_LIBS)
+		]
+	)
+fi
 PKG_CHECK_MODULES([GAIM], [$REQUIRED_GAIM],
 	[
 	AC_SUBST(GAIM_CFLAGS)
@@ -124,6 +140,7 @@
 
 AC_CONFIG_FILES([Makefile
                  bot-challenger/Makefile
+		 display-options/Makefile
                  gaym/Makefile
                  gaym/pixmaps/Makefile
                  gaym/src/Makefile
@@ -138,6 +155,7 @@
 echo $PACKAGE $VERSION
 echo
 echo Build bot-challenger plugin...... : $enable_bot_challenger
+echo Build display_options plugin...... : $enable_display_options
 echo Build gaym plugin................ : $enable_gaym
 echo Build gaym-extras plugin......... : $enable_gaym_extras
 echo

Modified: qrc/trunk/gaym/src/gaym.c
===================================================================
--- qrc/trunk/gaym/src/gaym.c	2005-08-04 05:19:15 UTC (rev 272)
+++ qrc/trunk/gaym/src/gaym.c	2005-08-18 14:36:32 UTC (rev 273)
@@ -779,20 +779,38 @@
 
     gaym_cmd_whois(gaym, "whois", NULL, args);
 }
+
+struct get_info_data {
+    char* who;
+    struct gaym_conn* gaym;
+} get_info_data;
+
+static void cancel_get_info_cb(gpointer cb_data) {
+    
+    struct get_info_data* data=(struct get_info_data*)cb_data;
+    if(!data->who || !data->gaym)
+	return;
+    g_hash_table_remove(data->gaym->info_window_needed, data->who);
+
+}
 static void gaym_get_info(GaimConnection * gc, const char *who)
 {
     struct gaym_conn *gaym = gc->proto_data;
     const char *args[1];
+    char buf[100];
     args[0] = who;
 
     char *normalized = g_strdup(gaim_normalize(gc->account, who));
-    /**
-     * We are adding the same char* to both the key and the value.
-     * If this changes, we need to change the corresponding
-     * g_hash_table_new_full() so that things are properly cleaned
-     * up during the remove/destroy phase.
-     */
-    g_hash_table_insert(gaym->info_window_needed, normalized, normalized);
+   
+    struct get_info_data* data=g_new0(struct get_info_data,1);
+    data->who=normalized;
+    data->gaym=gaym;
+    snprintf(buf, 100, "Fetching info for %s...\n",who);
+    void* dialog =
+        gaim_request_action(gc, who,
+                            buf, NULL, 0, data, 1, ("Cancel"),
+                            cancel_get_info_cb);
+    g_hash_table_insert(gaym->info_window_needed, normalized, dialog);
     gaym_cmd_whois(gaym, "whois", NULL, args);
 }
 

Modified: qrc/trunk/gaym/src/helpers.c
===================================================================
--- qrc/trunk/gaym/src/helpers.c	2005-08-04 05:19:15 UTC (rev 272)
+++ qrc/trunk/gaym/src/helpers.c	2005-08-18 14:36:32 UTC (rev 273)
@@ -463,7 +463,7 @@
     char *escaped;
     GString *tooltip = g_string_new("");
 
-    g_string_printf(tooltip, "<b><i>%s</i></b>", ib->name);
+    //g_string_printf(tooltip, "<b><i>%s</i></b>", ib->name);
 
     g_return_val_if_fail(ib != NULL, NULL);
 
@@ -500,7 +500,7 @@
     if (tooltip->len == 0) {
         g_string_append_printf(tooltip, _(" No info."));
     }
-    // g_string_erase(tooltip, 0, 1);
+    //g_string_erase(tooltip, 0, 1);
 
     return g_string_free(tooltip, FALSE);
 }

Modified: qrc/trunk/gaym/src/msgs.c
===================================================================
--- qrc/trunk/gaym/src/msgs.c	2005-08-04 05:19:15 UTC (rev 272)
+++ qrc/trunk/gaym/src/msgs.c	2005-08-18 14:36:32 UTC (rev 273)
@@ -101,7 +101,13 @@
     char *hashurl =
         g_hash_table_lookup(gaym->confighash, "view-profile-url");
     g_return_if_fail(hashurl != NULL);
+    
+    void *dialog =
+	g_hash_table_lookup(gaym->info_window_needed, gaim_normalize(d->gc->account, d->who));
 
+    if(!dialog)
+	return;
+
     int id = gaim_imgstore_add(info_data, len, NULL);
     if (d->stats && d->bio)
         info =
@@ -124,6 +130,8 @@
             ("No Info Found<br><img id=%d><br><a href='%s%s'>Full Profile</a>",
              id, hashurl, d->who);
 
+    gaim_request_close(GAIM_REQUEST_ACTION, dialog);
+    g_hash_table_remove(gaym->info_window_needed, gaim_normalize(d->gc->account, d->who));
     gaim_notify_userinfo(d->gc, d->who,
                          t = g_strdup_printf("Gay.com - %s", d->who),
                          d->who, NULL, info, NULL, NULL);
@@ -155,6 +163,12 @@
     char *hashurl =
         g_hash_table_lookup(gaym->confighash, "view-profile-url");
     g_return_if_fail(hashurl != NULL);
+    
+    void *dialog =
+	g_hash_table_lookup(gaym->info_window_needed, gaim_normalize(d->gc->account, d->who));
+    
+    if(!dialog)
+	return;
 
     if (d->stats && d->bio)
         info =
@@ -179,6 +193,8 @@
 
     picpath = return_string_between(match, "\n", info_data);
     if (!picpath || strlen(picpath) == 0) {
+	gaim_request_close(GAIM_REQUEST_ACTION, dialog);
+	g_hash_table_remove(gaym->info_window_needed, gaim_normalize(d->gc->account, d->who));
         gaim_notify_userinfo(d->gc, d->who,
                              t = g_strdup_printf("Gay.com - %s", d->who),
                              d->who, NULL, info, NULL, NULL);
@@ -212,8 +228,9 @@
     gaym_buddy_status(gaym, args[1], FALSE, NULL, FALSE);
 
     char *normalized = g_strdup(gaim_normalize(gaym->account, args[1]));
-
-    if (g_hash_table_lookup(gaym->info_window_needed, normalized)) 
+    
+    void* dialog;
+    if ((dialog=g_hash_table_lookup(gaym->info_window_needed, normalized)))
     {
 	g_hash_table_remove(gaym->info_window_needed, normalized);
 
@@ -226,9 +243,11 @@
             g_strdup_printf
             ("That user is not logged on. Check <a href='%s%s'>here</a> to see if that user has a profile.",
              hashurl, args[1]);
-        gaim_notify_userinfo(gaim_account_get_connection(gaym->account),
+        gaim_request_close(GAIM_REQUEST_ACTION, dialog);
+	gaim_notify_userinfo(gaim_account_get_connection(gaym->account),
                              NULL, NULL, "No such user", NULL, buf, NULL,
                              NULL);
+	
     }
     g_free(normalized);
 }
@@ -269,7 +288,6 @@
         data->who = g_strdup(args[1]);
         data->bio = gaym_bio_strdup(args[5]);
         data->stats = gaym_stats_strdup(args[5]);
-        g_hash_table_remove(gaym->info_window_needed, normalized);
         char *hashurl = g_hash_table_lookup(gaym->confighash,
                                             "ohm.profile-url");
         g_return_if_fail(hashurl != NULL);
@@ -282,6 +300,10 @@
                            gaym_fetch_info_cb, data);
             g_free(infourl);
         }
+	else
+	{
+	    g_hash_table_remove(gaym->info_window_needed, normalized);
+	}
     }
     g_free(normalized);
 }

Modified: qrc/trunk/gaym-extras/src/bio-popups.c
===================================================================
--- qrc/trunk/gaym-extras/src/bio-popups.c	2005-08-04 05:19:15 UTC (rev 272)
+++ qrc/trunk/gaym-extras/src/bio-popups.c	2005-08-18 14:36:32 UTC (rev 273)
@@ -170,7 +170,9 @@
     gtk_widget_set_name(tipwindow, "gtk-tooltips");
 
     struct paint_data *pdata = g_new0(struct paint_data, 1);
-    pdata->tooltiptext = tooltiptext;
+    pdata->tooltiptext = g_strdup_printf("<b><i>%s</i></b>%s",name,tooltiptext);
+    //pdata->tooltiptext = tooltiptext;
+    g_free(tooltiptext);
     pdata->pixbuf = lookup_cached_thumbnail(account, name);
     g_signal_connect(G_OBJECT(tipwindow), "expose_event",
                      G_CALLBACK(namelist_paint_tip), pdata);
@@ -178,7 +180,7 @@
     layout = gtk_widget_create_pango_layout(tipwindow, NULL);
     pango_layout_set_wrap(layout, PANGO_WRAP_WORD);
     pango_layout_set_width(layout, 300000);
-    pango_layout_set_markup(layout, tooltiptext, strlen(tooltiptext));
+    pango_layout_set_markup(layout, pdata->tooltiptext, strlen(pdata->tooltiptext));
     pango_layout_get_size(layout, &w, &h);
 
 #if GTK_CHECK_VERSION(2,2,0)

Modified: qrc/trunk/gaym-extras/src/gaym-extras.c
===================================================================
--- qrc/trunk/gaym-extras/src/gaym-extras.c	2005-08-04 05:19:15 UTC (rev 272)
+++ qrc/trunk/gaym-extras/src/gaym-extras.c	2005-08-18 14:36:32 UTC (rev 273)
@@ -166,8 +166,8 @@
      * Destroy all popups
      * Remove chaticon buttons
      */
+    return TRUE;
 
-
 }
 static gboolean plugin_load(GaimPlugin * plugin)
 {

Modified: qrc/trunk/gaym-extras/src/gaym-extras.h
===================================================================
--- qrc/trunk/gaym-extras/src/gaym-extras.h	2005-08-04 05:19:15 UTC (rev 272)
+++ qrc/trunk/gaym-extras/src/gaym-extras.h	2005-08-18 14:36:32 UTC (rev 273)
@@ -39,6 +39,7 @@
 struct paint_data {
     char *tooltiptext;
     GdkPixbuf *pixbuf;
+    char *name;
 };
 
 // Additional UI info for a conversation.



From jblebrun at berlios.de  Mon Aug 22 06:03:01 2005
From: jblebrun at berlios.de (Jason LeBrun at BerliOS)
Date: Mon, 22 Aug 2005 06:03:01 +0200
Subject: [Qrc-svn] r274 - qrc/trunk/gaym-extras/src
Message-ID: <200508220403.j7M431kl002846@sheep.berlios.de>

Author: jblebrun
Date: 2005-08-22 06:02:29 +0200 (Mon, 22 Aug 2005)
New Revision: 274

Modified:
   qrc/trunk/gaym-extras/src/gaym-extras.c
Log:
Fixes the problem where a second thumbnail widget appeared if you
disconnect and reconnect while in a channel.


Modified: qrc/trunk/gaym-extras/src/gaym-extras.c
===================================================================
--- qrc/trunk/gaym-extras/src/gaym-extras.c	2005-08-18 14:36:32 UTC (rev 273)
+++ qrc/trunk/gaym-extras/src/gaym-extras.c	2005-08-22 04:02:29 UTC (rev 274)
@@ -45,10 +45,18 @@
 
 static void redo_im_window(GaimConversation * c)
 {
+    gaim_debug_misc("chaticon","GOT CONVERSATION CREATED FOR %s\n",c->name);
     if (!g_strrstr(gaim_account_get_protocol_id(c->account), "prpl-gaym"))
         return;
     if (c && c->type == GAIM_CONV_IM)
         add_im_popup_stuff(c);
+    else if (c->type == GAIM_CONV_CHAT)
+    {
+	add_chat_sort_functions(c);
+	add_chat_popup_stuff(c);
+	add_chat_icon_stuff(c);
+    }
+    
 }
 
 
@@ -59,14 +67,6 @@
     gaim_debug_misc("gaym-extras", "info update\n");
 }
 
-static void redochatwindow(GaimConversation * c)
-{
-    if (!g_strrstr(gaim_account_get_protocol_id(c->account), "prpl-gaym"))
-        return;
-    add_chat_sort_functions(c);
-    add_chat_popup_stuff(c);
-    add_chat_icon_stuff(c);
-}
 static gchar *find_file(const char *dir, const char *base)
 {
     char *filename;
@@ -174,9 +174,6 @@
     init_chat_icons(plugin);
     init_popups();
     init_roombrowse(plugin);
-    gaim_signal_connect(gaim_conversations_get_handle(), "chat-joined",
-                        plugin, GAIM_CALLBACK(redochatwindow), NULL);
-
     gaim_signal_connect(gaim_conversations_get_handle(),
                         "conversation-created", plugin,
                         GAIM_CALLBACK(redo_im_window), NULL);



From jblebrun at berlios.de  Mon Aug 22 07:36:08 2005
From: jblebrun at berlios.de (Jason LeBrun at BerliOS)
Date: Mon, 22 Aug 2005 07:36:08 +0200
Subject: [Qrc-svn] r275 - in qrc/trunk: . display-options
Message-ID: <200508220536.j7M5a8Ts018282@sheep.berlios.de>

Author: jblebrun
Date: 2005-08-22 07:35:24 +0200 (Mon, 22 Aug 2005)
New Revision: 275

Added:
   qrc/trunk/display-options/
   qrc/trunk/display-options/Makefile.am
   qrc/trunk/display-options/display-options.c
Log:
Display options stuff


Added: qrc/trunk/display-options/Makefile.am
===================================================================
--- qrc/trunk/display-options/Makefile.am	2005-08-22 04:02:29 UTC (rev 274)
+++ qrc/trunk/display-options/Makefile.am	2005-08-22 05:35:24 UTC (rev 275)
@@ -0,0 +1,26 @@
+pkgdir = \
+	$(GAIM_LIBDIR)/gaim
+
+GAYMSOURCES = \
+	display-options.c
+	
+AM_CFLAGS = \
+	$(st)
+
+libdisplay_options_la_LDFLAGS = \
+	-module \
+	-avoid-version \
+	$(GTK_LIBS) \
+	$(GAIM_LIBS)
+
+pkg_LTLIBRARIES = \
+	libdisplay-options.la
+
+libdisplay_options_la_SOURCES = \
+	$(GAYMSOURCES)
+
+AM_CPPFLAGS = \
+	$(DEBUG_CFLAGS) \
+	$(GTK_CFLAGS) \
+	$(GAIM_CFLAGS)
+	

Added: qrc/trunk/display-options/display-options.c
===================================================================
--- qrc/trunk/display-options/display-options.c	2005-08-22 04:02:29 UTC (rev 274)
+++ qrc/trunk/display-options/display-options.c	2005-08-22 05:35:24 UTC (rev 275)
@@ -0,0 +1,495 @@
+/*
+ * This is to try to add some extra readability to Gaim's aweful
+ * display.  I'd like the colors to be background colors, but not
+ * just font backgrounds .. a DIV or TD background.  Right now this
+ * isn't possible to do while still using GtkIMHTML.  I'd also like
+ * to have the thumbnails of who talks on the left-hand side, but for
+ * all protocols.  Would also like the name and/or thumbnail to be
+ * clickable, and pull up either the Get Info or Full Profile, and
+ * possibly a right click menu for Info/IM.
+ */
+
+#include <glib.h>
+#include "internal.h"
+#include "gtkgaim.h"
+
+#include "conversation.h"
+#include "debug.h"
+#include "log.h"
+#include "prefs.h"
+#include "signals.h"
+#include "util.h"
+#include "version.h"
+
+#include "gtkconv.h"
+#include "gtkimhtml.h"
+#include "gtkplugin.h"
+
+#define CHATSORT_PLUGIN_ID "display-options"
+
+/* XXX */
+#include "gaim.h"
+
+#define AUTO_RESPONSE "&lt;AUTO-REPLY&gt; : "
+
+#define SEND_COLOR "#16569E"
+#define RECV_COLOR "#A82F2F"
+
+/* These are right out of gaim, and they need to be darkened!*/
+static char nick_colors[][8] = {
+	"#ba55d3",              /* Medium Orchid */
+	"#ee82ee",              /* Violet */
+	"#c715b4",              /* Medium Violet Red */
+	"#ff69b4",              /* Hot Pink */
+	"#ff6347",              /* Tomato */
+	"#fa8c00",              /* Dark Orange */
+	"#fa8072",              /* Salmon */
+	"#b22222",              /* Fire Brick */
+	"#f4a460",              /* Sandy Brown */
+	"#cd5c5c",              /* Indian Red */
+	"#bc8f8f",              /* Rosy Brown */
+	"#f0e68c",              /* Khaki */
+	"#bdb76b",              /* Dark Khaki */
+	"#228b22",              /* Forest Green */
+	"#9acd32",              /* Yellow Green */
+	"#32cd32",              /* Lime Green */
+	"#3cb371",              /* Medium Sea Green (Medium Sea Green?!  What are we women?!) */
+	"#2e8b57",              /* Sea Green */
+	"#8fbc8f",              /* Dark Sea Green */
+	"#66cdaa",              /* Medium Aquamarine */
+	"#5f9ea0",              /* Cadet Blue */
+	"#48d1cc",              /* Medium Turquoise */
+	"#00ced1",              /* Dark Turquoise */
+	"#4682b4",              /* Stell Blue */
+	"#00bfff",              /* Deep Sky Blue */
+	"#1690ff",              /* Dodger Blue */
+	"#4169ff",              /* Royal Blue */
+	"#6a5acd",              /* Slate Blue */
+	"#6495ed",              /* Cornflower Blue */
+	"#708090",              /* Slate gray */
+	"#2f4f4f",              /* Dark Slate Gray */
+	"#ff8c00",              /* Dark Orange */
+	"#006400",              /* DarkGreen */
+	"#8b4513",              /* SaddleBrown */
+	"#8b8989",              /* snow4 */
+	"#7d26cd",              /* purple3 */
+};
+
+#define NUM_NICK_COLORS (sizeof(nick_colors) / sizeof(*nick_colors))
+
+/* Holds the last message spoken and who said it for each conversation to
+ * avoid annoying repeats and floods
+ */
+struct LastMessage {
+	gchar * who;
+	gchar * msg;
+};
+
+/* This holds the above Structs */
+static GHashTable * Conversations = NULL;
+
+/* Holds the pointer to the original function */
+static void (*disp_gtkconv_write_conv)(GaimConversation *conv, const char *who,
+        const char *message, GaimMessageFlags flags,time_t mtime);
+
+/* Holds UiOps pointer between calls */
+static GaimConversationUiOps *disp_op;
+
+/* Custom destructor */
+static void RemoveLastMessage (gpointer data)
+{
+	struct LastMessage * lm = data;
+	g_free (lm->msg);
+	g_free (lm->who);
+	g_free (lm);
+}
+
+/* Longer and more complex than I'd like */
+gchar * format_system_msg (const gchar * message,struct LastMessage * lm)
+{
+    char * newmessage = NULL;
+    gchar ** parts = NULL;
+	
+    parts = g_strsplit (message," ",2);
+
+    if ((parts[0]) && (parts[1])) {
+        gchar ** prebio = g_strsplit (parts[1],"[",2);
+	if (lm->who) {
+		g_free(lm->who);
+	}
+	if (lm->msg) {
+		g_free(lm->msg);
+	}
+	lm->who = strdup (parts[0]);
+	lm->msg = NULL;
+	if (prebio && prebio[1]) {
+	    gchar ** postbio = g_strsplit (prebio[1],"]",2);
+	    if (postbio && postbio[1]) {
+                newmessage = g_strdup_printf ("<font size=-2><b>%s</b> %s[<font color=\"#006080\"><b>%s</b></font>]%s</font>",parts[0],prebio[0],postbio[0],postbio[1]);
+	    }
+	    g_strfreev(postbio);
+	} else {
+            newmessage = g_strdup_printf ("<font size=-2><b>%s</b> %s</font>",parts[0],parts[1]);
+	}				
+	g_strfreev(prebio);
+    }
+    g_strfreev(parts);
+	
+    if (newmessage == NULL) {
+        newmessage = g_strdup_printf ("<font size=-2>%s</font>",message);
+    }
+    return newmessage;
+}
+
+/* This replaces gaim's default version */
+static void
+disp_write_convo (GaimConversation *conv, const char *who,
+						const char *message, GaimMessageFlags flags,
+						time_t mtime)
+{
+	GaimGtkConversation *gtkconv;
+	GaimConvWindow *win;
+	GaimConnection *gc;
+	int gtk_font_options = 0;
+	char buf[BUF_LONG];
+	char buf2[BUF_LONG];
+	char mdate[64];
+	char color[10];
+	char *str;
+	char *with_font_tag;
+	char *sml_attrib = NULL;
+	size_t length = strlen(message) + 1;
+
+	gtkconv = GAIM_GTK_CONVERSATION(conv);
+	gc = gaim_conversation_get_gc(conv);
+
+	win = gaim_conversation_get_window(conv);
+
+	if (!(flags & GAIM_MESSAGE_NO_LOG) &&
+		((gaim_conversation_get_type(conv) == GAIM_CONV_CHAT &&
+		 gaim_prefs_get_bool("/gaim/gtk/conversations/chat/raise_on_events")) ||
+		(gaim_conversation_get_type(conv) == GAIM_CONV_IM &&
+		 gaim_prefs_get_bool("/gaim/gtk/conversations/im/raise_on_events")))) {
+		gaim_conv_window_show(win);
+	}
+/*
+	if (gtk_text_buffer_get_char_count(gtk_text_view_get_buffer(GTK_TEXT_VIEW(gtkconv->imhtml))))
+		gtk_imhtml_append_text(GTK_IMHTML(gtkconv->imhtml), "<BR>", 0);
+*/
+	if(time(NULL) > mtime + 20*60) /* show date if older than 20 minutes */
+		strftime(mdate, sizeof(mdate), "%Y-%m-%d %H:%M:%S", localtime(&mtime));
+	else
+		strftime(mdate, sizeof(mdate), "%H:%M:%S", localtime(&mtime));
+
+	if(gc)
+		sml_attrib = g_strdup_printf("sml=\"%s\"",
+									 gaim_account_get_protocol_name(conv->account));
+
+	gtk_font_options ^= GTK_IMHTML_NO_COMMENTS;
+
+	if (gaim_prefs_get_bool("/gaim/gtk/conversations/ignore_colors"))
+		gtk_font_options ^= GTK_IMHTML_NO_COLOURS;
+	if (gaim_prefs_get_bool("/gaim/gtk/conversations/ignore_fonts"))
+		gtk_font_options ^= GTK_IMHTML_NO_FONTS;
+	if (gaim_prefs_get_bool("/gaim/gtk/conversations/ignore_font_sizes"))
+		gtk_font_options ^= GTK_IMHTML_NO_SIZES;
+
+	/* this is gonna crash one day, I can feel it. */
+	if (GAIM_PLUGIN_PROTOCOL_INFO(gaim_find_prpl(gaim_account_get_protocol_id(conv->account)))->options &
+	    OPT_PROTO_USE_POINTSIZE) {
+		gtk_font_options ^= GTK_IMHTML_USE_POINTSIZE;
+	}
+
+	if (flags & GAIM_MESSAGE_SYSTEM) {
+		gchar * sep = "<BR>";
+		gchar * newmessage = NULL; 
+		
+		struct LastMessage * lastconv = (struct LastMessage *)
+			g_hash_table_lookup(Conversations,conv); 
+
+		if (lastconv && (lastconv->who) && (lastconv->msg != NULL)) {
+			sep = "<HR>";
+		}
+		newmessage = format_system_msg (message,lastconv);
+		
+		if (gaim_prefs_get_bool("/gaim/gtk/conversations/show_timestamps"))
+			g_snprintf(buf, BUF_LONG, "<FONT SIZE=\"2\">(%s)</FONT> %s",
+				   mdate, newmessage);
+		else
+			g_snprintf(buf, BUF_LONG, "%s", newmessage);
+
+		g_snprintf(buf2, sizeof(buf2),
+			   "%s<FONT %s><FONT SIZE=\"2\"><!--(%s) --></FONT>%s", sep, sml_attrib ? sml_attrib : "", mdate, newmessage);
+
+		g_free(newmessage);
+		
+		gtk_imhtml_append_text(GTK_IMHTML(gtkconv->imhtml), buf2, 0);
+
+		/* Add the message to a conversations scrollback buffer */
+		conv->history = g_string_append(conv->history, buf);
+		conv->history = g_string_append(conv->history, "<BR>\n");
+
+	} else if (flags & GAIM_MESSAGE_ERROR) {
+		if (gaim_prefs_get_bool("/gaim/gtk/conversations/show_timestamps"))
+			g_snprintf(buf, BUF_LONG, "<FONT COLOR=\"#ff0000\"><FONT SIZE=\"2\">(%s)</FONT> <B>%s</B></FONT>",
+				   mdate, message);
+		else
+			g_snprintf(buf, BUF_LONG, "<FONT COLOR=\"#ff0000\"><B>%s</B></FONT>", message);
+
+		g_snprintf(buf2, sizeof(buf2),
+			   "<BR><FONT COLOR=\"#ff0000\"><FONT %s><FONT SIZE=\"2\"><!--(%s) --></FONT><B>%s</B></FONT></FONT>",
+			   sml_attrib ? sml_attrib : "", mdate, message);
+
+		gtk_imhtml_append_text(GTK_IMHTML(gtkconv->imhtml), buf2, 0);
+
+		/* Add the message to a conversations scrollback buffer */
+		conv->history = g_string_append(conv->history, buf);
+		conv->history = g_string_append(conv->history, "<BR>\n");
+	} else if (flags & GAIM_MESSAGE_NO_LOG) {
+		g_snprintf(buf, BUF_LONG,
+			   "<BR><B><FONT %s COLOR=\"#777777\">%s</FONT></B>",
+			   sml_attrib ? sml_attrib : "", message);
+
+		gtk_imhtml_append_text(GTK_IMHTML(gtkconv->imhtml), buf, 0);
+	}
+	else {
+		char *new_message = g_memdup(message, length);
+		char *who_escaped = (who ? g_markup_escape_text(who, strlen(who)) : g_strdup(""));
+
+		if (flags & GAIM_MESSAGE_WHISPER) {
+			str = g_malloc(1024);
+
+			/* If we're whispering, it's not an autoresponse. */
+			if (gaim_message_meify(new_message, -1)) {
+				g_snprintf(str, 1024, "***%s", who_escaped);
+				strcpy(color, "#6C2585");
+			}
+			else {
+				g_snprintf(str, 1024, "*%s*:", who_escaped);
+				strcpy(color, "#00FF00");
+			}
+		}
+		else {
+			if (gaim_message_meify(new_message, -1)) {
+				str = g_malloc(1024);
+
+				if (flags & GAIM_MESSAGE_AUTO_RESP)
+					g_snprintf(str, 1024, "%s ***%s", AUTO_RESPONSE, who_escaped);
+				else
+					g_snprintf(str, 1024, "***%s", who_escaped);
+
+				if (flags & GAIM_MESSAGE_NICK)
+					strcpy(color, "#AF7F00");
+				else
+					strcpy(color, "#062585");
+			}
+			else {
+				str = g_malloc(1024);
+				if (flags & GAIM_MESSAGE_AUTO_RESP)
+					g_snprintf(str, 1024, "%s %s", who_escaped, AUTO_RESPONSE);
+				else
+					g_snprintf(str, 1024, "%s", who_escaped);
+				if (flags & GAIM_MESSAGE_NICK)
+					strcpy(color, "#AF7F00");
+				else if (flags & GAIM_MESSAGE_RECV) {
+					if (flags & GAIM_MESSAGE_COLORIZE) {
+						const char *u;
+						int m = 0;
+						
+						for (u = who; *u != '\0'; u++) {
+							m += (*u);
+						}
+
+						m = m % NUM_NICK_COLORS;
+
+						strcpy(color, nick_colors[m]);
+					}
+					else
+						strcpy(color, RECV_COLOR);
+				}
+				else if (flags & GAIM_MESSAGE_SEND)
+					strcpy(color, SEND_COLOR);
+				else {
+					gaim_debug_error("gtkconv", "message missing flags\n");
+					strcpy(color, "#000000");
+				}
+			}
+		}
+
+		if(who_escaped)
+			g_free(who_escaped);
+
+		if (gaim_prefs_get_bool("/gaim/gtk/conversations/show_timestamps"))
+			g_snprintf(buf, BUF_LONG,
+				   "<HR><FONT SIZE=\"2\">(%s)</FONT> "
+				   "<B><A HREF=\"http://my.gay.com/%s\"><FONT COLOR=\"%s\" %s>%s:</FONT></A></B></FONT> ", mdate, str, color,
+				   sml_attrib ? sml_attrib : "", str);
+		else
+			g_snprintf(buf, BUF_LONG,
+				   "<HR><FONT SIZE=\"2\"<B><A HREF=\"http://my.gay.com/%s\"><FONT COLOR=\"%s\" %s>%s:</FONT></A></B></FONT> ", str, color,
+				   sml_attrib ? sml_attrib : "", str);
+
+		/* FIXME: insert IMG tag in next line */
+		g_snprintf(buf2, BUF_LONG,
+			   "<HR><FONT SIZE=\"1\"><!--(%s) -->"
+			   "<B><A HREF=\"http://my.gay.com/%s\"><FONT COLOR=\"%s\" %s>%s:</FONT></A></B></FONT>",
+			   mdate, str, color, sml_attrib ? sml_attrib : "", str);
+
+		g_free(str);
+
+		struct LastMessage * lastconv = (struct LastMessage *) 
+			g_hash_table_lookup(Conversations,conv); 
+
+		if (lastconv == NULL) {
+			gaim_debug_error ("disp","## CONV NOT FOUND !!! ##\n");
+		} else {
+			gaim_debug_info ("disp","who: %s lastwho: %s\n",who,lastconv->who);
+		}
+		if ((lastconv == NULL) || (lastconv->who == NULL) || (g_strcasecmp(who,lastconv->who))) {
+			gtk_imhtml_append_text(GTK_IMHTML(gtkconv->imhtml), buf2, 0);
+		}
+		if(gc){
+			char *pre = g_strdup_printf("<br><font color=%s><font %s>    ", color, sml_attrib ? sml_attrib : "");
+			char *post = "</font></font>";
+			int pre_len = strlen(pre);
+			int post_len = strlen(post);
+
+			with_font_tag = g_malloc(length + pre_len + post_len + 1);
+
+			strcpy(with_font_tag, pre);
+			memcpy(with_font_tag + pre_len, new_message, length);
+			strcpy(with_font_tag + pre_len + length, post);
+
+			length += pre_len + post_len;
+			g_free(pre);
+		}
+		else
+			with_font_tag = g_memdup(new_message, length);
+
+		if ((lastconv == NULL) || (lastconv->msg == NULL) || (g_strcasecmp(new_message,lastconv->msg) || (g_strcasecmp(who,lastconv->who))))  {
+			gtk_imhtml_append_text(GTK_IMHTML(gtkconv->imhtml),
+							 with_font_tag, gtk_font_options);
+			if (lastconv) {
+				if (lastconv->msg) {
+					g_free(lastconv->msg);
+				}
+				if ((lastconv->who) && (g_strcasecmp(who,lastconv->who))) {
+					g_free(lastconv->who);
+				}
+				lastconv->msg = g_strdup(new_message);
+				lastconv->who = g_strdup(who);
+			}
+			conv->history = g_string_append(conv->history, buf);
+			conv->history = g_string_append(conv->history, new_message);
+			conv->history = g_string_append(conv->history, "<BR>\n");
+		}
+		g_free(with_font_tag);
+		g_free(new_message);
+	}
+
+
+	if(sml_attrib)
+		g_free(sml_attrib);
+}
+
+
+/* Install the above */
+static void disp_conv_install (GaimConversation *conv)
+{
+    disp_op = gaim_conversation_get_ui_ops(conv);
+    
+    if (disp_op->write_conv != disp_write_convo) {
+        disp_gtkconv_write_conv = disp_op->write_conv;
+        disp_op->write_conv = disp_write_convo;
+    } else {
+        gaim_debug_info ("disp_convo_created","Not Installed\n");
+    }
+    g_hash_table_insert (Conversations,conv,g_new0(struct LastMessage,1));
+
+}
+
+/* Remove a conversation on part */
+static gboolean disp_conv_uninstall (GaimConversation *conv)
+{
+    g_hash_table_remove (Conversations,conv);
+    return TRUE;
+}
+
+/* Attempts to find a conv to to call the installer above */
+static gboolean disp_install_wrapper (GaimPlugin *plugin)
+{
+    GList *conversations = gaim_get_conversations();
+    conversations = g_list_first(conversations);
+    
+    if (Conversations == NULL) {
+	    Conversations = g_hash_table_new_full 
+		    (g_direct_hash,g_direct_equal,NULL,RemoveLastMessage);
+    }
+    if (conversations) {
+        while(conversations) {
+    	    GaimConversation *conv = conversations->data;
+	    if (conv->type == GAIM_CONV_CHAT)
+	    {
+		disp_conv_install(conv);
+		return TRUE;
+	    }
+	    conversations = g_list_next(conversations);
+        }
+	return FALSE;
+    } else {
+	/* Are these right? */
+	gaim_signal_connect(gaim_conversations_get_handle(),
+	    "chat-joined", plugin, GAIM_CALLBACK(disp_conv_install), NULL);
+	gaim_signal_connect(gaim_conversations_get_handle(),
+	    "chat-left", plugin, GAIM_CALLBACK(disp_conv_uninstall), NULL);
+
+	return TRUE;
+    }
+}
+
+/* Uninstall the whole plugin */
+static gboolean disp_uninstall (GaimPlugin *plugin)
+{
+    if (disp_op) {
+    	if (disp_op->write_conv == disp_write_convo) {
+        	disp_op->write_conv = disp_gtkconv_write_conv;
+    	} 
+    } else {
+        	gaim_debug_info ("display plugin unload","Not Installed");
+    }
+    if (Conversations) {
+	    g_hash_table_destroy(Conversations);
+	    Conversations = NULL;
+    }
+    return TRUE;
+}
+
+static GaimPluginInfo info = {
+    GAIM_PLUGIN_MAGIC,
+    GAIM_MAJOR_VERSION,
+    GAIM_MINOR_VERSION,
+    GAIM_PLUGIN_STANDARD,
+    GAIM_GTK_PLUGIN_TYPE,
+    0,
+    NULL,
+    GAIM_PRIORITY_DEFAULT,
+    CHATSORT_PLUGIN_ID,
+    N_("Display Options"),
+    VERSION,
+    N_("Various changes to gaim's display properties"),
+    N_("Changes message display format, adding links, display grouping, bioline highlights, smaller system messages, and removes annoying repeats!"),
+    "Evan Langlois <evan at coolrunningconcepts.com>",
+    GAIM_WEBSITE,
+    disp_install_wrapper,
+    disp_uninstall,
+    NULL,
+    NULL,
+    NULL,
+    NULL
+};
+
+static void init_plugin(GaimPlugin * plugin)
+{
+}
+
+GAIM_INIT_PLUGIN(history, init_plugin, info)



From jblebrun at berlios.de  Mon Aug 22 07:40:06 2005
From: jblebrun at berlios.de (Jason LeBrun at BerliOS)
Date: Mon, 22 Aug 2005 07:40:06 +0200
Subject: [Qrc-svn] r276 - qrc/trunk
Message-ID: <200508220540.j7M5e6Vc021093@sheep.berlios.de>

Author: jblebrun
Date: 2005-08-22 07:39:37 +0200 (Mon, 22 Aug 2005)
New Revision: 276

Modified:
   qrc/trunk/configure.ac
Log:
By default, don't build display options plugin


Modified: qrc/trunk/configure.ac
===================================================================
--- qrc/trunk/configure.ac	2005-08-22 05:35:24 UTC (rev 275)
+++ qrc/trunk/configure.ac	2005-08-22 05:39:37 UTC (rev 276)
@@ -38,7 +38,7 @@
 
 AC_ARG_ENABLE([display-options],
 	[AS_HELP_STRING(--enable-display_options,build the bot-challenger plugin @<:@default=yes@:>@)],,
-	[enable_display_options="yes"])
+	[enable_display_options="no"])
 	
 AC_ARG_ENABLE([bot-challenger],
 	[AS_HELP_STRING(--enable-bot-challenger,build the bot-challenger plugin @<:@default=yes@:>@)],,



From jblebrun at berlios.de  Wed Aug 24 06:47:18 2005
From: jblebrun at berlios.de (Jason LeBrun at BerliOS)
Date: Wed, 24 Aug 2005 06:47:18 +0200
Subject: [Qrc-svn] r277 - qrc/trunk
Message-ID: <200508240447.j7O4lIqY005530@sheep.berlios.de>

Author: jblebrun
Date: 2005-08-24 06:46:53 +0200 (Wed, 24 Aug 2005)
New Revision: 277

Modified:
   qrc/trunk/ChangeLog
Log:


Modified: qrc/trunk/ChangeLog
===================================================================
--- qrc/trunk/ChangeLog	2005-08-22 05:39:37 UTC (rev 276)
+++ qrc/trunk/ChangeLog	2005-08-24 04:46:53 UTC (rev 277)
@@ -1,3 +1,21 @@
+0.9.6:
+	Bug fixes:
+
+	-Disconnects followed by reconnects would cause a second thumbnail to
+	be added in chat windows that were left open.
+	-Photos are updated when you click on a name in the roombrowser.
+	-Room joins don't request 8 zillion thumbnails at once.
+	
+	Features:
+
+	-Requesting info now gives better feedback.	
+	-Added very experimental "display options" plugin.
+
+	Known bugs:
+	-Odd behavior with bio/stats column in roombrowse. It will change
+	erratically.
+	
+
 0.9.5:
 	Bug Fixes:
 	- Can handle room browsing of rooms you are currently in.



From jblebrun at berlios.de  Sat Aug 27 02:49:06 2005
From: jblebrun at berlios.de (Jason LeBrun at BerliOS)
Date: Sat, 27 Aug 2005 02:49:06 +0200
Subject: [Qrc-svn] r278 - in qrc/trunk: . gaym-extras/src
Message-ID: <200508270049.j7R0n6tg004027@sheep.berlios.de>

Author: jblebrun
Date: 2005-08-27 02:48:53 +0200 (Sat, 27 Aug 2005)
New Revision: 278

Modified:
   qrc/trunk/configure.ac
   qrc/trunk/gaym-extras/src/roombrowse.c
Log:
Make display-options not build by default.
Fix markup-escaping bug in roombrowser.



Modified: qrc/trunk/configure.ac
===================================================================
--- qrc/trunk/configure.ac	2005-08-24 04:46:53 UTC (rev 277)
+++ qrc/trunk/configure.ac	2005-08-27 00:48:53 UTC (rev 278)
@@ -37,7 +37,7 @@
 
 
 AC_ARG_ENABLE([display-options],
-	[AS_HELP_STRING(--enable-display_options,build the bot-challenger plugin @<:@default=yes@:>@)],,
+	[AS_HELP_STRING(--enable-display-options,build the bot-challenger plugin @<:@default=no@:>@)],,
 	[enable_display_options="no"])
 	
 AC_ARG_ENABLE([bot-challenger],
@@ -155,7 +155,7 @@
 echo $PACKAGE $VERSION
 echo
 echo Build bot-challenger plugin...... : $enable_bot_challenger
-echo Build display_options plugin...... : $enable_display_options
+echo Build display-options plugin...... : $enable_display_options
 echo Build gaym plugin................ : $enable_gaym
 echo Build gaym-extras plugin......... : $enable_gaym_extras
 echo

Modified: qrc/trunk/gaym-extras/src/roombrowse.c
===================================================================
--- qrc/trunk/gaym-extras/src/roombrowse.c	2005-08-24 04:46:53 UTC (rev 277)
+++ qrc/trunk/gaym-extras/src/roombrowse.c	2005-08-27 00:48:53 UTC (rev 278)
@@ -146,9 +146,15 @@
     if (member->age)
         g_string_append_printf(info, "\n<b>Age:</b> %s", member->age);
     if (member->location)
-        g_string_append_printf(info, "\n<b>Location:</b> %s", member->location);
-    if (member->bio)
-        g_string_append_printf(info, "\n<b>Info</b>: %s", member->bio);
+    {
+	char* escaped=g_markup_escape_text(member->location, strlen(member->location));
+        g_string_append_printf(info, "\n<b>Location:</b> %s", escaped);
+    }
+    if (member->bio) 
+    {
+	char* escaped=g_markup_escape_text(member->bio, strlen(member->bio));
+        g_string_append_printf(info, "\n<b>Info</b>: %s", escaped);
+    }
     g_string_erase(info, 0, 1);
     char *infoc = g_string_free(info, FALSE);
 
@@ -366,6 +372,7 @@
 {
 
     g_return_if_fail(selection != NULL);
+    gaim_debug_misc("roombrowse","changed_cb\n");
 
     GtkTreeIter iter;
     GtkTreeModel *model = NULL;
@@ -493,7 +500,6 @@
 
 
     rend = gtk_cell_renderer_text_new();
-    g_object_set(rend, "wrap-mode", PANGO_WRAP_WORD, "wrap-width", 20);
     gtk_cell_renderer_set_fixed_size(rend, -1, 80);
     col =
         gtk_tree_view_column_new_with_attributes("Name", rend, "text",



From jblebrun at berlios.de  Mon Aug 29 05:11:50 2005
From: jblebrun at berlios.de (Jason LeBrun at BerliOS)
Date: Mon, 29 Aug 2005 05:11:50 +0200
Subject: [Qrc-svn] r279 - in qrc/trunk: gaym/src gaym-extras/src
Message-ID: <200508290311.j7T3Boe0021568@sheep.berlios.de>

Author: jblebrun
Date: 2005-08-29 05:11:18 +0200 (Mon, 29 Aug 2005)
New Revision: 279

Modified:
   qrc/trunk/gaym-extras/src/roombrowse.c
   qrc/trunk/gaym/src/gaym.c
   qrc/trunk/gaym/src/gaym.h
   qrc/trunk/gaym/src/msgs.c
Log:
A couple of bugfixes, and add subroom display to roombrowse list.

gaym.h:
    Add multi_room to namelist struct, indicating that it's a =* room
    change some char* to gchar*
    add room to GaymBuddy struct to indicate which subroom someone is in
gaym.c:
    Add null pointer check to gaym_tooltip_text
    Set multi_room variable if applicable

msgs.c:
    Populate GaymBuddy room field when doing namelist
    Fix problem where subrooms get missed because they don't always come in 3-2-1 order.
    
    
roombrowse.c:
    *display subroom info.



Modified: qrc/trunk/gaym/src/gaym.c
===================================================================
--- qrc/trunk/gaym/src/gaym.c	2005-08-27 00:48:53 UTC (rev 278)
+++ qrc/trunk/gaym/src/gaym.c	2005-08-29 03:11:18 UTC (rev 279)
@@ -228,6 +228,9 @@
 
 static char *gaym_tooltip_text(GaimBuddy * buddy)
 {
+    if(!buddy || !buddy->account || !buddy->account->gc)
+	return NULL;
+    
     struct gaym_conn *gaym =
         (struct gaym_conn *) buddy->account->gc->proto_data;
 
@@ -1639,6 +1642,10 @@
     struct gaym_conn *gaym = (struct gaym_conn *) account->gc->proto_data;
     GaymNamelist *namelist = g_new0(GaymNamelist, 1);
     namelist->roomname = g_strdup(room);
+    if(g_str_has_suffix(room, "*"))
+	namelist->multi_room=TRUE;
+    else
+	namelist->multi_room=FALSE;
     namelist->members = NULL;
     namelist->num_rooms = 100;
     namelist->current = 0;

Modified: qrc/trunk/gaym/src/gaym.h
===================================================================
--- qrc/trunk/gaym/src/gaym.h	2005-08-27 00:48:53 UTC (rev 278)
+++ qrc/trunk/gaym/src/gaym.h	2005-08-29 03:11:18 UTC (rev 279)
@@ -116,16 +116,17 @@
 } GaimUrlSession;
 typedef struct gaym_buddy GaymBuddy;
 struct gaym_buddy {
-    char *name;                 /* gaym formatted nick */
+    gchar *name;                 /* gaym formatted nick */
     gboolean done;              /* has been checked */
     gboolean online;            /* is online */
     gint ref_count;             /* reference count for mem mngmnt */
-    char *bio;                  /* bio string */
-    char *thumbnail;            /* thumbnail string */
-    char *sex;                  /* sex string */
-    char *age;                  /* age string */
-    char *prefix;               /* prefix string */
-    char *location;             /* location string */
+    gchar *bio;                  /* bio string */
+    gchar *thumbnail;            /* thumbnail string */
+    gchar *sex;                  /* sex string */
+    gchar *age;                  /* age string */
+    gchar *prefix;               /* prefix string */
+    gchar *location;             /* location string */
+    gchar *room;		/* Which subroom, if this is a namelist entry*/
     gboolean gaymuser;          /* gaym detected */
 };
 GaymBuddy *gaym_get_channel_member_info(struct gaym_conn *gaym,
@@ -244,6 +245,7 @@
     char *roomname;
     GSList *members;            // List of GaymBuddies;
     int num_rooms;
+    gboolean multi_room;
     GSList *current;            // Pointer to gaymbuddy to be updated next 
                                 // 
     // (during names pass)

Modified: qrc/trunk/gaym/src/msgs.c
===================================================================
--- qrc/trunk/gaym/src/msgs.c	2005-08-27 00:48:53 UTC (rev 278)
+++ qrc/trunk/gaym/src/msgs.c	2005-08-29 03:11:18 UTC (rev 279)
@@ -1249,6 +1249,10 @@
         GaymBuddy *member = g_new0(GaymBuddy, 1);
         gchar **parts = g_strsplit(args[2], " ", 7);
 
+	gchar* equals;
+	if((equals=strchr(args[1], '=')))
+	   member->room = g_strdup(equals+1);
+	gaim_debug_misc("roombrowse","args[1]: %s, args[0]: %s\n",args[1],args[0]);
         if (parts[6]) {
             member->bio = gaym_bio_strdup(parts[6]);
             member->thumbnail = gaym_thumbnail_strdup(parts[6]);
@@ -1259,6 +1263,7 @@
             else
                 member->prefix = g_strdup(parts[3]);
 
+	    
             gchar *stats = gaym_stats_strdup(parts[6]);
             if (stats) {
                 gchar **stat_parts = g_strsplit(stats, "|", 3);
@@ -1278,7 +1283,7 @@
         if (!pos)
             return;
         val = g_ascii_digit_value(*(++pos));
-        if (val < nameslist->num_rooms) {
+        if (val != nameslist->num_rooms) {
             gaim_debug_misc("msgs", "*******NEXT ROOM******\n");
             const char *cmdargs[1] = { args[1] };
             gaym_cmd_names(gaym, NULL, NULL, cmdargs);

Modified: qrc/trunk/gaym-extras/src/roombrowse.c
===================================================================
--- qrc/trunk/gaym-extras/src/roombrowse.c	2005-08-27 00:48:53 UTC (rev 278)
+++ qrc/trunk/gaym-extras/src/roombrowse.c	2005-08-29 03:11:18 UTC (rev 279)
@@ -34,6 +34,7 @@
     COLUMN_SYNC,
     COLUMN_NAME,
     COLUMN_PREFIX,
+    COLUMN_ROOM,
     COLUMN_INFO,
     N_COLUMNS
 };
@@ -207,7 +208,10 @@
 #if DEBUG
                        COLUMN_SYNC, sync, COLUMN_PREFIX, member->prefix,
 #endif
-                       COLUMN_NAME, member->name, COLUMN_INFO, infoc, -1);
+                       COLUMN_ROOM, member->room,
+		       COLUMN_NAME, member->name, 
+		       COLUMN_INFO, infoc, -1);
+    
 
 
 }
@@ -480,6 +484,7 @@
                                           G_TYPE_STRING,
                                           G_TYPE_STRING,
                                           G_TYPE_STRING,
+					  G_TYPE_STRING,
                                           G_TYPE_STRING);
     browser->model = GTK_TREE_MODEL(ls);
 
@@ -520,6 +525,12 @@
                                                  COLUMN_SYNC, NULL);
     gtk_tree_view_append_column(GTK_TREE_VIEW(browser->list), col);
 #endif
+    rend = gtk_cell_renderer_text_new();
+    gtk_cell_renderer_set_fixed_size(rend, -1, 80);
+    col =
+        gtk_tree_view_column_new_with_attributes("Room", rend, "text",
+                                                 COLUMN_ROOM, NULL);
+    gtk_tree_view_append_column(GTK_TREE_VIEW(browser->list), col);
 
     rend = gtk_cell_renderer_text_new();
     gtk_cell_renderer_set_fixed_size(rend, -1, 80);



From jblebrun at berlios.de  Mon Aug 29 05:24:43 2005
From: jblebrun at berlios.de (Jason LeBrun at BerliOS)
Date: Mon, 29 Aug 2005 05:24:43 +0200
Subject: [Qrc-svn] r280 - qrc/trunk/gaym-extras/src
Message-ID: <200508290324.j7T3OhPR026863@sheep.berlios.de>

Author: jblebrun
Date: 2005-08-29 05:24:34 +0200 (Mon, 29 Aug 2005)
New Revision: 280

Modified:
   qrc/trunk/gaym-extras/src/roombrowse.c
Log:
Fix so that default image in roombrowser (for those without photo) does not disappear
when clicked.


Modified: qrc/trunk/gaym-extras/src/roombrowse.c
===================================================================
--- qrc/trunk/gaym-extras/src/roombrowse.c	2005-08-29 03:11:18 UTC (rev 279)
+++ qrc/trunk/gaym-extras/src/roombrowse.c	2005-08-29 03:24:34 UTC (rev 280)
@@ -95,7 +95,9 @@
                 lookup_cached_thumbnail(browser->gc->account,
                                         gaim_normalize(browser->gc->
                                                        account,
-                                                       name));
+		                                         name));
+	    if(!pixbuf)
+		break;
             get_icon_scale_size(pixbuf,
                                 prpl_info ? &prpl_info->icon_spec : NULL,
                                 &scale_width, &scale_height);



From jblebrun at berlios.de  Mon Aug 29 08:04:34 2005
From: jblebrun at berlios.de (Jason LeBrun at BerliOS)
Date: Mon, 29 Aug 2005 08:04:34 +0200
Subject: [Qrc-svn] r281 - in qrc/trunk: gaym/src gaym-extras/src
Message-ID: <200508290604.j7T64YIG032475@sheep.berlios.de>

Author: jblebrun
Date: 2005-08-29 08:04:33 +0200 (Mon, 29 Aug 2005)
New Revision: 281

Modified:
   qrc/trunk/gaym-extras/src/roombrowse.c
   qrc/trunk/gaym/src/msgs.c
Log:
Major change to roombrowser so it appears in tabbed windows.



Modified: qrc/trunk/gaym/src/msgs.c
===================================================================
--- qrc/trunk/gaym/src/msgs.c	2005-08-29 03:24:34 UTC (rev 280)
+++ qrc/trunk/gaym/src/msgs.c	2005-08-29 06:04:33 UTC (rev 281)
@@ -277,9 +277,9 @@
     // during conversation-created.
     gaym_update_channel_member(gaym, normalized, args[5]);
     gaym_unreference_channel_member(gaym, normalized);
-    gaim_debug_misc("gaym", "signalling info update for %s\n", args[1]);
+    gaim_debug_misc("gaym", "signalling info update for %s\n", normalized);
     gaim_signal_emit(gaim_accounts_get_handle(), "info-updated",
-                     gaym->account, args[1]);
+                     gaym->account, normalized);
 
     if (g_hash_table_lookup(gaym->info_window_needed, normalized)) {
 

Modified: qrc/trunk/gaym-extras/src/roombrowse.c
===================================================================
--- qrc/trunk/gaym-extras/src/roombrowse.c	2005-08-29 03:24:34 UTC (rev 280)
+++ qrc/trunk/gaym-extras/src/roombrowse.c	2005-08-29 06:04:33 UTC (rev 281)
@@ -27,6 +27,7 @@
 
 
 static GHashTable *browsers = NULL;
+static GHashTable *browser_channels = NULL;
 
 
 enum {
@@ -58,6 +59,7 @@
     GtkWidget *label;
     GtkTreeIter iter;
     GaimConnection *gc;
+    char* channel;
 } RoomBrowseGui;
 
 
@@ -84,13 +86,12 @@
     while (valid) {
         /* Walk through the list, reading each row */
         gchar *str_data;
-
         /* Make sure you terminate calls to gtk_tree_model_get() with a
            '-1' value */
         gtk_tree_model_get(list_store, &iter, COLUMN_NAME, &str_data, -1);
 
-
-        if (!strcmp(str_data, name)) {
+	
+        if (!strcmp(name, gaim_normalize(browser->gc->account, str_data))) {
             GdkPixbuf *pixbuf =
                 lookup_cached_thumbnail(browser->gc->account,
                                         gaim_normalize(browser->gc->
@@ -112,6 +113,7 @@
                                COLUMN_PHOTO, scale, -1);
 
             gtk_tree_model_row_changed(list_store, path, &iter);
+	    gaim_debug_misc("roombrowse","Signaled row change for %s\n",name);
             // g_free(pixbuf);
             break;
         }
@@ -126,6 +128,7 @@
 void roombrowse_update_list_row(GaimConnection * gc, const char *who)
 {
 
+    gaim_debug_misc("roombrowse","Info update: %s\n",who);
     g_hash_table_foreach(browsers, (GHFunc) update_photos, (char *) who);
 
 }
@@ -450,37 +453,22 @@
     g_free(name);
     return FALSE;
 }
-static void roombrowse_menu_cb(GaimBlistNode * node, gpointer data)
-{
-    RoomBrowseGui *browser = g_new0(RoomBrowseGui, 1);
-    GaimConnection *gc = (GaimConnection *) data;
-    browser->window = gtk_window_new(GTK_WINDOW_TOPLEVEL);
-
-    browser->gc = gc;
-    // GaimAccount *account = ((GaimChat *) node)->account;
-    // if (!win)
-    // win = gaim_conv_window_new();
-    GaimChat *chat = ((GaimChat *) node);
-
-    const char *room = gaim_chat_get_name(chat);
-    const char *channel = g_hash_table_lookup(chat->components, "channel");
-    gaim_debug_misc("roombrowse", "chat name: %s\n", room);
-    gaim_debug_misc("roombrowse", "channel name: %s\n", channel);
-    gtk_window_set_title(GTK_WINDOW(browser->window), room);
+static void roombrowse_fix_conv(GaimConversation* conv) {
+  
+    GtkWidget* pane;
+    g_return_if_fail(conv != NULL);
+    if(!g_str_has_prefix(conv->name, "BROWSE:"))
+	    return;
+    GaimGtkConversation* gtkconv=GAIM_GTK_CONVERSATION(conv);
+    gaim_signal_emit(gaim_conversations_get_handle(),  "conversation-destroyed", conv);
+    conv->type=GAIM_CONV_MISC;
+    gchar* channel = g_hash_table_lookup(browser_channels, conv->name);
+    RoomBrowseGui* browser=g_hash_table_lookup(browsers, channel); 
+    gtk_container_foreach(GTK_CONTAINER(gtkconv->tab_cont), (GtkCallback)(gtk_widget_hide), NULL);
     
-    g_signal_connect(browser->window, "delete-event", G_CALLBACK(browser_window_destroyed), g_strdup(channel));
-    GtkWidget *vbox = gtk_vbox_new(FALSE, 6);
-    gtk_container_add(GTK_CONTAINER(browser->window), vbox);
-    gtk_widget_show(vbox);
-
-    browser->label = gtk_label_new(room);
-    gtk_box_pack_start(GTK_BOX(vbox), browser->label, FALSE, FALSE, 0);
-    gtk_widget_show(browser->label);
     GtkWidget *sw = gtk_scrolled_window_new(NULL, NULL);
-    gtk_box_pack_start(GTK_BOX(vbox), sw, TRUE, TRUE, 0);
-    gtk_widget_set_size_request(GTK_WIDGET(sw), 400, 600);
+	gtk_box_pack_start(GTK_BOX(gtkconv->tab_cont), sw, TRUE, TRUE, 0);
     gtk_widget_show(sw);
-
     GtkListStore *ls = gtk_list_store_new(N_COLUMNS,
                                           GDK_TYPE_PIXBUF,
                                           G_TYPE_STRING,
@@ -552,26 +540,48 @@
     gtk_tree_selection_set_mode(select, GTK_SELECTION_SINGLE);
 
     g_signal_connect(G_OBJECT(select), "changed",
-                     G_CALLBACK(changed_cb), gc);
+                     G_CALLBACK(changed_cb), browser->gc);
     gtk_container_add(GTK_CONTAINER(sw), browser->list);
     gtk_widget_show(browser->list);
 
 
     browser->button = gtk_button_new_with_label("Update");
     struct update_cb_data *udata = g_new0(struct update_cb_data, 1);
-    udata->gc = gc;
-    udata->room = channel;
+    udata->gc = browser->gc;
+    udata->room = browser->channel;
 
     g_signal_connect(browser->button, "clicked", G_CALLBACK(update_list),
                      udata);
-    gtk_box_pack_start(GTK_BOX(vbox), browser->button, FALSE, FALSE, 0);
+    gtk_box_pack_start(GTK_BOX(gtkconv->tab_cont), browser->button, FALSE, FALSE, 0);
     gtk_widget_show(browser->button);
 
-    gtk_widget_show(browser->window);
 
-    g_hash_table_insert(browsers, g_strdup(channel), browser);
     update_list(browser->button, udata);
+
 }
+static void roombrowse_menu_cb(GaimBlistNode * node, gpointer data)
+{
+    RoomBrowseGui *browser = g_new0(RoomBrowseGui, 1);
+    GaimConnection *gc = (GaimConnection *) data;
+	    
+    // GaimAccount *account = ((GaimChat *) node)->account;
+    GaimChat *chat = ((GaimChat *) node);
+    const char *channel = g_hash_table_lookup(chat->components, "channel");
+    const char *room = gaim_chat_get_name(chat);
+    const char *tempname;
+    gaim_debug_misc("roombrowse", "chat name: %s\n", room);
+    gaim_debug_misc("roombrowse", "channel name: %s\n", channel);
+   
+    browser->channel=g_strdup(channel);
+    browser->gc=gc;
+    tempname=g_strdup_printf("BROWSE:%s",room);
+    g_hash_table_insert(browsers, g_strdup(channel), browser);
+    g_hash_table_insert(browser_channels, g_strdup(tempname), g_strdup(channel));
+    GaimConversation* conv = gaim_conversation_new(GAIM_CONV_CHAT, gc->account, tempname); 
+    gaim_debug_misc("roombrowse","New conv: %x\n",conv);
+        return;
+
+    }
 static void roombrowse_menu_create(GaimBlistNode * node, GList ** menu)
 {
 
@@ -615,8 +625,15 @@
                         plugin, GAIM_CALLBACK(roombrowse_update_list_row),
                         NULL);
 
+    gaim_signal_connect(gaim_conversations_get_handle(),
+			"conversation-created",
+			plugin,
+			GAIM_CALLBACK(roombrowse_fix_conv),
+			NULL);
     browsers =
         g_hash_table_new_full(g_str_hash, g_str_equal, g_free, g_free);
 
+    browser_channels =
+        g_hash_table_new_full(g_str_hash, g_str_equal, g_free, g_free);
     return;
 }



From jblebrun at berlios.de  Mon Aug 29 08:17:37 2005
From: jblebrun at berlios.de (Jason LeBrun at BerliOS)
Date: Mon, 29 Aug 2005 08:17:37 +0200
Subject: [Qrc-svn] r282 - qrc/trunk
Message-ID: <200508290617.j7T6HbHI000747@sheep.berlios.de>

Author: jblebrun
Date: 2005-08-29 08:17:36 +0200 (Mon, 29 Aug 2005)
New Revision: 282

Modified:
   qrc/trunk/ChangeLog
Log:


Modified: qrc/trunk/ChangeLog
===================================================================
--- qrc/trunk/ChangeLog	2005-08-29 06:04:33 UTC (rev 281)
+++ qrc/trunk/ChangeLog	2005-08-29 06:17:36 UTC (rev 282)
@@ -1,3 +1,11 @@
+0.9.7:
+	Bug fixes:
+	-No more odd behavior with bio/stats
+	-Updates photos more properly in browser
+
+	Features:
+	-Browser is in tabbed window
+
 0.9.6:
 	Bug fixes:
 



From jblebrun at berlios.de  Mon Aug 29 08:20:24 2005
From: jblebrun at berlios.de (Jason LeBrun at BerliOS)
Date: Mon, 29 Aug 2005 08:20:24 +0200
Subject: [Qrc-svn] r283 - qrc/tags
Message-ID: <200508290620.j7T6KO3D000927@sheep.berlios.de>

Author: jblebrun
Date: 2005-08-29 08:20:23 +0200 (Mon, 29 Aug 2005)
New Revision: 283

Added:
   qrc/tags/release-0.9.7/
Log:
Tagging latest release


Copied: qrc/tags/release-0.9.7 (from rev 282, qrc/trunk)



